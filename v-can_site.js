// (с) Юрий Лазаренко, Севастополь
// e-mail lazarenkoyv@mail.ru
// v-can.Site
// v 5.3.1.5
// 19.12.2020

var Истина = true;
var Ложь = false;
var Неопределено = undefined;
var ГлобальныйКонтекст = Неопределено;
var РежимОткрытияОкнаФормы = {
	Независимый				 : 'Независимый',
	БлокироватьОкноВладельца : 'БлокироватьОкноВладельца',
	БлокироватьВесьИнтерфейс : 'БлокироватьВесьИнтерфейс'
};
var ТипФормы = {
	ФормаСписка		  : 'ФормаСписка',
	ФормаОбъекта	  : 'ФормаОбъекта',
	ТабличнаяЧасть	  : 'ТабличнаяЧасть',
	ДеревоЗначений	  : 'ДеревоЗначений',
	ВыпадающийСписок  : 'ВыпадающийСписок',
	ПроизвольнаяФорма : 'ПроизвольнаяФорма'
}
var СтатусСообщения = {
	Успех	   : 'Успех',
	Важное	   : 'Важное',
	Обычное	   : 'Обычное',
	Внимание   : 'Внимание',
	Информация : 'Информация'
}


///////////////////////////////////////////
// ГлобальныйКонтекст                    //
///////////////////////////////////////////

function ГлобальныйКонтекстВебКлиента(Параметры){
	var ЭтотОбъект = this;
	ЭтотОбъект.ИспользуетсяВИнтрасети = (Параметры.ИспользуетсяВИнтрасети === Неопределено) ? Ложь : Параметры.ИспользуетсяВИнтрасети; // Флаг использования сайта в интрасети
	ЭтотОбъект.Формы = {}; // Массив форм
	ЭтотОбъект.АктивнаяФорма = Неопределено; // Активная форма
	ЭтотОбъект.ПорядокОткрытыхФорм = []; // Массив активных форм в обратном порядке их открытия; нулевой элемент - последняя открытая форма
	ЭтотОбъект.ДополнительныеПараметры = {}; // Дополнительные параметры контекста
	ЭтотОбъект.ДополнительныеПараметрыЗапросов = {}; // Массив дополнительных параметров запросов к 1С
	ЭтотОбъект.КлассАктивнойСтроки = (Параметры.КлассАктивнойСтроки === Неопределено) ? "active success" : Параметры.КлассАктивнойСтроки;
	// Параметры подключения к базе 1С при использовании в интрасети
	ЭтотОбъект.Коннектор1С = {};
	// * URL базы 1С, обязателен к заполнению
	ЭтотОбъект.Коннектор1С.ПутьКБазе1С				= (Параметры.ПутьКБазе1С === Неопределено) ? "" : Параметры.ПутьКБазе1С;
	// Идентификатор сайта
	ЭтотОбъект.Коннектор1С.ИдентификаторСайта		= (Параметры.ИдентификаторСайта === Неопределено) ? "" : Параметры.ИдентификаторСайта;
	// Кодировка сайта. Если совпадает с кодировкой 1С, то параметр можно оставить пустым
	ЭтотОбъект.Коннектор1С.КодировкаСайта			= (Параметры.КодировкаСайта === Неопределено) ? "UTF-8" : Параметры.КодировкаСайта;
	// Кодировка 1C. Если совпадает с кодировкой сайта, то параметр можно оставить пустым
	ЭтотОбъект.Коннектор1С.КодировкаБазы1С			= (Параметры.КодировкаБазы1С === Неопределено) ? "UTF-8" : Параметры.КодировкаБазы1С;
	// Выполнять запросы к 1С методом POST. По умолчанию равен Истина.
	ЭтотОбъект.Коннектор1С.ИспользоватьPOSTЗапросы	= (Параметры.ИспользоватьPOSTЗапросы === Неопределено) ? Истина : Параметры.ИспользоватьPOSTЗапросы;
	// Метод хеширования пароля. Возможные значения: "MD5", "SHA1", "SHA256"
	ЭтотОбъект.Коннектор1С.МетодКодировнияПароля	= (Параметры.МетодКодировнияПароля === Неопределено) ? "SHA256" : Параметры.МетодКодировнияПароля;	
}

ГлобальныйКонтекстВебКлиента.prototype.УстановитьАктивнуюФорму = function(НоваяАктивнаяФорма){
	var ЭтотОбъект = this;
	if(ЭтотОбъект.АктивнаяФорма != НоваяАктивнаяФорма){
		// Установка активной формы
		ЭтотОбъект.АктивнаяФорма = НоваяАктивнаяФорма;
		if(ЭтотОбъект.АктивнаяФорма){
			// Помещаем id формы в массив
			if(ИндексВМассиве(ЭтотОбъект.ПорядокОткрытыхФорм, НоваяАктивнаяФорма.Идентификатор) >= 0){
				// Форма уже в массиве, удаляем ее со старой позиции
				ЭтотОбъект.ПорядокОткрытыхФорм.splice(ИндексВМассиве(ЭтотОбъект.ПорядокОткрытыхФорм, НоваяАктивнаяФорма.Идентификатор), 1);
			}
			ЭтотОбъект.ПорядокОткрытыхФорм.unshift(НоваяАктивнаяФорма.Идентификатор);
		}		
		// Закрываем формы выбора из выпадающего списка, владелец которых не является активной формой или которые сами не являются активными
		for(ИдентификаторФормы in ЭтотОбъект.Формы){
			var ТекущаяФорма = ГлобальныйКонтекст.Формы[ИдентификаторФормы];
			if(ТекущаяФорма.Тип === "ВыпадающийСписок" && ТекущаяФорма != НоваяАктивнаяФорма && ТекущаяФорма.Владелец != НоваяАктивнаяФорма){
				ТекущаяФорма.ЗакрытьФорму();
			}
		}
	}
}

ГлобальныйКонтекстВебКлиента.prototype.ПриЗакрытииФормы = function(ЗакрываемаяФорма){
	var ЭтотОбъект = this;
	// Убираем подложку формы
	ПодложкаМодальногоОкнаСкрыть(ЗакрываемаяФорма.Идентификатор);
	// Удаляем форму из массива активных форм
	while(ИндексВМассиве(ЭтотОбъект.ПорядокОткрытыхФорм, ЗакрываемаяФорма.Идентификатор) >= 0){
		ЭтотОбъект.ПорядокОткрытыхФорм.splice(ИндексВМассиве(ЭтотОбъект.ПорядокОткрытыхФорм, ЗакрываемаяФорма.Идентификатор), 1);
	}
	// Установка новой активной формы
	if(ЭтотОбъект.ПорядокОткрытыхФорм.length > 0){
		ЭтотОбъект.АктивнаяФорма = ЭтотОбъект.Формы[ЭтотОбъект.ПорядокОткрытыхФорм[0]];
	}else{
		ЭтотОбъект.АктивнаяФорма = Неопределено;
	}
}

///////////////////////////////////////////
// Класс "Секция формы, дерево значений" //
///////////////////////////////////////////

function ДеревоЗначений(Параметры){
	var ЭтаФорма = this;
	ЭтаФорма.Тип = "ДеревоЗначений";
	if(Параметры.Идентификатор === Неопределено){ // Идентификатор формы
		ЭтаФорма.Идентификатор = СлучайныйИдентификатор();
	}else{
		ЭтаФорма.Идентификатор = Параметры.Идентификатор;
	}
	ГлобальныйКонтекст.Формы[ЭтаФорма.Идентификатор] = ЭтаФорма;
	ЭтаФорма.Владелец = Параметры.Владелец;
	ЭтаФорма.СоздаватьИзШаблона = (Параметры.СоздаватьИзШаблона === Неопределено) ? Истина : Параметры.СоздаватьИзШаблона; // Истина - создавать секцию формы из копии шаблона, иначе использовать сам шаблон.
	var ШаблонДерева = ЭлементHTMLДокумента(Параметры.КорневойЭлемент);
	if(ЭтаФорма.СоздаватьИзШаблона){
		var НовыйЭлементHTML_Дерево = ШаблонДерева.cloneNode(Истина);
		НовыйЭлементHTML_Дерево.id = '';
		ШаблонДерева.parentNode.insertBefore(НовыйЭлементHTML_Дерево, ШаблонДерева.nextSibling);
		ЭтаФорма.КорневойЭлемент = НовыйЭлементHTML_Дерево;
	}else{
		ЭтаФорма.КорневойЭлемент = ШаблонДерева;
	}
	ЭтаФорма.Строки = {};
	ЭтаФорма.ОтборСтрок = {};
	ЭтаФорма.Элементы = {};
	ЭтаФорма.Элементы.Кнопки = {};
	ЭтаФорма.Элементы.Кнопки.ДобавитьСтроку = null;
	ЭтаФорма.Элементы.Кнопки.УдалитьСтроку = null;
	ЭтаФорма.ЭлементHTMLКонтейнер = НулевойЭлементКоллекции(ЭтаФорма.КорневойЭлемент, "listContainer"); // Элемент, непосредственно внутри которого располагается список
	ЭтаФорма.КорневойЭлементHTMLТаблицы = Неопределено; // Корневой элемент списка (тег "<table>")
	ЭтаФорма.ТекущаяСтрока = Неопределено; // Активная строка ТЧ
	ЭтаФорма.Колонки = (Параметры.Колонки === Неопределено) ? "" : Параметры.Колонки; // Список колонок ТЧ
	//ЭтаФорма.ОбъектСсылка = (Параметры.ОбъектСсылка === Неопределено) ? "" : Параметры.ОбъектСсылка; // Ссылка на объект, которому принадлежит дерево
	//ЭтаФорма.ОсновнаяТаблица = (Параметры.ОсновнаяТаблица === Неопределено) ? "" : Параметры.ОсновнаяТаблица; // Имя табличной части объекта
	ЭтаФорма.ШаблонHTMLТаблицы = (Параметры.ШаблонHTMLТаблицы === Неопределено) ? "" : Параметры.ШаблонHTMLТаблицы; // Шаблон списка табличной части
	ЭтаФорма.ПроизвольныйЗапрос = (Параметры.ПроизвольныйЗапрос === Неопределено) ? "" : Параметры.ПроизвольныйЗапрос; // Имя функции, возвращающей результат произвольного запроса с коллекцией данных для ТЧ
	//ЭтаФорма.Отбор = (Параметры.Отбор === Неопределено) ? "" : Параметры.Отбор; // Связи параметров выбора
	ЭтаФорма.РодительскаяФорма = (Параметры.РодительскаяФорма === Неопределено) ? Неопределено : Параметры.РодительскаяФорма; // Родительская форма
	if(ЭтаФорма.РодительскаяФорма){
		if(ЭтаФорма.РодительскаяФорма.hasOwnProperty("ПодчиненныеФормы")){
			// Назначим текущей форме родителя
			ЭтаФорма.РодительскаяФорма.ПодчиненныеФормы.push(ЭтаФорма);
		}
		if(ЭтаФорма.ЗагруженаСРодителем){
			// Дерево уже загружено с родителем, возьмем из него данные строк
			ЭтаФорма.Строки = ЭтаФорма.РодительскаяФорма.Объект[ЭтаФорма.ИмяРеквизита];
			// Заменим у родителя массив данных формы на ссылку на массив
			ЭтаФорма.РодительскаяФорма.Объект[ЭтаФорма.ИмяРеквизита] = ЭтаФорма.Строки;
		}
	}
	ЭтаФорма.ДополнительныеСвойства = (Параметры.ДополнительныеСвойства === Неопределено) ? {} : Параметры.ДополнительныеСвойства; // Дополнительные произвольные свойства
	ЭтаФорма.Инициализировать = function()
	{		
		// Создание кнопок, назначение им событий
		ЭтаФорма.Элементы.Кнопки.ДобавитьСтроку   = НулевойЭлементКоллекции(ЭтаФорма.КорневойЭлемент, 'insertRowBtn');
		ЭтаФорма.Элементы.Кнопки.УдалитьСтроку    = НулевойЭлементКоллекции(ЭтаФорма.КорневойЭлемент, 'deleteRowBtn');
		ЭтаФорма.Элементы.Кнопки.КопироватьСтроку = НулевойЭлементКоллекции(ЭтаФорма.КорневойЭлемент, 'copyRowBtn');
		if(ЭтаФорма.КорневойЭлемент){
			ЭтаФорма.КорневойЭлемент.onclick = function(Событие){
				var Событие = Событие || window.event;
				ОбработкаСобытияКликаПоСтрокеТаблицы(Событие, ЭтаФорма);
				ГлобальныйКонтекст.УстановитьАктивнуюФорму(ЭтаФорма);
				Событие.stopPropagation();
			};
			ЭтаФорма.КорневойЭлемент.ondblclick = function(Событие){
				var Событие = Событие || window.event;
				ОбработкаСобытияКликаПоСтрокеТаблицы(Событие, ЭтаФорма);
			};
			var ТолькоЧтение = Ложь;
			if(ЭтаФорма.РодительскаяФорма && ЭтаФорма.РодительскаяФорма.Тип === 'ФормаОбъекта'){
				ТолькоЧтение = ЭтаФорма.РодительскаяФорма.ТолькоПросмотр();
			}
			if(ЭтаФорма.Элементы.Кнопки.ДобавитьСтроку){
				if(ТолькоЧтение){
					ЭтаФорма.Элементы.Кнопки.ДобавитьСтроку.disabled = Истина;
				}else{
					ЭтаФорма.Элементы.Кнопки.ДобавитьСтроку.onclick = function(){
						ЭтаФорма.ДобавитьСтроку();
					};
				}
			}
			if(ЭтаФорма.Элементы.Кнопки.КопироватьСтроку){
				if(ТолькоЧтение){
					ЭтаФорма.Элементы.Кнопки.КопироватьСтроку.disabled = Истина;
				}else{
					ЭтаФорма.Элементы.Кнопки.КопироватьСтроку.onclick = function(){
						ЭтаФорма.КопироватьСтроку();
					};
				}
			}
			if(ЭтаФорма.Элементы.Кнопки.УдалитьСтроку){
				if(ТолькоЧтение){
					ЭтаФорма.Элементы.Кнопки.УдалитьСтроку.disabled = Истина;
				}else{
					ЭтаФорма.Элементы.Кнопки.УдалитьСтроку.onclick = function(){
						ЭтаФорма.УдалитьСтроку();
					};
				}
			}
		}
		ЭтаФорма.ОткрытьФорму();
	}
}

// Открытие формы
ДеревоЗначений.prototype.ОткрытьФорму = function(){
	var ЭтаФорма = this;
	if(ЭтаФорма.КорневойЭлемент){
		ЭтаФорма.КорневойЭлемент.style.display = 'block';
	}
}

// Закрытие формы
ДеревоЗначений.prototype.ЗакрытьФорму = function(){
	var ЭтаФорма = this;
	ЭтаФорма.ПриЗакрытии();	
	ЗакрытьЗависимыеФормы(ЭтаФорма);
	ГлобальныйКонтекст.ПриЗакрытииФормы(ЭтаФорма);
	if(this.РодительскаяФорма){
		// Удалим текущую форму из массива подчиненных формы-родителя
		this.РодительскаяФорма.ПодчиненныеФормы.splice(this.РодительскаяФорма.ПодчиненныеФормы.indexOf(this), 1);
	}
	ЭтаФорма.КорневойЭлемент.parentNode.removeChild(ЭтаФорма.КорневойЭлемент);
	if(ЭтаФорма.Элементы.Кнопки.ДобавитьСтроку){
		ЭтаФорма.Элементы.Кнопки.ДобавитьСтроку.onclick = Неопределено;
	}
	if(ЭтаФорма.Элементы.Кнопки.КопироватьСтроку){
		ЭтаФорма.Элементы.Кнопки.КопироватьСтроку.onclick = Неопределено;
	}
	if(ЭтаФорма.Элементы.Кнопки.УдалитьСтроку){
		ЭтаФорма.Элементы.Кнопки.УдалитьСтроку.onclick = Неопределено;
	}
	ЭтаФорма.КорневойЭлемент.ondblclick = Неопределено;
	ЭтаФорма.КорневойЭлемент.onclick = Неопределено;
	ИдентификаторФормы = ЭтаФорма.Идентификатор;
	ЭтаФорма = Неопределено;
	delete ГлобальныйКонтекст.Формы[ИдентификаторФормы];
}

// Загрузка данных в список
ДеревоЗначений.prototype.Загрузить = function(ДополнительныеПараметры, ПараметрыОтображения){
	var ЭтаФорма = this;
	//АтрибутыЭлементаHTMLВПараметрыURL(ДополнительныеПараметры, ЭтаФорма.ТекущаяСтрока, "activerow_");
	ДополнительныеПараметры = (ДополнительныеПараметры === Неопределено) ? {} : ДополнительныеПараметры;
	ПеременнуюВКлючСтруктуры(ДополнительныеПараметры, "Колонки", ЭтаФорма.Колонки);
	//ПеременнуюВКлючСтруктуры(ДополнительныеПараметры, "objectRef", ЗначениеСсылки(ЭтаФорма.ОбъектСсылка));
	ПеременнуюВКлючСтруктуры(ДополнительныеПараметры, "targetelem_listformtemplate", ЭтаФорма.ШаблонHTMLТаблицы);
	//ПеременнуюВКлючСтруктуры(ДополнительныеПараметры, "targetelem_maintable", ЭтаФорма.ОсновнаяТаблица);
	ПеременнуюВКлючСтруктуры(ДополнительныеПараметры, "customquery", ЭтаФорма.ПроизвольныйЗапрос);

	/*
	if(o.Отбор != ""){
		// Разберем связи параметров выбора, передадим их в качестве дополнительных параметров в 1С
		var МассивДанных = o.Отбор.split(",");
		for (var Ключ in МассивДанных) {
			var Значение = МассивДанных[Ключ].split(":")[1].trim();
			АтрибутыЭлементаHTMLВПараметрыURL(ДополнительныеПараметры, ЭлементHTMLДокумента(Значение), Значение+ "_");
		}
	}
	*/
	/*
	if(ЭтаФорма.Отбор && Object.keys(ЭтаФорма.Отбор).length > 0){
		ПеременнуюВКлючСтруктуры(ДополнительныеПараметры, "filter", JSON.stringify(ЭтаФорма.Отбор)); // !!!!! Проверить, точно ли переменная называется filter
	}
	*/
	
	if(ПараметрыОтображения === Неопределено){
		ПараметрыОтображения = {};
	}
	// После загрузки содержимого формы элемента, соответствующего активной строке, не будет. Обнуляем активную строку.
	ЭтаФорма.ТекущаяСтрока = Неопределено;

	// Выполнение запроса
	if(ГлобальныйКонтекст.ИспользуетсяВИнтрасети){
		var link = ГлобальныйКонтекст.Коннектор1С.ПутьКБазе1С + '/v-can.site/execute';
		ПеременнуюВКлючСтруктуры(ДополнительныеПараметры, "exec", КодироватьКомпонентыURI('КэнСайтСервер.СекцияФормыДеревоЗначений(ПараметрыЗапроса)'));
	}else{
		var link = 'ajax/valuetree.php';
	}
	// Флаг асинхронной загрузки
	var АсинхронныйВызов = Истина; // По умолчанию делается асинхронный вызов
	if(ДополнительныеПараметры.hasOwnProperty("АсинхронныйВызов")){
		АсинхронныйВызов = ДополнительныеПараметры.АсинхронныйВызов;
	}
	// Добавление параметров запроса в данные формы
	var ДанныеHTMLФормы = new FormData();
	ПараметрыURLВДанныеHTMLФормы(ДанныеHTMLФормы, ДополнительныеПараметры);
	var ЗапросHttp = НовыйЗапросHttp(); 
	if(ЗапросHttp){
		ЗапросHttp.open('post', link, АсинхронныйВызов); 
		ЗапросHttp.withCredentials = Истина;
		ЗапросHttp.onreadystatechange = function (){
			if(ЗапросHttp.readyState === 4){
				var ТелоОтветаHttp = ЗапросHttp.responseText;
				ТелоОтветаHttp = ТелоОтветаHttp.trim();
				if(ГлобальныйКонтекст.ИспользуетсяВИнтрасети){
					// !!!!! Добавить проверки на корректный ответ, сделать в виде отдельной функции, так как вызываться  будет из нескольких мест
					ТелоОтветаHttp = ТелоОтветаHttp.replace('<!--v-can.Status: OK-->', '');
					ТелоОтветаHttp = ТелоОтветаHttp.trim();					
				}
				ЭтаФорма.ПриЗагрузке(ТелоОтветаHttp);
			}
        } 
		ЗапросHttp.send(ДанныеHTMLФормы);
	}else{  
		{return null;}
	} 
}

// Событие загрузки данных формы
ДеревоЗначений.prototype.ПриЗагрузке = function(ОтветСервераJSON){
	var ЭтаФорма = this;
	// Обработка полученного ответа
	try{
		var МассивДанных = JSON.parse(ОтветСервераJSON);
		var ТелоОтветаHttp = МассивДанных.ТекстФормы;
		var Строки = МассивДанных.Строки;
		ЭтаФорма.Строки = JSON.parse(Строки);
	}catch(err){
		var ТелоОтветаHttp = ОтветСервераJSON;
		ЭтаФорма.Строки = {};
	}
	/*
	// Поместим ссылку на данные формы в форму-владельца
	if(ЭтаФорма.РодительскаяФорма){
		ЭтаФорма.РодительскаяФорма.Объект[ЭтаФорма.ИмяРеквизита] = ЭтаФорма.Строки;
	}
	*/	
	// Заполнение табличного поля
	ЭтаФорма.ЭлементHTMLКонтейнер.innerHTML = ТелоОтветаHttp;
	// Поместим ссылку на табличное поле в реквизит формы
	ЭтаФорма.КорневойЭлементHTMLТаблицы = НулевойЭлементКоллекции(ЭтаФорма.ЭлементHTMLКонтейнер, "table", Истина);
	
	// Назначение полям ввода события изменения реквизита формы
	НазначитьЭлементамФормыСобытия(ЭтаФорма, ЭтаФорма.КорневойЭлемент);
	
	// Делаем текущую форму активной
	//ГлобальныйКонтекст.УстановитьАктивнуюФорму(ЭтаФорма); 
	// Вызов события "После загрузки формы"
	ЭтаФорма.ПослеЗагрузки();
}

// Событие изменения реквизита формы
ДеревоЗначений.prototype.ПриИзменении = function(СобытиеИлиЭлемент){
	var ЭтаФорма = this;
	ФормаСписка_ПриИзменении(ЭтаФорма, СобытиеИлиЭлемент);
}

// Событие очистки реквизита формы
ДеревоЗначений.prototype.ОчиститьПолеВвода = function(Элемент){
	var ЭтаФорма = this;
	ОчиститьПолеВвода(Элемент);
	ЭтаФорма.ПриИзменении(Элемент);
}

// Событие набора текста в реквизите
ДеревоЗначений.prototype.ИзменениеТекстаРедактирования = function(Событие){
	var ЭтаФорма = this;
	ИзменениеТекстаРедактирования(ЭтаФорма, Событие);
}

// Изменение значения реквизита и обновление отображения данных строки дерева значений
// Сначала устанавливается значение данных формы, потом оно копируется в значение соответствующего элемента html
ДеревоЗначений.prototype.УстановитьЗначениеРеквизита = function(ИмяРеквизита, ЗначениеРеквизита, ДанныеФормыИлиИндекс, НеИнициироватьСобытиеПриИзменении){
	var ЭтаФорма = this;
	УстановитьЗначениеРеквизитаТаблицы(ЭтаФорма, ИмяРеквизита, ЗначениеРеквизита, ДанныеФормыИлиИндекс, НеИнициироватьСобытиеПриИзменении);
}

// Изменение значения реквизита и обновление отображения данных строки дерева значений
// Сначала устанавливается значение элемента html, а потом - соответствующих ему данных формы
ДеревоЗначений.prototype.УстановитьЗначениеДанныхФормы = function(ЭлементИлиИндекс, ИмяРеквизита, ЗначениеРеквизита, НеИнициироватьСобытиеПриИзменении){
	var ЭтаФорма = this;
	УстановитьЗначениеДанныхТаблицы(ЭтаФорма, ЭлементИлиИндекс, ИмяРеквизита, ЗначениеРеквизита, НеИнициироватьСобытиеПриИзменении);
}

// Обновление отображения данных строки дерева значений
ДеревоЗначений.prototype.УстановитьЗначениеЭлементаHTML = function(ИмяРеквизита, ЗначениеРеквизита, ЭлементИлиИндекс){
	var ЭтаФорма = this;
	УстановитьЗначениеЭлементаHTMLТаблицы(ЭтаФорма, ИмяРеквизита, ЗначениеРеквизита, ЭлементИлиИндекс);
}

// Установка активной строки дерева
ДеревоЗначений.prototype.УстановитьТекущуюСтроку = function(НоваяТекущаяСтрока, ПредыдущаяТекущаяСтрока, Элемент){
	var ЭтаФорма = this;
	var ИмяТекущейКолонки;
	if(ПредыдущаяТекущаяСтрока){
		if(document.activeElement && ПредыдущаяТекущаяСтрока.contains(document.activeElement)){
			if(АтрибутЭлементаHTML(document.activeElement, 'formdataname')){
				ИмяТекущейКолонки = АтрибутЭлементаHTML(document.activeElement, 'formdataname');
			}
		}
	}
	if(typeof НоваяТекущаяСтрока === 'number'){
		НоваяТекущаяСтрока = ЭтаФорма.ПолучитьСтрокуПоИндексу(НоваяТекущаяСтрока);
	}
	if(ЭтаФорма.ТекущаяСтрока === НоваяТекущаяСтрока){
		// Активная строка не изменилась
		if(Элемент && Элемент.classList.contains('ListFormTreeIconTD')){
			ЭтаФорма.РазвернутьСвернутьСтроку(ЭтаФорма.ТекущаяСтрока);
		}
		return;
	}
	СменитьАктивнуюСтрокуТаблицыФормы(ЭтаФорма, НоваяТекущаяСтрока);
	ЭтаФорма.ТекущаяСтрока = НоваяТекущаяСтрока;
	if(ЭтаФорма.ТекущаяСтрока){
		if(document.activeElement && ЭтаФорма.ТекущаяСтрока.contains(document.activeElement)){
			// Активный элемент формы входит в состав текущей строки
		}else{
			// Если активный элемент формы не входит в состав текущей строки,
			// то устанавливаем фокус на первый видимый input строки или input в той же колонке,
			// в которой он был в предыдущей строке
			if(ИмяТекущейКолонки){
				var ПоляВвода = ЭтаФорма.ТекущаяСтрока.querySelectorAll('input[formdataname=' + ИмяТекущейКолонки + ']');
			}else{
				var ПоляВвода = ЭтаФорма.ТекущаяСтрока.querySelectorAll('input[formdataname]');
			}
			for (var Счетчик = 0, КоличествоПолей = ПоляВвода.length; Счетчик < КоличествоПолей; Счетчик++) {
				if(ПоляВвода[Счетчик].disabled != Истина && ЭлементHTMLВидимость(ПоляВвода[Счетчик])){
					ПоляВвода[Счетчик].focus();
					break;
				}
			}
		}
		if(ЭлементHTMLВВидимойОбластиОкна(ЭтаФорма.ТекущаяСтрока) === Ложь){
			ПрокруткаДоПозицииЭлемента(ЭтаФорма.ТекущаяСтрока);
		}		
	}
	// Если строка скрыта, то раскрываем все ее строки-родители
	var ДанныеСтроки = ЭтаФорма.Строки[ЭтаФорма.ТекущаяСтрока.rowIndex - 1];
	if(ДанныеСтроки.ИдентификаторРодителя){
		for(var Индекс=0; Индекс < ЭтаФорма.КоличествоСтрок(); Индекс++){
			var ДанныеСтрокиВрем = ЭтаФорма.Строки[Индекс];
			if(ДанныеСтрокиВрем.ИдентификаторСтроки === ДанныеСтроки.ИдентификаторРодителя){
				ЭтаФорма.РазвернутьСтроку(Индекс);
			}
		}		
	}
	// Событие при активации строки
	ЭтаФорма.ПриАктивизацииСтроки();
	if(Элемент && Элемент.classList.contains('ListFormTreeIconTD')){
		ЭтаФорма.РазвернутьСвернутьСтроку(ЭтаФорма.ТекущаяСтрока);
	}
}

// Получение строки дерева по индексу
ДеревоЗначений.prototype.ПолучитьСтрокуПоИндексу = function(ИндексСтроки){
	var ЭтаФорма = this;
	if(ЭтаФорма.КорневойЭлементHTMLТаблицы && ЭтаФорма.КорневойЭлементHTMLТаблицы.nodeName.toLowerCase() === "table" && ЭтаФорма.КорневойЭлементHTMLТаблицы.tBodies[0]){
		return ЭтаФорма.КорневойЭлементHTMLТаблицы.tBodies[0].rows[ИндексСтроки];
	}
}

// Возвращет количество строк дерева
ДеревоЗначений.prototype.КоличествоСтрок = function(){
	var ЭтаФорма = this;
	if(ЭтаФорма.КорневойЭлементHTMLТаблицы && ЭтаФорма.КорневойЭлементHTMLТаблицы.nodeName.toLowerCase() === "table" && ЭтаФорма.КорневойЭлементHTMLТаблицы.tBodies[0]){
		return ЭтаФорма.КорневойЭлементHTMLТаблицы.tBodies[0].rows.length;
	}	
}

// Возврат данных текущей строки
ДеревоЗначений.prototype.ТекущиеДанные = function(){
	var ЭтаФорма = this;
	if(ЭтаФорма.ТекущаяСтрока){
		var ИндексСтроки = ЭтаФорма.ТекущаяСтрока.rowIndex;
		ИндексСтроки = ИндексСтроки - 1;
		var ДанныеСтроки = ЭтаФорма.Строки[ИндексСтроки];
		if(ДанныеСтроки){
			return ДанныеСтроки;
		}
	}
	return Неопределено;
}

// В зависимости от текущего состояния строки разворачивает или сворачивает ее
ДеревоЗначений.prototype.РазвернутьСвернутьСтроку = function(ЭлементИлиИндекс){
	var ЭтаФорма = this;
	if(typeof ЭлементИлиИндекс === 'object'){
		// Передана строка ТЧ
		СтрокаЭлементHTML = ЭлементИлиИндекс;
	}else if(typeof ЭлементИлиИндекс === 'number'){
		// Передан индекс строки
		var СтрокаЭлементHTML = ЭтаФорма.КорневойЭлементHTMLТаблицы.tBodies[0].rows[ЭлементИлиИндекс];
	}
	if(ЭтаФорма.СтрокаРазвернута(СтрокаЭлементHTML)){
		ЭтаФорма.СвернутьСтроку(СтрокаЭлементHTML);
	}else{
		ЭтаФорма.РазвернутьСтроку(СтрокаЭлементHTML);
	}
}

// В зависимости от текущего состояния строки разворачивает или сворачивает ее
ДеревоЗначений.prototype.РазвернутьСтроку = function(ЭлементИлиИндекс){
	var ЭтаФорма = this;
	if(!ЭтаФорма.СтрокаРазвернута(ЭлементИлиИндекс)){
		if(typeof ЭлементИлиИндекс === 'object'){
			// Передана строка ТЧ
			var СтрокаЭлементHTML = ЭлементИлиИндекс;
			var ИндексСтроки = СтрокаЭлементHTML.rowIndex - 1;
		}else if(typeof ЭлементИлиИндекс === 'number'){
			// Передан индекс строки
			var СтрокаЭлементHTML = ЭтаФорма.КорневойЭлементHTMLТаблицы.tBodies[0].rows[ЭлементИлиИндекс];
			var ИндексСтроки = ЭлементИлиИндекс;
		}
		var ДанныеСтроки = ЭтаФорма.Строки[ИндексСтроки];
		if(ДанныеСтроки){
			// Установке раскрываемой строке признака "Развернута"
			ДобавитьКлассHTMLЭлементу(СтрокаЭлементHTML.getElementsByClassName('ListFormTreeIconTD')[0], 'Expanded');
			// Отображение строк, подчиненных раскрываемой
			var ИдентификаторТекущийСтроки = ДанныеСтроки.ИдентификаторСтроки;
			for(var Индекс=0; Индекс < ЭтаФорма.КоличествоСтрок(); Индекс++){
				var ДанныеСтрокиВрем = ЭтаФорма.Строки[Индекс];
				if(ДанныеСтрокиВрем.ИдентификаторРодителя === ИдентификаторТекущийСтроки){
					var ЭлементСтроки = ЭтаФорма.ПолучитьСтрокуПоИндексу(Индекс);
					ЭлементСтроки.style.display = 'table-row';
				}
			}
			// Разворачивание строки-родителя
			for(var Индекс=0; Индекс < ЭтаФорма.КоличествоСтрок(); Индекс++){
				var ДанныеСтрокиВрем = ЭтаФорма.Строки[Индекс];
				if(ДанныеСтрокиВрем.ИдентификаторСтроки === ДанныеСтроки.ИдентификаторРодителя){
					ЭтаФорма.РазвернутьСтроку(Индекс);
					break;
				}
			}
		}
	}
}

ДеревоЗначений.prototype.СвернутьВсеСтроки = function(){
	var ЭтаФорма = this;
	for(var Индекс=0; Индекс < ЭтаФорма.КоличествоСтрок(); Индекс++){
		ЭтаФорма.СвернутьСтроку(Индекс);
	}	
}

// В зависимости от текущего состояния строки разворачивает или сворачивает ее
ДеревоЗначений.prototype.СвернутьСтроку = function(ЭлементИлиИндекс){
	var ЭтаФорма = this;
	if(ЭтаФорма.СтрокаРазвернута(ЭлементИлиИндекс)){
		if(typeof ЭлементИлиИндекс === 'object'){
			// Передана строка ТЧ
			СтрокаЭлементHTML = ЭлементИлиИндекс;
			var ДанныеСтроки = ЭтаФорма.Строки[СтрокаЭлементHTML.rowIndex - 1];
		}else if(typeof ЭлементИлиИндекс === 'number'){
			// Передан индекс строки
			var СтрокаЭлементHTML = ЭтаФорма.КорневойЭлементHTMLТаблицы.tBodies[0].rows[ЭлементИлиИндекс];
			var ДанныеСтроки = ЭтаФорма.Строки[ЭлементИлиИндекс];
		}
		if(ДанныеСтроки){
			УдалитьКлассHTMLЭлемента(СтрокаЭлементHTML.getElementsByClassName('ListFormTreeIconTD')[0], 'Expanded');
			var ИдентификаторТекущийСтроки = ДанныеСтроки.ИдентификаторСтроки;
			for(var Индекс=0; Индекс < ЭтаФорма.КоличествоСтрок(); Индекс++){
				var ДанныеСтрокиВрем = ЭтаФорма.Строки[Индекс];
				if(ДанныеСтрокиВрем.ИдентификаторРодителя === ИдентификаторТекущийСтроки){
					var ЭлементСтроки = ЭтаФорма.ПолучитьСтрокуПоИндексу(Индекс);
					ЭлементСтроки.style.display = 'none';
					if(ДанныеСтрокиВрем.ЕстьПодчиненныеСтроки){
						// Сворачиваем и скрываем подчиненные строки
						ЭтаФорма.СвернутьСтроку(Индекс);
					}
				}
			}
		}
	}
}

ДеревоЗначений.prototype.СтрокаРазвернута = function(ЭлементИлиИндекс){
	var ЭтаФорма = this;
	if(typeof ЭлементИлиИндекс === "object"){
		// Передана строка ТЧ
		СтрокаЭлементHTML = ЭлементИлиИндекс;
	}else if(typeof ЭлементИлиИндекс === "number"){
		// Передан индекс строки
		var СтрокаЭлементHTML = ЭтаФорма.КорневойЭлементHTMLТаблицы.tBodies[0].rows[ЭлементИлиИндекс];
	}
	var ЭлементИконка = СтрокаЭлементHTML.getElementsByClassName('ListFormTreeIconTD')[0];
	if(ЭлементИконка){
		if(СодержитКласс(ЭлементИконка, 'Expanded')){
			return Истина;
		}else{
			return Ложь;
		}
	}
	return Неопределено;
}

ДеревоЗначений.prototype.ОбработкаВыбора = function(){
}

// Событие окончания редактирования элемента
ДеревоЗначений.prototype.ПриИзмененииРеквизита = function(ЭлементРеквизита, ИмяРеквизита, ДанныеСтроки){
}

// Событие окончания редактирования строки
ДеревоЗначений.prototype.ПриИзмененииСтроки = function(СтрокаЭлементHTML){
}

// Событие активизации строки
ДеревоЗначений.prototype.ПриАктивизацииСтроки = function(){
}

// Событие при нажатии на строку
ДеревоЗначений.prototype.ПриНажатии = function(ЭлементСтрока, ИсточникСобытия){
}

// Событие перед добавлением строки
ДеревоЗначений.prototype.ПриНачалеДобавления = function(Отказ){
}

// Событие добавления строки
ДеревоЗначений.prototype.ПриДобавленииСтроки = function(СтрокаЭлементHTML, ТекущиеДанные, Копирование){
}

// Событие перед удалением строки
ДеревоЗначений.prototype.ПередУдалением = function(СтрокаЭлементHTML, Отказ){
}

// Событие после удаления строки
ДеревоЗначений.prototype.ПриУдаленииСтроки = function(){
}

// Событие очистки дерева
ДеревоЗначений.prototype.ПриОчистке = function(){
}

// Событие после загрузки секции
ДеревоЗначений.prototype.ПослеЗагрузки = function(){
}

// Событие закрытия формы
ДеревоЗначений.prototype.ПриЗакрытии = function(){
}


///////////////////////////////////////////
// Класс "Секция формы, табличная часть" //
///////////////////////////////////////////

function ТабличнаяЧасть(Параметры) {
	var ЭтаФорма = this;
	ЭтаФорма.Тип = "ТабличнаяЧасть";
	if(Параметры.Идентификатор === Неопределено){ // Идентификатор формы
		ЭтаФорма.Идентификатор = СлучайныйИдентификатор();
	}else{
		ЭтаФорма.Идентификатор = Параметры.Идентификатор;
	}
	if(Параметры.ИмяРеквизита === Неопределено){ // Имя реквизита - табличной части объекта метаданных в 1С
		ЭтаФорма.ИмяРеквизита = ЭтаФорма.Идентификатор;
	}else{
		ЭтаФорма.ИмяРеквизита = Параметры.ИмяРеквизита;
	}
	ГлобальныйКонтекст.Формы[ЭтаФорма.Идентификатор] = ЭтаФорма;
	ЭтаФорма.Владелец = Параметры.Владелец;
	ЭтаФорма.СоздаватьИзШаблона = (Параметры.СоздаватьИзШаблона === Неопределено) ? Истина : Параметры.СоздаватьИзШаблона; // Истина - создавать секцию формы из копии шаблона, иначе использовать сам шаблон.
	ЭтаФорма.ЗагруженаСРодителем = Параметры.ЗагруженаСРодителем; // Истина, если табличная часть была загружена одновременно с формой-родителем
	var ШаблонТЧ = ЭлементHTMLДокумента(Параметры.КорневойЭлемент);
	if(ЭтаФорма.СоздаватьИзШаблона){
		var НовыйЭлементHTML_ТЧ = ШаблонТЧ.cloneNode(Истина);
		НовыйЭлементHTML_ТЧ.id = '';
		ШаблонТЧ.parentNode.insertBefore(НовыйЭлементHTML_ТЧ, ШаблонТЧ.nextSibling);
		ЭтаФорма.КорневойЭлемент = НовыйЭлементHTML_ТЧ;
	}else{
		ЭтаФорма.КорневойЭлемент = ШаблонТЧ;
	}
	ЭтаФорма.Строки = [];
	ЭтаФорма.ОтборСтрок = {};
	ЭтаФорма.ПодчиненныеФормы = new Array();	// Подчиненные формы
	ЭтаФорма.Элементы = {};
	ЭтаФорма.Элементы.Кнопки = {};
	ЭтаФорма.Элементы.Кнопки.ДобавитьСтроку = Неопределено;
	ЭтаФорма.Элементы.Кнопки.КопироватьСтроку = Неопределено;
	ЭтаФорма.Элементы.Кнопки.УдалитьСтроку = Неопределено;
	ЭтаФорма.Элементы.Кнопки.ПереместитьСтрокуВверх = Неопределено;
	ЭтаФорма.Элементы.Кнопки.ПереместитьСтрокуВниз = Неопределено;
	ЭтаФорма.ЭлементHTMLКонтейнер = НулевойЭлементКоллекции(ЭтаФорма.КорневойЭлемент, "listContainer"); // Элемент, непосредственно внутри которого располагается список
	ЭтаФорма.КорневойЭлементHTMLТаблицы = Неопределено; // Корневой элемент списка (тег "<table>")
	ЭтаФорма.ТекущаяСтрока = Неопределено; // Активная строка ТЧ
	ЭтаФорма.Колонки = (Параметры.Колонки === Неопределено) ? "" : Параметры.Колонки; // Список колонок ТЧ
	ЭтаФорма.ОбъектСсылка = (Параметры.ОбъектСсылка === Неопределено) ? "" : Параметры.ОбъектСсылка; // Ссылка на объект, которому принадлежит ТЧ
	ЭтаФорма.ОсновнаяТаблица = (Параметры.ОсновнаяТаблица === Неопределено) ? "" : Параметры.ОсновнаяТаблица; // Имя табличной части объекта
	ЭтаФорма.ШаблонHTMLТаблицы = (Параметры.ШаблонHTMLТаблицы === Неопределено) ? "" : Параметры.ШаблонHTMLТаблицы; // Шаблон списка табличной части
	ЭтаФорма.ПроизвольныйЗапрос = (Параметры.ПроизвольныйЗапрос === Неопределено) ? "" : Параметры.ПроизвольныйЗапрос; // Имя функции, возвращающей результат произвольного запроса с коллекцией данных для ТЧ
	ЭтаФорма.Отбор = (Параметры.Отбор === Неопределено) ? "" : Параметры.Отбор; // Связи параметров выбора
	ЭтаФорма.РодительскаяФорма = (Параметры.РодительскаяФорма === Неопределено) ? Неопределено : Параметры.РодительскаяФорма; // Родительская форма
	if(ЭтаФорма.РодительскаяФорма){
		if(ЭтаФорма.РодительскаяФорма.hasOwnProperty("ПодчиненныеФормы")){
			// Назначим текущей форме родителя
			ЭтаФорма.РодительскаяФорма.ПодчиненныеФормы.push(ЭтаФорма);
		}
		if(ЭтаФорма.ЗагруженаСРодителем){
			// ТЧ уже загружена с родителем, возьмем из него данные ТЧ
			ЭтаФорма.Строки = ЭтаФорма.РодительскаяФорма.Объект[ЭтаФорма.ИмяРеквизита];
			// Заменим у родителя массив данных формы на ссылку на массив
			ЭтаФорма.РодительскаяФорма.Объект[ЭтаФорма.ИмяРеквизита] = ЭтаФорма.Строки;
		}
	}
	ЭтаФорма.ДополнительныеСвойства = (Параметры.ДополнительныеСвойства === Неопределено) ? {} : Параметры.ДополнительныеСвойства; // Дополнительные произвольные свойства
	ЭтаФорма.ТолькоПросмотрЗначение = (Параметры.ТолькоПросмотр === Неопределено) ? Ложь : Параметры.ТолькоПросмотр; // Только просмотр формы
	ЭтаФорма.Инициализировать = function()
	{
		// Поместим ссылку на табличное поле в реквизит формы
		ЭтаФорма.КорневойЭлементHTMLТаблицы = НулевойЭлементКоллекции(ЭтаФорма.ЭлементHTMLКонтейнер, "table", Истина);
		
		if(ЭтаФорма.КорневойЭлемент){
			// Назначение полям ввода события изменения реквизита формы
			НазначитьЭлементамФормыСобытия(ЭтаФорма, ЭтаФорма.КорневойЭлемент);
				
			// Создание кнопок, назначение им событий
			ЭтаФорма.Элементы.Кнопки.ДобавитьСтроку = НулевойЭлементКоллекции(ЭтаФорма.КорневойЭлемент, "insertRowBtn");
			ЭтаФорма.Элементы.Кнопки.УдалитьСтроку = НулевойЭлементКоллекции(ЭтаФорма.КорневойЭлемент, "deleteRowBtn");
			ЭтаФорма.Элементы.Кнопки.КопироватьСтроку = НулевойЭлементКоллекции(ЭтаФорма.КорневойЭлемент, "copyRowBtn");
			ЭтаФорма.Элементы.Кнопки.ПереместитьСтрокуВверх = НулевойЭлементКоллекции(ЭтаФорма.КорневойЭлемент, "moveRowUpBtn");
			ЭтаФорма.Элементы.Кнопки.ПереместитьСтрокуВниз = НулевойЭлементКоллекции(ЭтаФорма.КорневойЭлемент, "moveRowDownBtn");

			ЭтаФорма.КорневойЭлемент.onclick = function(Событие){
				var Событие = Событие || window.event;
				ОбработкаСобытияКликаПоСтрокеТаблицы(Событие, ЭтаФорма);
				ГлобальныйКонтекст.УстановитьАктивнуюФорму(ЭтаФорма);
				Событие.stopPropagation();
			};
			var ТолькоЧтение = Ложь;
			if(ЭтаФорма.РодительскаяФорма && ЭтаФорма.РодительскаяФорма.Тип === "ФормаОбъекта"){
				ТолькоЧтение = ЭтаФорма.РодительскаяФорма.ТолькоПросмотр();
			}
			if(ЭтаФорма.Элементы.Кнопки.ДобавитьСтроку){
				if(ТолькоЧтение){
					ЭтаФорма.Элементы.Кнопки.ДобавитьСтроку.disabled = Истина;
				}else{
					ЭтаФорма.Элементы.Кнопки.ДобавитьСтроку.onclick = function(){
						ЭтаФорма.ДобавитьСтроку();
					};
				}
			}
			if(ЭтаФорма.Элементы.Кнопки.КопироватьСтроку){
				if(ТолькоЧтение){
					ЭтаФорма.Элементы.Кнопки.КопироватьСтроку.disabled = Истина;
				}else{
					ЭтаФорма.Элементы.Кнопки.КопироватьСтроку.onclick = function(){
						ЭтаФорма.КопироватьСтроку();
					};
				}
			}
			if(ЭтаФорма.Элементы.Кнопки.УдалитьСтроку){
				if(ТолькоЧтение){
					ЭтаФорма.Элементы.Кнопки.УдалитьСтроку.disabled = Истина;
				}else{
					ЭтаФорма.Элементы.Кнопки.УдалитьСтроку.onclick = function(){
						ЭтаФорма.УдалитьСтроку();
					};
				}
			}
			if(ЭтаФорма.Элементы.Кнопки.ПереместитьСтрокуВверх){
				if(ТолькоЧтение){
					ЭтаФорма.Элементы.Кнопки.ПереместитьСтрокуВверх.disabled = Истина;
				}else{
					ЭтаФорма.Элементы.Кнопки.ПереместитьСтрокуВверх.onclick = function(){
						ЭтаФорма.ПереместитьСтрокуВверх();
					};
				}
			}
			if(ЭтаФорма.Элементы.Кнопки.ПереместитьСтрокуВниз){
				if(ТолькоЧтение){
					ЭтаФорма.Элементы.Кнопки.ПереместитьСтрокуВниз.disabled = Истина;
				}else{
					ЭтаФорма.Элементы.Кнопки.ПереместитьСтрокуВниз.onclick = function(){
						ЭтаФорма.ПереместитьСтрокуВниз();
					};
				}
			}
		}
		ЭтаФорма.ОткрытьФорму();
	}
}

// Открытие формы
ТабличнаяЧасть.prototype.ОткрытьФорму = function(){
	var ЭтаФорма = this;
	if(ЭтаФорма.КорневойЭлемент){
		ЭтаФорма.КорневойЭлемент.style.display = 'block';
	}
}

// Закрытие формы
ТабличнаяЧасть.prototype.ЗакрытьФорму = function(){
	var ЭтаФорма = this;
	ЭтаФорма.ПриЗакрытии();	
	ЗакрытьЗависимыеФормы(ЭтаФорма);
	ГлобальныйКонтекст.ПриЗакрытииФормы(ЭтаФорма);
	if(this.РодительскаяФорма){
		// Удалим текущую форму из массива подчиненных формы-родителя
		this.РодительскаяФорма.ПодчиненныеФормы.splice(this.РодительскаяФорма.ПодчиненныеФормы.indexOf(this), 1);
	}
	if(ЭтаФорма.КорневойЭлемент){
		ЭтаФорма.КорневойЭлемент.parentNode.removeChild(ЭтаФорма.КорневойЭлемент);
	}
	if(ЭтаФорма.Элементы.Кнопки.ДобавитьСтроку){
		ЭтаФорма.Элементы.Кнопки.ДобавитьСтроку.onclick = Неопределено;
	}
	if(ЭтаФорма.Элементы.Кнопки.КопироватьСтроку){
		ЭтаФорма.Элементы.Кнопки.КопироватьСтроку.onclick = Неопределено;
	}
	if(ЭтаФорма.Элементы.Кнопки.УдалитьСтроку){
		ЭтаФорма.Элементы.Кнопки.УдалитьСтроку.onclick = Неопределено;
	}
	if(ЭтаФорма.Элементы.Кнопки.ПереместитьСтрокуВверх){
		ЭтаФорма.Элементы.Кнопки.ПереместитьСтрокуВверх.onclick = Неопределено;
	}
	if(ЭтаФорма.Элементы.Кнопки.ПереместитьСтрокуВниз){
		ЭтаФорма.Элементы.Кнопки.ПереместитьСтрокуВниз.onclick = Неопределено;
	}
	if(ЭтаФорма.КорневойЭлемент){
		ЭтаФорма.КорневойЭлемент.ondblclick = Неопределено;
		ЭтаФорма.КорневойЭлемент.onclick = Неопределено;
	}
	ИдентификаторФормы = ЭтаФорма.Идентификатор;
	ЭтаФорма = Неопределено;
	delete ГлобальныйКонтекст.Формы[ИдентификаторФормы];
}

// Загрузка данных в список
ТабличнаяЧасть.prototype.Загрузить = function(Параметры, ПараметрыОтображения){
	var ЭтаФорма = this;
	if(Параметры === Неопределено){
		Параметры = {};
	}
	if(ПараметрыОтображения === Неопределено){
		ПараметрыОтображения = {};
	}
	
	АтрибутыЭлементаHTMLВПараметрыURL(Параметры, ЭтаФорма.ТекущаяСтрока, "activerow_");
	Параметры = (Параметры === Неопределено) ? {} : Параметры;
	ПеременнуюВКлючСтруктуры(Параметры, "Колонки", ЭтаФорма.Колонки);
	ПеременнуюВКлючСтруктуры(Параметры, "objectRef", ЗначениеСсылки(ЭтаФорма.ОбъектСсылка));
	ПеременнуюВКлючСтруктуры(Параметры, "targetelem_listformtemplate", ЭтаФорма.ШаблонHTMLТаблицы);
	ПеременнуюВКлючСтруктуры(Параметры, "targetelem_maintable", ЭтаФорма.ОсновнаяТаблица);
	ПеременнуюВКлючСтруктуры(Параметры, "customquery", ЭтаФорма.ПроизвольныйЗапрос);

	/*
	if(o.Отбор != ""){
		// Разберем связи параметров выбора, передадим их в качестве дополнительных параметров в 1С
		var МассивДанных = o.Отбор.split(",");
		for (var Ключ in МассивДанных) {
			var Значение = МассивДанных[Ключ].split(":")[1].trim();
			АтрибутыЭлементаHTMLВПараметрыURL(Параметры, ЭлементHTMLДокумента(Значение), Значение+ "_");
		}
	}
	*/
	if(ЭтаФорма.Отбор && Object.keys(ЭтаФорма.Отбор).length > 0){
		ПеременнуюВКлючСтруктуры(Параметры, 'filter', JSON.stringify(ЭтаФорма.Отбор)); // !!!!! Проверить, точно ли переменная называется filter
	}
	
	// После загрузки содержимого формы элемента, соответствующего активной строке, не будет. Обнуляем активную строку.
	ЭтаФорма.ТекущаяСтрока = Неопределено;

	// Выполнение запроса
	if(ГлобальныйКонтекст.ИспользуетсяВИнтрасети){
		var link = ГлобальныйКонтекст.Коннектор1С.ПутьКБазе1С + '/v-can.site/execute';
		ПеременнуюВКлючСтруктуры(Параметры, "exec", КодироватьКомпонентыURI('КэнСайтСервер.СекцияФормыТабличнаяЧасть(ПараметрыЗапроса)'));		
	}else{
		var link = 'ajax/tabularsection.php';
	}
	// Флаг асинхронной загрузки
	var АсинхронныйВызов = Истина; // По умолчанию делается асинхронный вызов
	if(Параметры.hasOwnProperty("АсинхронныйВызов")){
		АсинхронныйВызов = Параметры.АсинхронныйВызов;
	}
	// Добавление параметров запроса в данные формы
	var ДанныеHTMLФормы = new FormData();
	ПараметрыURLВДанныеHTMLФормы(ДанныеHTMLФормы, Параметры);
	var ЗапросHttp = НовыйЗапросHttp(); 
	if(ЗапросHttp){
		ЗапросHttp.open('post', link, АсинхронныйВызов); 
		ЗапросHttp.withCredentials = Истина;
		ЗапросHttp.onreadystatechange = function (){
			if(ЗапросHttp.readyState === 4){
				var ТелоОтветаHttp = ЗапросHttp.responseText;
				ТелоОтветаHttp = ТелоОтветаHttp.trim();
				if(ГлобальныйКонтекст.ИспользуетсяВИнтрасети){
					// !!!!! Добавить проверки на корректный ответ, сделать в виде отдельной функции, так как вызываться  будет из нескольких мест
					ТелоОтветаHttp = ТелоОтветаHttp.replace('<!--v-can.Status: OK-->', '');
					ТелоОтветаHttp = ТелоОтветаHttp.trim();					
				}
				ЭтаФорма.ПриЗагрузке(ТелоОтветаHttp);
			}
        } 
		ЗапросHttp.send(ДанныеHTMLФормы);
	}else{  
		{return null;}
	} 
}

// Событие загрузки данных формы
ТабличнаяЧасть.prototype.ПриЗагрузке = function(ОтветСервераJSON){
	var ЭтаФорма = this;
	// Обработка полученного ответа
	try{
		var МассивДанных = JSON.parse(ОтветСервераJSON);
		var ТелоОтветаHttp = МассивДанных.ТекстФормы;
		var Строки = МассивДанных.Строки;
		ЭтаФорма.Строки = JSON.parse(Строки);
	}catch(err){
		var ТелоОтветаHttp = ОтветСервераJSON;
		ЭтаФорма.Строки = {};
	}
	// Поместим ссылку на данные формы в форму-владельца
	if(ЭтаФорма.РодительскаяФорма){
		ЭтаФорма.РодительскаяФорма.Объект[ЭтаФорма.ИмяРеквизита] = ЭтаФорма.Строки;
	}
	
	// Заполнение табличного поля
	ЭтаФорма.ЭлементHTMLКонтейнер.innerHTML = ТелоОтветаHttp;
	// Поместим ссылку на табличное поле в реквизит формы
	ЭтаФорма.КорневойЭлементHTMLТаблицы = НулевойЭлементКоллекции(ЭтаФорма.ЭлементHTMLКонтейнер, "table", Истина);	
	// Делаем текущую форму активной
	//ГлобальныйКонтекст.УстановитьАктивнуюФорму(ЭтаФорма); 
	// Вызов события "После загрузки формы"
	ЭтаФорма.ПослеЗагрузки();
}

// Событие изменения реквизита формы
ТабличнаяЧасть.prototype.ПриИзменении = function(СобытиеИлиЭлемент){
	var ЭтаФорма = this;
	ФормаСписка_ПриИзменении(ЭтаФорма, СобытиеИлиЭлемент);
}

// Событие очистки реквизита формы
ТабличнаяЧасть.prototype.ОчиститьПолеВвода = function(Элемент){
	var ЭтаФорма = this;
	ОчиститьПолеВвода(Элемент);
	ЭтаФорма.ПриИзменении(Элемент);
}

// Событие набора текста в реквизите
ТабличнаяЧасть.prototype.ИзменениеТекстаРедактирования = function(Событие){
	var ЭтаФорма = this;
	ИзменениеТекстаРедактирования(ЭтаФорма, Событие);
}

// Для элемента формы находит соответствующее ему значение в данных формы и возвращает его
ТабличнаяЧасть.prototype.ЗначениеДанныхФормыЭлементаHTML = function(Элемент){
	var o = this;
	var ИмяРеквизита = АтрибутЭлементаHTML(Элемент, "formdataname");
	if(ИмяРеквизита){
		// Определяем строку, в которой находится элемент
		var СтрокаЭлементHTML = Элемент.parentElement;
		while(Истина){
			if(СтрокаЭлементHTML.tagName.toLowerCase() === "tr"){
				break;
			}else{
				СтрокаЭлементHTML = СтрокаЭлементHTML.parentElement;
			}
		}
		if(СтрокаЭлементHTML){
			// Получаем данные строки
			var ИндексСтроки = СтрокаЭлементHTML.rowIndex;
			var ДанныеСтроки = o.Строки[ИндексСтроки - 1]; // -1, так как первая строка - это заголовок
			if(ДанныеСтроки.hasOwnProperty(ИмяРеквизита)){
				return ДанныеСтроки[ИмяРеквизита];
			}
		}
	}
	return null;
}

// Изменение значения реквизита и обновление отображения данных строки табличной части
// Сначала устанавливается значение элемента html, а потом - соответствующих ему данных формы
ТабличнаяЧасть.prototype.УстановитьЗначениеДанныхФормы = function(ЭлементИлиИндекс, ИмяРеквизита, ЗначениеРеквизита, НеИнициироватьСобытиеПриИзменении){
	var ЭтаФорма = this;
	УстановитьЗначениеДанныхТаблицы(ЭтаФорма, ЭлементИлиИндекс, ИмяРеквизита, ЗначениеРеквизита, НеИнициироватьСобытиеПриИзменении);
}

// Изменение значения реквизита и обновление отображения данных строки табличной части
// Сначала устанавливается значение данных формы, потом оно копируется в значение соответствующего элемента html
ТабличнаяЧасть.prototype.УстановитьЗначениеРеквизита = function(ИмяРеквизита, ЗначениеРеквизита, ДанныеФормыИлиИндекс, НеИнициироватьСобытиеПриИзменении){
	var ЭтаФорма = this;
	УстановитьЗначениеРеквизитаТаблицы(ЭтаФорма, ИмяРеквизита, ЗначениеРеквизита, ДанныеФормыИлиИндекс, НеИнициироватьСобытиеПриИзменении);
}

// Для элемента формы обновляет значение из данных формы
ТабличнаяЧасть.prototype.УстановитьЗначениеЭлементаHTMLИзДанныхФормы = function(Элемент){
	var ЭтаФорма = this;
	var ИмяРеквизита = АтрибутЭлементаHTML(Элемент, "formdataname");
	if(ИмяРеквизита){
		// Определяем строку, в которой находится элемент
		var СтрокаЭлементHTML = Элемент.parentElement;
		while(Истина){
			if(СтрокаЭлементHTML.tagName.toLowerCase() === "tr"){
				break;
			}else{
				СтрокаЭлементHTML = СтрокаЭлементHTML.parentElement;
			}
		}
		if(СтрокаЭлементHTML){
			// Получаем данные строки
			var ИндексСтроки = СтрокаЭлементHTML.rowIndex - 1; // -1, так как первая строка - это заголовок
			var ДанныеСтроки = ЭтаФорма.Строки[ИндексСтроки];
			if(ДанныеСтроки.hasOwnProperty(ИмяРеквизита)){
				ЭтаФорма.УстановитьЗначениеЭлементаHTML(ИмяРеквизита, ДанныеСтроки[ИмяРеквизита], ИндексСтроки);
			}
		}
	}
}

// Обновление отображения данных строки табличной части
ТабличнаяЧасть.prototype.УстановитьЗначениеЭлементаHTML = function(ИмяРеквизита, ЗначениеРеквизита, ЭлементИлиИндекс){
	var ЭтаФорма = this;
	УстановитьЗначениеЭлементаHTMLТаблицы(ЭтаФорма, ИмяРеквизита, ЗначениеРеквизита, ЭлементИлиИндекс);
}

// Возврат данных текущей строки
ТабличнаяЧасть.prototype.ТекущиеДанные = function(){
	var ЭтаФорма = this;
	if(ЭтаФорма.ТекущаяСтрока){
		var ИндексСтроки = ЭтаФорма.ТекущаяСтрока.rowIndex;
		ИндексСтроки = ИндексСтроки - 1;
		var ДанныеСтроки = ЭтаФорма.Строки[ИндексСтроки];
		if(ДанныеСтроки){
			return ДанныеСтроки;
		}
	}
	return Неопределено;
}

// Возврат индекса текущей строки
ТабличнаяЧасть.prototype.ИндексТекущейСтроки = function(){
	var ЭтаФорма = this;
	if(ЭтаФорма.ТекущаяСтрока){
		var ИндексСтроки = ЭтаФорма.ТекущаяСтрока.rowIndex;
		return ИндексСтроки - 1;
	}
	return Неопределено;
}

// Установка активной строки табличной части
ТабличнаяЧасть.prototype.УстановитьТекущуюСтроку = function(НоваяТекущаяСтрока, ПредыдущаяТекущаяСтрока, Элемент){
	var ЭтаФорма = this;
	var ИмяТекущейКолонки;
	if(ПредыдущаяТекущаяСтрока){
		if(document.activeElement && ПредыдущаяТекущаяСтрока.contains(document.activeElement)){
			if(АтрибутЭлементаHTML(document.activeElement, "formdataname")){
				ИмяТекущейКолонки = АтрибутЭлементаHTML(document.activeElement, "formdataname");
			}
		}
	}
	if(typeof НоваяТекущаяСтрока === "number"){
		НоваяТекущаяСтрока = ЭтаФорма.ПолучитьСтрокуПоИндексу(НоваяТекущаяСтрока);
	}
	if(ЭтаФорма.ТекущаяСтрока === НоваяТекущаяСтрока) return; // Активная строка не изменилась
	СменитьАктивнуюСтрокуТаблицыФормы(ЭтаФорма, НоваяТекущаяСтрока);
	ЭтаФорма.ТекущаяСтрока = НоваяТекущаяСтрока;
	if(ЭтаФорма.ТекущаяСтрока){
		if(document.activeElement && ЭтаФорма.ТекущаяСтрока.contains(document.activeElement)){
			// Активный элемент формы входит в состав текущей строки
		}else{
			// Если активный элемент формы не входит в состав текущей строки,
			// то устанавливаем фокус на первый видимый input строки или input в той же колонке,
			// в которой он был в предыдущей строке
			if(ИмяТекущейКолонки){
				var ПоляВвода = ЭтаФорма.ТекущаяСтрока.querySelectorAll('input[formdataname=' + ИмяТекущейКолонки + ']');
			}else{
				var ПоляВвода = ЭтаФорма.ТекущаяСтрока.querySelectorAll('input[formdataname]');
			}
			for (var Счетчик = 0, КоличествоПолей = ПоляВвода.length; Счетчик < КоличествоПолей; Счетчик++) {
				if(ПоляВвода[Счетчик].disabled != Истина && ЭлементHTMLВидимость(ПоляВвода[Счетчик])){
					ПоляВвода[Счетчик].focus();
					break;
				}
			}
		}
		if(ЭлементHTMLВВидимойОбластиОкна(ЭтаФорма.ТекущаяСтрока) === Ложь){
			ПрокруткаДоПозицииЭлемента(ЭтаФорма.ТекущаяСтрока);
		}		
	}
	// Событие при активации строки
	ЭтаФорма.ПриАктивизацииСтроки();
}

// Получение строки табличной части по индексу
ТабличнаяЧасть.prototype.ПолучитьСтрокуПоИндексу = function(ИндексСтроки){
	var ЭтаФорма = this;
	if(ЭтаФорма.КорневойЭлементHTMLТаблицы && ЭтаФорма.КорневойЭлементHTMLТаблицы.nodeName.toLowerCase() === "table" && ЭтаФорма.КорневойЭлементHTMLТаблицы.tBodies[0]){
		return ЭтаФорма.КорневойЭлементHTMLТаблицы.tBodies[0].rows[ИндексСтроки];
	}
}

// Возвращет количество строк табличной части
ТабличнаяЧасть.prototype.КоличествоСтрок = function(){
	var ЭтаФорма = this;
	if(ЭтаФорма.КорневойЭлементHTMLТаблицы && ЭтаФорма.КорневойЭлементHTMLТаблицы.nodeName.toLowerCase() === "table" && ЭтаФорма.КорневойЭлементHTMLТаблицы.tBodies[0]){
		return ЭтаФорма.КорневойЭлементHTMLТаблицы.tBodies[0].rows.length;
	}	
}

// Перевод курсора с активной строки на строку выше
ТабличнаяЧасть.prototype.ТекущаяСтрокаВверх = function(){
	var ЭтаФорма = this;
	if(ЭтаФорма.ТекущаяСтрока){
		ЭтаФорма.УстановитьТекущуюСтроку(Math.max(ЭтаФорма.ИндексТекущейСтроки() - 1, 0), ЭтаФорма.ТекущаяСтрока);
	}else{
		// Нет активной строки, устанавливаем активной первую
		ЭтаФорма.УстановитьТекущуюСтроку(0);
	}
}

// Перевод курсора с активной строки на строку ниже
ТабличнаяЧасть.prototype.ТекущаяСтрокаВниз = function(){
	var ЭтаФорма = this;
	if(ЭтаФорма.ТекущаяСтрока){
		ЭтаФорма.УстановитьТекущуюСтроку(Math.min(ЭтаФорма.ИндексТекущейСтроки() + 1, ЭтаФорма.КоличествоСтрок() - 1), ЭтаФорма.ТекущаяСтрока);
	}else{
		// Нет активной строки, устанавливаем активной первую
		ЭтаФорма.УстановитьТекущуюСтроку(0);
	}
}

// Переносит активную строку выше
ТабличнаяЧасть.prototype.ПереместитьСтрокуВверх = function(){
	var ЭтаФорма = this;
	if(ЭтаФорма.ТекущаяСтрока){
		var ИндексТекущейСтроки = ЭтаФорма.ИндексТекущейСтроки();
		if(ИндексТекущейСтроки > 0){
			var ДанныеСтрокиВрем = ЭтаФорма.Строки[ИндексТекущейСтроки];
			ЭтаФорма.ТекущаяСтрока.parentNode.insertBefore(ЭтаФорма.ТекущаяСтрока, ЭтаФорма.ТекущаяСтрока.previousElementSibling);
			ЭтаФорма.Строки[ИндексТекущейСтроки] = ЭтаФорма.Строки[ИндексТекущейСтроки - 1];
			ЭтаФорма.Строки[ИндексТекущейСтроки - 1] = ДанныеСтрокиВрем;
		}
	}
}

// Переносит активную строку ниже
ТабличнаяЧасть.prototype.ПереместитьСтрокуВниз = function(){
	var ЭтаФорма = this;
	if(ЭтаФорма.ТекущаяСтрока){
		var ИндексТекущейСтроки = ЭтаФорма.ИндексТекущейСтроки();
		if(ИндексТекущейСтроки < (ЭтаФорма.КоличествоСтрок() - 1)){
			var ДанныеСтрокиВрем = ЭтаФорма.Строки[ИндексТекущейСтроки];
			ЭтаФорма.ТекущаяСтрока.parentNode.insertBefore(ЭтаФорма.ТекущаяСтрока.nextElementSibling, ЭтаФорма.ТекущаяСтрока);
			ЭтаФорма.Строки[ИндексТекущейСтроки] = ЭтаФорма.Строки[ИндексТекущейСтроки + 1];
			ЭтаФорма.Строки[ИндексТекущейСтроки + 1] = ДанныеСтрокиВрем;
		}
	}
}

// Обработка добавления строки
ТабличнаяЧасть.prototype.ДобавитьСтроку = function(){
	var ЭтаФорма = this;
	var ПараметрыДобавления = {};
	ЭтаФорма.ПриНачалеДобавления(ПараметрыДобавления);
	if(ПараметрыДобавления.Отказ){return;}	// Отмена добавления строки
	var ТаблицаФормы2 = ЭтаФорма.КорневойЭлементHTMLТаблицы.tBodies[1];
	if(ТаблицаФормы2){
		ШаблонСтроки = ТаблицаФормы2.rows[0];
		if(ШаблонСтроки){
			// Добавление элемента-строки в табличную часть
			var НоваяСтрока = ШаблонСтроки.cloneNode(Истина);
			ЭтаФорма.КорневойЭлементHTMLТаблицы.tBodies[0].appendChild(НоваяСтрока);
			// Добавление строки в данные формы
			// Установка значений новой строки в данных формы
			var ДанныеСтроки = {};
			var ЭлементыСтроки = НоваяСтрока.querySelectorAll('[formdataname]');
			for (var Счетчик = 0, Количество = ЭлементыСтроки.length; Счетчик < Количество; Счетчик++) {
				var ИмяРеквизита = АтрибутЭлементаHTML(ЭлементыСтроки[Счетчик], 'formdataname');
				if(ИмяРеквизита){
					ДанныеСтроки[ИмяРеквизита] = ЗначениеЭлементаДляДанныхФормы(ЭлементыСтроки[Счетчик]);
					if(АтрибутЭлементаHTML(ЭлементыСтроки[Счетчик], "masterfilterid")){
						// Сброс идентификаторов связанных элементов
						ЭлементыСтроки[Счетчик].setAttribute("masterfilterid", "");
					}
				}
			}
			// Назначение элементу обработчика события "При изменении"
			НазначитьЭлементамФормыСобытия(ЭтаФорма, НоваяСтрока, Истина);			
			// Новую строку делаем активной
			ЭтаФорма.УстановитьТекущуюСтроку(НоваяСтрока);
			// Установка данных строки
			ЭтаФорма.Строки.push(ДанныеСтроки);
			// Заполнение строки данными отбора ТЧ
			for(ИмяРеквизита in ЭтаФорма.ОтборСтрок){
				ЭтаФорма.УстановитьЗначениеДанныхФормы(НоваяСтрока, ИмяРеквизита, ЭтаФорма.ОтборСтрок[ИмяРеквизита]);
			}			
			if(ЭтаФорма.РодительскаяФорма && (ЭтаФорма.РодительскаяФорма.Тип === "ФормаОбъекта" || ЭтаФорма.РодительскаяФорма.Тип === "ПроизвольнаяФорма")){
				// Если ТЧ размещена на форме объекта, то устанавливаем для нее флаг модифицированности
				ЭтаФорма.РодительскаяФорма.УстановитьМодифицированность(Истина);
			}
			// Вызов события "При добавлении строки"
			ЭтаФорма.ПриДобавленииСтроки(НоваяСтрока, ДанныеСтроки);
			// Новая строка становится текущей
			ЭтаФорма.УстановитьТекущуюСтроку(НоваяСтрока);
			// Возврат добавленной строки
			return НоваяСтрока;
		}
	}
}

// Обработка копирования строки
ТабличнаяЧасть.prototype.КопироватьСтроку = function(){
	var ЭтаФорма = this;
	var ПараметрыДобавления = {};
	ЭтаФорма.ПриНачалеДобавления(ПараметрыДобавления);
	if(ПараметрыДобавления.Отказ){return;}	// Отмена добавления строки
	if(ЭтаФорма.ТекущаяСтрока){
		ШаблонСтроки = ЭтаФорма.ТекущаяСтрока;
		if(ШаблонСтроки){
			// Добавление элемента-строки в табличную часть
			var НоваяСтрока = ШаблонСтроки.cloneNode(Истина);
			ЭтаФорма.КорневойЭлементHTMLТаблицы.tBodies[0].appendChild(НоваяСтрока);
			// Добавление строки в данные формы
			// Установка значений новой строки в данных формы
			var ДанныеСтроки = {};
			var ТекущиеДанные = ЭтаФорма.ТекущиеДанные();
			for(ИмяРеквизита in ТекущиеДанные){
				ДанныеСтроки[ИмяРеквизита] = ТекущиеДанные[ИмяРеквизита];
			}			
			// Назначение элементу обработчика события "При изменении"
			НазначитьЭлементамФормыСобытия(ЭтаФорма, НоваяСтрока, Истина);			
			// Новую строку делаем активной
			ЭтаФорма.УстановитьТекущуюСтроку(НоваяСтрока);
			// Установка данных строки
			ЭтаФорма.Строки.push(ДанныеСтроки);
			if(ЭтаФорма.РодительскаяФорма.Тип === "ФормаОбъекта" || ЭтаФорма.РодительскаяФорма.Тип === "ПроизвольнаяФорма"){
				// Если ТЧ размещена на форме объекта, то устанавливаем для нее флаг модифицированности
				ЭтаФорма.РодительскаяФорма.УстановитьМодифицированность(Истина);
			}
			// Вызов события "При добавлении строки"
			ЭтаФорма.ПриДобавленииСтроки(НоваяСтрока, ДанныеСтроки, Истина);
			// Новая строка становится текущей
			ЭтаФорма.УстановитьТекущуюСтроку(НоваяСтрока);
			// Возврат добавленной строки
			return НоваяСтрока;
		}
	}
}

// Обработка удаления строки
// Возможные типы rowParam: html-элемент "tr"
//							число - индекс удаляемой строки
//							undefined - удаляется текущая строка
ТабличнаяЧасть.prototype.УдалитьСтроку = function(СтрокаПараметр){
	var ЭтаФорма = this;
	var СтрокаЭлементHTML = null;
	if(СтрокаПараметр === Неопределено){
		СтрокаЭлементHTML = ЭтаФорма.ТекущаяСтрока;
	}else if(typeof СтрокаПараметр === "number"){
		СтрокаЭлементHTML = ЭтаФорма.ПолучитьСтрокуПоИндексу(СтрокаПараметр);
	}else if(СтрокаПараметр.toString() === "[object HTMLTableRowElement]"){
		СтрокаЭлементHTML = СтрокаПараметр;
	}
	if(СтрокаЭлементHTML){
		// Событие "Перед удалением строки"
		var ПараметрыУдаления = {};
		ЭтаФорма.ПередУдалением(СтрокаЭлементHTML, ПараметрыУдаления);
		if(ПараметрыУдаления.Отказ){return;} // Отмена удаления строки
		if(ЭтаФорма.ТекущаяСтрока && ЭтаФорма.ТекущаяСтрока === СтрокаЭлементHTML){
			// Установка новой активной строки
			if(ЭтаФорма.ТекущаяСтрока.nextElementSibling){
				ЭтаФорма.УстановитьТекущуюСтроку(ЭтаФорма.ТекущаяСтрока.nextElementSibling);
			}else if(ЭтаФорма.ТекущаяСтрока.previousElementSibling){
					ЭтаФорма.УстановитьТекущуюСтроку(ЭтаФорма.ТекущаяСтрока.previousElementSibling);			
			}else{
				ЭтаФорма.ТекущаяСтрока = Неопределено;
			}
		}
		// Удаление строки и ее данных
		ЭтаФорма.Строки.splice(СтрокаЭлементHTML.rowIndex - 1, 1);
		СтрокаЭлементHTML.parentElement.removeChild(СтрокаЭлементHTML);
		if(ЭтаФорма.РодительскаяФорма && ЭтаФорма.РодительскаяФорма.Тип === 'ФормаОбъекта'){
			// Если ТЧ размещена на форме объекта, то устанавливаем для нее флаг модифицированности
			ЭтаФорма.РодительскаяФорма.УстановитьМодифицированность(Истина);
		}
		// Событие "После удаления строки"
		ЭтаФорма.ПриУдаленииСтроки();
	}
}

// Обработка очистки ТЧ
ТабличнаяЧасть.prototype.Очистить = function(){
	var ЭтаФорма = this;
	if(ЭтаФорма.КорневойЭлементHTMLТаблицы && ЭтаФорма.КорневойЭлементHTMLТаблицы.nodeName.toLowerCase() === 'table' && ЭтаФорма.КорневойЭлементHTMLТаблицы.tBodies[0]){
		var tBody = ЭтаФорма.КорневойЭлементHTMLТаблицы.tBodies[0];
		while(tBody.rows.length > 0){
			tBody.deleteRow(0);
			ЭтаФорма.Строки.splice(0, 1); // Удаляем элементы массива строк по одному, чтобы удаление также произошло и в элементах ТЧ родительской формы объекта.
		}
	}
	ЭтаФорма.ПриОчистке();
}

// Установка отбора
ТабличнаяЧасть.prototype.УстановитьОтборСтрок = function(ОтборСтруктура){
	var o = this;
	if(ОтборСтруктура){
		// Обновление отбора строк ТЧ
		o.ОтборСтрок = ОтборСтруктура;
	}
	// Скрытие/отображение строк таблицы
	for (var i = 0, len = o.Строки.length; i < len; i++) {
		if(o.Строки[i]){
			// Определим флаг отображения строки
			var rowDisplay = "table-row";
			for (fName in o.ОтборСтрок) {
				if(ЭтоСсылка(o.Строки[i][fName]) && ЭтоСсылка(o.ОтборСтрок[fName])){
					// Это ссылка
					if(o.Строки[i][fName].Ссылка != o.ОтборСтрок[fName].Ссылка){
						var rowDisplay = "none";				
						break;
					}
				}else{
					if(o.Строки[i][fName] != o.ОтборСтрок[fName]){
						var rowDisplay = "none";				
						break;
					}
				}
			}
			// Установка отображения строки
			var tsRow = o.ПолучитьСтрокуПоИндексу(i);
			if(tsRow){
				tsRow.style.display = rowDisplay;
			}
		}
	}	
}

ТабличнаяЧасть.prototype.Итог = function(ИмяКолонки){
	var ЭтаФорма = this;
	var ИтогПоКолонке = 0;
	for (var Счетчик = 0, Количество = ЭтаФорма.КоличествоСтрок(); Счетчик < Количество; Счетчик++) {
		ИтогПоКолонке = ИтогПоКолонке + СтрокуВЧисло(ЭтаФорма.Строки[Счетчик][ИмяКолонки]);
	}
	return ИтогПоКолонке;
}

// Если в параметре НовоеЗначение содержится Истина или Ложь,
// то свойство формы "ТолькоПросмотр" устанавливается в это значение и затем возвращается.
// Иначе просто возвращается текущее значение свойства "ТолькоПросмотр"
ТабличнаяЧасть.prototype.ТолькоПросмотр = function(НовоеЗначение){
	var ЭтаФорма = this;
	if(НовоеЗначение != Неопределено && ЭтаФорма.ТолькоПросмотрЗначение != НовоеЗначение){
		ЭтаФорма.ТолькоПросмотрЗначение = НовоеЗначение;
		for(ИдентификаторКнопки in ЭтаФорма.Элементы.Кнопки){
			if(ЭтаФорма.Элементы.Кнопки[ИдентификаторКнопки]){
				ЭтаФорма.Элементы.Кнопки[ИдентификаторКнопки].disabled = ЭтаФорма.ТолькоПросмотрЗначение;
			}
		}
		var ПоляВвода = ЭтаФорма.КорневойЭлементHTMLТаблицы.querySelectorAll('input[formdataname]');
		for (var Счетчик = 0, КоличествоПолей = ПоляВвода.length; Счетчик < КоличествоПолей; Счетчик++) {
			ПоляВвода[Счетчик].disabled = ЭтаФорма.ТолькоПросмотрЗначение;
		}		
	}
	return ЭтаФорма.ТолькоПросмотрЗначение;
}

// Событие окончания редактирования элемента
ТабличнаяЧасть.prototype.ПриИзмененииРеквизита = function(ЭлементРеквизита, ИмяРеквизита, ДанныеСтроки){
}

// Событие окончания редактирования строки
ТабличнаяЧасть.prototype.ПриИзмененииСтроки = function(СтрокаЭлементHTML){
}

// Событие активизации строки
ТабличнаяЧасть.prototype.ПриАктивизацииСтроки = function(){
}

// Событие при нажатии на строку
ТабличнаяЧасть.prototype.ПриНажатии = function(ЭлементСтрока, ИсточникСобытия){
}

// Событие перед добавлением строки
ТабличнаяЧасть.prototype.ПриНачалеДобавления = function(Отказ){
}

// Событие добавления строки
ТабличнаяЧасть.prototype.ПриДобавленииСтроки = function(СтрокаЭлементHTML, ТекущиеДанные, Копирование){
}

// Событие перед удалением строки
ТабличнаяЧасть.prototype.ПередУдалением = function(СтрокаЭлементHTML, Отказ){
}

// Событие после удаления строки
ТабличнаяЧасть.prototype.ПриУдаленииСтроки = function(){
}

// Событие очистки ТЧ
ТабличнаяЧасть.prototype.ПриОчистке = function(){
}

// Событие после загрузки секции
ТабличнаяЧасть.prototype.ПослеЗагрузки = function(){
}

// Событие закрытия формы
ТабличнаяЧасть.prototype.ПриЗакрытии = function(){
}


//////////////////////////////////////////
// Класс "Форма объекта"                //
//////////////////////////////////////////

function ФормаОбъекта(Параметры){
	var ЭтаФорма = this;
	ЭтаФорма.Тип = "ФормаОбъекта";
	if(Параметры.Идентификатор === Неопределено){
		ЭтаФорма.Идентификатор = СлучайныйИдентификатор();
	}else{
		ЭтаФорма.Идентификатор = Параметры.Идентификатор;
	}
	ГлобальныйКонтекст.Формы[ЭтаФорма.Идентификатор] = ЭтаФорма;
	ЭтаФорма.Владелец = Параметры.Владелец;
	ЭтаФорма.ОбъектСсылка = Параметры.ОбъектСсылка;
	ЭтаФорма.ШаблонФормы = Параметры.ШаблонФормы;
	ЭтаФорма.ИмяФормы = Параметры.ИмяФормы;
	ЭтаФорма.ОсновнаяТаблица = Параметры.ОсновнаяТаблица;	
	ЭтаФорма.ЭлементHTMLКонтейнер = ЭлементHTMLДокумента(Параметры.ЭлементHTMLКонтейнер);
	if(ЭтаФорма.ЭлементHTMLКонтейнер === Неопределено){
		ЭтаФорма.ЭлементHTMLКонтейнер = document.body;
	}
	ЭтаФорма.КорневойЭлемент = Неопределено;			// Корневой html-элемент формы
	ЭтаФорма.ТабличныеЧасти = Параметры.ТабличныеЧасти;	// Табличные части	
	ЭтаФорма.Объект = {};
	ЭтаФорма.ПодчиненныеФормы = new Array();	// Подчиненные формы
	ЭтаФорма.Реквизиты = {};
	ЭтаФорма.Элементы = {};
	ЭтаФорма.ДанныеЭлементов = {};
	ЭтаФорма.Модифицированность = Ложь;			// Флаг модифицированности формы
	ЭтаФорма.ДополнительныеСвойства = (Параметры.ДополнительныеСвойства === Неопределено) ? {} : Параметры.ДополнительныеСвойства; // Дополнительные произвольные свойства
	ЭтаФорма.РежимОткрытияОкна = (Параметры.РежимОткрытияОкна === Неопределено) ? РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс : Параметры.РежимОткрытияОкна;
	ЭтаФорма.ЗакрыватьПриНажатииНаПодложку = (Параметры.ЗакрыватьПриНажатииНаПодложку === Неопределено) ? Истина : Параметры.ЗакрыватьПриНажатииНаПодложку;
	ЭтаФорма.ПриСозданииНаСервере = Параметры.ПриСозданииНаСервере;
	ЭтаФорма.ОбработчикЗаполненияОбъекта = Параметры.ОбработчикЗаполненияОбъекта;
	ЭтаФорма.ОбработчикЗаписиОбъекта = Параметры.ОбработчикЗаписиОбъекта;
	var ДополнительныеПараметры = {};
	ЭтаФорма.Инициализировать = function(ДополнительныеПараметры)
	{
		ЭтаФорма.ОткрытьФорму(ДополнительныеПараметры);
	}
}

// Открытие формы объекта
ФормаОбъекта.prototype.ОткрытьФорму = function(Параметры){
	var ЭтаФорма = this;
	ЭтаФорма.Загрузить(Параметры);
}

// Загрузка данных в форму
ФормаОбъекта.prototype.Загрузить = function(Параметры){
	var ЭтаФорма = this;
	if(ЭтаФорма.РежимОткрытияОкна === РежимОткрытияОкнаФормы.БлокироватьОкноВладельца || ЭтаФорма.РежимОткрытияОкна === РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс){
		if(ЭтаФорма.Владелец && ЭтаФорма.Владелец.КорневойЭлемент && ЭтаФорма.Владелец.КорневойЭлемент.style.zIndex){
			var Порядок = Number(ЭтаФорма.Владелец.КорневойЭлемент.style.zIndex) + 1;
		}else{
			var Порядок = Неопределено;
		}
		ПодложкаМодальногоОкнаПоказать(ЭтаФорма.Идентификатор, Порядок);
	}
	Параметры = (Параметры === Неопределено) ? {} : Параметры;
	ПеременнуюВКлючСтруктуры(Параметры, 'objectRef',					ЗначениеСсылки(ЭтаФорма.ОбъектСсылка));
	ПеременнуюВКлючСтруктуры(Параметры, 'formTemplate',					ЭтаФорма.ШаблонФормы);
	ПеременнуюВКлючСтруктуры(Параметры, 'formName',						ЭтаФорма.ИмяФормы);
	ПеременнуюВКлючСтруктуры(Параметры, 'mainTable',					ЭтаФорма.ОсновнаяТаблица);
	ПеременнуюВКлючСтруктуры(Параметры, 'ПриСозданииНаСервере',			ЭтаФорма.ПриСозданииНаСервере);
	ПеременнуюВКлючСтруктуры(Параметры, 'ОбработчикЗаполненияОбъекта',	ЭтаФорма.ОбработчикЗаполненияОбъекта);
	// Флаг асинхронной загрузки
	var АсинхронныйВызов = Истина; // По умолчанию делается асинхронный вызов
	if(Параметры.hasOwnProperty("АсинхронныйВызов")){
		АсинхронныйВызов = Параметры.АсинхронныйВызов;
	}
	if(ЭтаФорма.ТабличныеЧасти){
		ПеременнуюВКлючСтруктуры(Параметры, "tabularSections", КодироватьКомпонентыURI(ЭтаФорма.ТабличныеЧасти));
	}
	if(ГлобальныйКонтекст.ИспользуетсяВИнтрасети){
		var link = ГлобальныйКонтекст.Коннектор1С.ПутьКБазе1С + '/v-can.site/execute';
		ПеременнуюВКлючСтруктуры(Параметры, "exec", КодироватьКомпонентыURI('КэнСайтСервер.ФормаОбъекта(ПараметрыЗапроса)'));		
	}else{
		var link = 'ajax/objectform.php';
	}
	// Добавление параметров запроса в данные формы
	var ДанныеHTMLФормы = new FormData();
	ПараметрыURLВДанныеHTMLФормы(ДанныеHTMLФормы, Параметры);
	var ЗапросHttp = НовыйЗапросHttp(); 
	if(ЗапросHttp){
		ЗапросHttp.open('post', link, АсинхронныйВызов); 
		ЗапросHttp.withCredentials = Истина;
		ЗапросHttp.onreadystatechange = function (){
			if(ЗапросHttp.readyState === 4){
				var ТелоОтветаHttp = ЗапросHttp.responseText;
				ТелоОтветаHttp = ТелоОтветаHttp.trim();
				if(ГлобальныйКонтекст.ИспользуетсяВИнтрасети){
					// !!!!! Добавить проверки на корректный ответ, сделать в виде отдельной функции, так как вызываться  будет из нескольких мест
					ТелоОтветаHttp = ТелоОтветаHttp.replace('<!--v-can.Status: OK-->', '');
					ТелоОтветаHttp = ТелоОтветаHttp.trim();					
				}
				ЭтаФорма.ПриЗагрузке(ТелоОтветаHttp);
			}
        } 
		ЗапросHttp.send(ДанныеHTMLФормы);
	}else{  
		{return null;}
	} 
}

// Закрытие формы объекта
ФормаОбъекта.prototype.ЗакрытьФорму = function(){
	var ЭтаФорма = this;
	// Закрытие формы
	var ПараметрыПроверки = {};
	ЭтаФорма.ПриЗакрытии(ПараметрыПроверки);
	if(ПараметрыПроверки.Отказ){
		// Действие отменено
		return;
	}
	// Проверка модифицированности формы
	if(ЭтаФорма.Модифицированность){
		if(!confirm("Данные были изменены. Закрыть форму?")){
			// Действие отменено пользователем
			return;
		}
	}
	// Закрытие подчиненных форм
	ЗакрытьЗависимыеФормы(ЭтаФорма);
	while(ЭтаФорма.ПодчиненныеФормы.length > 0){
		ЭтаФорма.ПодчиненныеФормы[0].ЗакрытьФорму();
	}
	ГлобальныйКонтекст.ПриЗакрытииФормы(ЭтаФорма);
	// Удаление html-элементов формы, объекта формы, событий формы.
	// !!!!! Теперь это массив, можно сделать цикл по массиву
	if(ЭтаФорма.КорневойЭлемент){
		// Делаем проверку на наличие корневого элемента, его может не быть, если при загрузке формы произошла ошибка
		ЭтаФорма.КорневойЭлемент.parentNode.removeChild(ЭтаФорма.КорневойЭлемент);
		ЭтаФорма.КорневойЭлемент.ondblclick = Неопределено;
		ЭтаФорма.КорневойЭлемент.onclick = Неопределено;
	}
	if(ЭтаФорма.Элементы){
		if(ЭтаФорма.Элементы.Кнопки){
			if(ЭтаФорма.Элементы.Кнопки.Записать){
				ЭтаФорма.Элементы.Кнопки.Записать.onclick = Неопределено;
			}
			if(ЭтаФорма.Элементы.Кнопки.ЗаписатьИЗакрыть){
				ЭтаФорма.Элементы.Кнопки.ЗаписатьИЗакрыть.onclick = Неопределено;
			}
			if(ЭтаФорма.Элементы.Кнопки.Провести){
				ЭтаФорма.Элементы.Кнопки.Провести.onclick = Неопределено;
			}
			if(ЭтаФорма.Элементы.Кнопки.Закрыть){
				ЭтаФорма.Элементы.Кнопки.Закрыть.onclick = Неопределено;
			}
		}
	}
	ИдентификаторФормы = ЭтаФорма.Идентификатор;
	ЭтаФорма = Неопределено;
	delete ГлобальныйКонтекст.Формы[ИдентификаторФормы];
}

// Обработка события записи
ФормаОбъекта.prototype.ОбработкаЗаписи = function(Параметры){
	var ЭтаФорма = this;
	ЭтаФорма.ПередЗаписью();
	Параметры = (Параметры === Неопределено) ? {} : Параметры;
	if(ЭтаФорма.Элементы.Кнопки.Записать){ЭтаФорма.Элементы.Кнопки.Записать.disabled = Истина}
	if(ЭтаФорма.Элементы.Кнопки.Провести){ЭтаФорма.Элементы.Кнопки.Провести.disabled = Истина}
	if(ЭтаФорма.Элементы.Кнопки.ЗаписатьИЗакрыть){ЭтаФорма.Элементы.Кнопки.ЗаписатьИЗакрыть.disabled = Истина}
	Параметры.ОбработкаЗаписи = Истина;
	Параметры.Объект = КодироватьКомпонентыURI(JSON.stringify(ЭтаФорма.Объект));
	Параметры.АсинхронныйВызов = Ложь;
	if(ЭтаФорма.ОбработчикЗаписиОбъекта){
		Параметры.ОбработчикЗаписиОбъекта = ЭтаФорма.ОбработчикЗаписиОбъекта;
	}
	ЭтаФорма.Загрузить(Параметры);
	// Если владельцем формы объекта является форма списка, то обновим ее и спозиционируемся на записанном элементе
	if(ЭтаФорма.Владелец && ЭтаФорма.Владелец.Тип === 'ФормаСписка'){
		if(ЭтоСсылка(ЭтаФорма.ОбъектСсылка)){
			ЭтаФорма.Владелец.ДополнительныеСвойства.УстановитьТекущуюСтроку = ЭтаФорма.ОбъектСсылка;
		}
		ЭтаФорма.Владелец.Загрузить();
	}
	ЭтаФорма.ПриЗаписи();
	if(Параметры.ЗакрытьПослеЗаписи){
		ЭтаФорма.ЗакрытьФорму();
	}
}

ФормаОбъекта.prototype.КонтекстныйВызовФункции = function(ИмяФункции, ИмяОбработчика, Параметры){
	var ЭтаФорма = this;
	Параметры = (Параметры === Неопределено) ? {} : Параметры;
	if(ЭтаФорма.Элементы.Кнопки.Записать){ЭтаФорма.Элементы.Кнопки.Записать.disabled = Истина}
	if(ЭтаФорма.Элементы.Кнопки.Провести){ЭтаФорма.Элементы.Кнопки.Провести.disabled = Истина}
	if(ЭтаФорма.Элементы.Кнопки.ЗаписатьИЗакрыть){ЭтаФорма.Элементы.Кнопки.ЗаписатьИЗакрыть.disabled = Истина}
	Параметры.КонтекстныйВызовФункции = Истина;
	Параметры.ИмяФункции = ИмяФункции;
	Параметры.ИмяОбработчика = ИмяОбработчика;
	Параметры.Объект = КодироватьКомпонентыURI(JSON.stringify(ЭтаФорма.Объект));
	Параметры.ДанныеЭлементов = КодироватьКомпонентыURI(JSON.stringify(ЭтаФорма.ДанныеЭлементов));
	Параметры.АсинхронныйВызов = Ложь;
	ЭтаФорма.Загрузить(Параметры);
 	//ЭтаФорма.УстановитьМодифицированность(Ложь);
}

// Событие загрузки данных формы
ФормаОбъекта.prototype.ПриЗагрузке = function(ОтветHttpJSON){
	var ЭтаФорма = this;
	// Обработка полученного ответа
	try{
		var СтруктураОтвета = JSON.parse(ОтветHttpJSON);
		var ТелоОтветаHttp = СтруктураОтвета.ТекстФормы;
		var Объект = СтруктураОтвета.Объект;
		ЭтаФорма.Объект = JSON.parse(Объект);
		if(ЭтаФорма.Объект.Ссылка){
			ЭтаФорма.ОбъектСсылка = ЭтаФорма.Объект.Ссылка;
		}
	}catch(err){
		if(СтруктураОтвета && СтруктураОтвета.Статус){
			alert(СтруктураОтвета.Статус);
		}else{
			alert(ОтветHttpJSON);
		}
		if(ЭтаФорма && ЭтаФорма.Элементы && ЭтаФорма.Элементы.Кнопки){
			if(ЭтаФорма.Элементы.Кнопки.Записать){ЭтаФорма.Элементы.Кнопки.Записать.disabled = Ложь}
			if(ЭтаФорма.Элементы.Кнопки.Провести){ЭтаФорма.Элементы.Кнопки.Провести.disabled = Ложь}
			if(ЭтаФорма.Элементы.Кнопки.ЗаписатьИЗакрыть){ЭтаФорма.Элементы.Кнопки.ЗаписатьИЗакрыть.disabled = Ложь}		
		}
		return;
	}
	
	// Проверка корректности загрузки формы
	if(СтруктураОтвета && СтруктураОтвета.Статус){
		if(СтруктураОтвета.Статус === "OK"){
			// Форма загружена корректно. Снимаем флаг модифицированности.
			ЭтаФорма.УстановитьМодифицированность(Ложь);
		}else{
			// Ошибка. Форму не обновляем
			alert(СтруктураОтвета.Статус);
			ПодложкаМодальногоОкнаСкрыть(ЭтаФорма.Идентификатор);
			return;
		}
	}
	
	// Конвертация текста формы в DOM
	// Очистка старого содержимого формы при повторной загрузке
	if(ЭтаФорма.КорневойЭлемент){
		ЭтаФорма.КорневойЭлемент.parentNode.removeChild(ЭтаФорма.КорневойЭлемент);
		ЭтаФорма.КорневойЭлемент = Неопределено;
	}
	// Создание элементов формы
	var ФормаHTML = document.createElement("div");
	ФормаHTML.insertAdjacentHTML("afterBegin", ТелоОтветаHttp.trim());
	ЭтаФорма.КорневойЭлемент = ЭтаФорма.ЭлементHTMLКонтейнер.appendChild(ФормаHTML.childNodes[0]);
	if(ЭтаФорма.КорневойЭлемент.style.position = 'absolute'){
		ЭтаФорма.КорневойЭлемент.style.top = '' + getScrollTop() + 'px';
		// z-index
		if(ЭтаФорма.Владелец && ЭтаФорма.Владелец.КорневойЭлемент && ЭтаФорма.Владелец.КорневойЭлемент.style.zIndex){
			ЭтаФорма.КорневойЭлемент.style.zIndex = Number(ЭтаФорма.Владелец.КорневойЭлемент.style.zIndex) + 1;
			if(ЭтаФорма.РежимОткрытияОкна === РежимОткрытияОкнаФормы.БлокироватьОкноВладельца || ЭтаФорма.РежимОткрытияОкна === РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс){
				// Предыдущий порядок оставляем для подложки
				ЭтаФорма.КорневойЭлемент.style.zIndex = Number(ЭтаФорма.КорневойЭлемент.style.zIndex) + 1;
			}
		}
	}
	delete ФормаHTML;
	
	// Данные элементов
	if(Object.keys(ЭтаФорма.ДанныеЭлементов).length === 0){
		// Данные элементов не инициализированы, создадим их из элементов формы с атрибутом formdataname
		var МассивЭлементов = ЭтаФорма.КорневойЭлемент.querySelectorAll('[formdataname]');
		for (var Счетчик = 0, Количество = МассивЭлементов.length; Счетчик < Количество; Счетчик++) {
			var ОболочкаЭлемента = ОболочкаЭлементаHTML(МассивЭлементов[Счетчик]);
			if(ОболочкаЭлемента && !ЭлементHTMLПринадлежитПодчиненнойФорме(ЭтаФорма, ОболочкаЭлемента)){
				ЭтаФорма.ДанныеЭлементов[АтрибутЭлементаHTML(МассивЭлементов[Счетчик], "formdataname")] = СвойстваЭлементаHTML(ОболочкаЭлемента);
			}
		}
		// Добавляем элементы, к которым не прикреплены данные формы (группы, декорации)
		var МассивЭлементов = ЭтаФорма.КорневойЭлемент.querySelectorAll('[formelemname]');
		for (var Счетчик = 0, Количество = МассивЭлементов.length; Счетчик < Количество; Счетчик++) {
			var ОболочкаЭлемента = ОболочкаЭлементаHTML(МассивЭлементов[Счетчик]);
			if(ОболочкаЭлемента && !ЭлементHTMLПринадлежитПодчиненнойФорме(ЭтаФорма, ОболочкаЭлемента)){
				if(ЭтаФорма.ДанныеЭлементов[АтрибутЭлементаHTML(МассивЭлементов[Счетчик], "formelemname")] === Неопределено){
					ЭтаФорма.ДанныеЭлементов[АтрибутЭлементаHTML(МассивЭлементов[Счетчик], "formelemname")] = СвойстваЭлементаHTML(ОболочкаЭлемента);
				}
			}
		}
	}

	// Изменение свойств элементов формы
	if(СтруктураОтвета.ИзмененныеЭлементы){
		var ИзмененныеЭлементы = JSON.parse(СтруктураОтвета.ИзмененныеЭлементы);
		ИзменитьСвойстваЭлементовФормы(ЭтаФорма, ИзмененныеЭлементы);
	}

	if(СтруктураОтвета.РеквизитыФормы){
		ЭтаФорма.Реквизиты = JSON.parse(СтруктураОтвета.РеквизитыФормы);
	}

	if(ЭтаФорма.ТабличныеЧасти){
		// Создание и инициализация форм табличных частей
		// Инициализируем их раньше элементов формы, чтоб не происходило двойного назначения обработчиков событий
		var ТабличныеЧасти = JSON.parse(ЭтаФорма.ТабличныеЧасти);
		for (var Счетчик = 0, Количество = ТабличныеЧасти.length; Счетчик < Количество; Счетчик++) {
			ЭтаФорма.ИнициализироватьТабличнуюЧасть(ТабличныеЧасти[Счетчик]);
		}
	}
	
	// Инициализация элементов формы
	ЭтаФорма.Элементы.Заголовок = НулевойЭлементКоллекции(ЭтаФорма.КорневойЭлемент, 'formTitle');
	ЭтаФорма.Элементы.СообщенияСистемыВзаимодействия = НулевойЭлементКоллекции(ЭтаФорма.КорневойЭлемент, 'CollaborationSystemMessages');
	ЭтаФорма.Элементы.Кнопки = {};
	ЭтаФорма.Элементы.Кнопки.Записать  = НулевойЭлементКоллекции(ЭтаФорма.КорневойЭлемент, 'saveBtn');
	ЭтаФорма.Элементы.Кнопки.ЗаписатьИЗакрыть  = НулевойЭлементКоллекции(ЭтаФорма.КорневойЭлемент, 'saveCloseBtn');
	ЭтаФорма.Элементы.Кнопки.Провести  = НулевойЭлементКоллекции(ЭтаФорма.КорневойЭлемент, 'postBtn');
	ЭтаФорма.Элементы.Кнопки.Закрыть = НулевойЭлементКоллекции(ЭтаФорма.КорневойЭлемент, 'closeBtn');
	// События элементов формы
	if(ЭтаФорма.КорневойЭлемент){
		ЭтаФорма.КорневойЭлемент.onclick = function(Событие){
			var Событие = Событие || window.event;
			var ЭлементСобытия = Событие.ЭлементСобытия || Событие.target;
			if(ЭлементСобытия.tagName === "A" && АтрибутЭлементаHTML(ЭлементСобытия, "data-toggle") === "tab"){
				// Клик по вкладке формы
				ПереключитьВкладкуФормы(ЭлементСобытия);
			}
			ГлобальныйКонтекст.УстановитьАктивнуюФорму(ЭтаФорма);
			Событие.stopPropagation();
		};
		ЭтаФорма.КорневойЭлемент.ondblclick = function(Событие){
			var Событие = Событие || window.event;
			var ЭлементСобытия = Событие.ЭлементСобытия || Событие.target;
			СнятьВыделение();
		};
	}
	// Кнопки
	// Запись формы
	if(ЭтаФорма.Элементы.Кнопки.Записать != null){
		if(ЭтаФорма.ТолькоПросмотр()){
			ЭтаФорма.Элементы.Кнопки.Записать.disabled = Истина;
		}else{
			ЭтаФорма.Элементы.Кнопки.Записать.onclick = function(){
				ЭтаФорма.ОбработкаЗаписи();
			};
		}
	}
	// Запись и проведение
	if(ЭтаФорма.Элементы.Кнопки.Провести != null){
		if(ЭтаФорма.ТолькоПросмотр()){
			ЭтаФорма.Элементы.Кнопки.Провести.disabled = Истина;
		}else{
			ЭтаФорма.Элементы.Кнопки.Провести.onclick = function(){
				ЭтаФорма.ОбработкаЗаписи({postProcessing: Истина});
			};
		}
	}
	// Запись и закрытие формы
	if(ЭтаФорма.Элементы.Кнопки.ЗаписатьИЗакрыть != null){
		if(ЭтаФорма.ТолькоПросмотр()){
			ЭтаФорма.Элементы.Кнопки.ЗаписатьИЗакрыть.disabled = Истина;
		}else{
			ЭтаФорма.Элементы.Кнопки.ЗаписатьИЗакрыть.onclick = function(){
				ЭтаФорма.ОбработкаЗаписи({ЗакрытьПослеЗаписи: Истина}); // При записи и закрытии запрос к 1С обязательно синхронный, чтобы закрытие формы не произошло раньше ее обновления.
				//ЭтаФорма.ЗакрытьФорму();
			};
		}
	}
	// Закрытие формы
	if(ЭтаФорма.Элементы.Кнопки.Закрыть != null){
		ЭтаФорма.Элементы.Кнопки.Закрыть.onclick = function(){
			ЭтаФорма.ЗакрытьФорму();
		};
	}

	// События элементов
	НазначитьЭлементамФормыСобытия(ЭтаФорма, ЭтаФорма.КорневойЭлемент);

	// Делаем текущую форму активной
	ГлобальныйКонтекст.УстановитьАктивнуюФорму(ЭтаФорма);
	ПодложкаМодальногоОкнаЗагружено(ЭтаФорма.Идентификатор);
		
	// Вызов события "После загрузки формы"
	ЭтаФорма.ПослеЗагрузки();
}

// Инициализация загруженной при открытии формы табличной части
ФормаОбъекта.prototype.ИнициализироватьТабличнуюЧасть = function(ДанныеТабличнойЧасти){
	var ЭтаФорма = this;
	ДанныеТабличнойЧасти.РодительскаяФорма = ЭтаФорма;
	ДанныеТабличнойЧасти.ЗагруженаСРодителем = Истина;
	var НоваяТабличнаяЧасть = new ТабличнаяЧасть(ДанныеТабличнойЧасти);
	НоваяТабличнаяЧасть.Инициализировать();
}

// Событие изменения реквизита формы
ФормаОбъекта.prototype.ПриИзменении = function(СобытиеИлиЭлемент){
	var ЭтаФорма = this;
	Форма_ПриИзменении(ЭтаФорма, СобытиеИлиЭлемент);
}

// Событие очистки реквизита формы
ФормаОбъекта.prototype.ОчиститьПолеВвода = function(Элемент){
	var ЭтаФорма = this;
	ОчиститьПолеВвода(Элемент);
	ЭтаФорма.ПриИзменении(Элемент);
}

// Событие набора текста в реквизите
ФормаОбъекта.prototype.ИзменениеТекстаРедактирования = function(Событие){
	var ЭтаФорма = this;
	ИзменениеТекстаРедактирования(ЭтаФорма, Событие);
}

// Изменение значения реквизита и обновление отображения данных формы
// Сначала устанавливается значение элемента html, а потом - соответствующих ему данных формы
ФормаОбъекта.prototype.УстановитьЗначениеДанныхФормы = function(ИмяРеквизита, ЗначениеРеквизита, НеИнициироватьСобытиеПриИзменении){
	var ЭтаФорма = this;
	УстановитьЗначениеДанныхФормы(ЭтаФорма, ИмяРеквизита, ЗначениеРеквизита, НеИнициироватьСобытиеПриИзменении);
}

// Изменение значения реквизита и обновление отображения данных формы
// Сначала устанавливается значение данных формы, потом оно копируется в значение соответствующего элемента html
ФормаОбъекта.prototype.УстановитьЗначениеРеквизита = function(ИмяРеквизита, ЗначениеРеквизита, НеИнициироватьСобытиеПриИзменении){
	var ЭтаФорма = this;
	УстановитьЗначениеРеквизитаФормы(ЭтаФорма, ИмяРеквизита, ЗначениеРеквизита, НеИнициироватьСобытиеПриИзменении);
}

// Для элемента формы находит соответствующее ему значение в данных формы и возвращает его
ФормаОбъекта.prototype.ЗначениеДанныхФормыЭлементаHTML = function(Элемент){
	var ЭтаФорма = this;
	var ИмяРеквизита = АтрибутЭлементаHTML(Элемент, "formdataname");
	if(ИмяРеквизита){
		if(ЭтаФорма.Объект.hasOwnProperty(ИмяРеквизита)){
			return ЭтаФорма.Объект[ИмяРеквизита];
		}
	}
	return null;
}

// Для элемента формы обновляет значение из данных формы
ФормаОбъекта.prototype.УстановитьЗначениеЭлементаHTMLИзДанныхФормы = function(Элемент){
	var ЭтаФорма = this;
	var ИмяРеквизита = АтрибутЭлементаHTML(Элемент, "formdataname");
	if(ИмяРеквизита){
		if(ЭтаФорма.Объект.hasOwnProperty(ИмяРеквизита)){
			ЭтаФорма.УстановитьЗначениеЭлементаHTML(ИмяРеквизита, ЭтаФорма.Объект[ИмяРеквизита]);
		}
	}
}

// Обновление значения элемента формы
ФормаОбъекта.prototype.УстановитьЗначениеЭлементаHTML = function(ИмяРеквизита, ЗначениеРеквизита){
	var ЭтаФорма = this;
	var Элемент = ЭтаФорма.КорневойЭлемент.querySelectorAll('[formdataname="' + ИмяРеквизита + '"]')[0];
	УстановитьЗначениеЭлементаHTML(Элемент, ЗначениеРеквизита);
}

// Возвращает текущий заголовок формы
ФормаОбъекта.prototype.Заголовок = function(){
	var ЭтаФорма = this;
	if(ЭтаФорма.Элементы && ЭтаФорма.Элементы.Заголовок){
		return ЭтаФорма.Элементы.Заголовок.innerHTML;
	}else{
		return null;
	}
}

// Устанавливает новый заголовок формы и возвращает его. Если у формы нет элемента с заголовком, то возвращает null.
ФормаОбъекта.prototype.УстановитьЗаголовок = function(НовыйЗаголовок){
	var ЭтаФорма = this;
	if(ЭтаФорма.Элементы && ЭтаФорма.Элементы.Заголовок){
		if(ЭтаФорма.Модифицированность && НовыйЗаголовок && НовыйЗаголовок.length > 2 && НовыйЗаголовок.slice(-2) != " *"){
			НовыйЗаголовок = НовыйЗаголовок + " *";
		}
		ЭтаФорма.Элементы.Заголовок.innerHTML = НовыйЗаголовок;
		return ЭтаФорма.Элементы.Заголовок.innerHTML;
	}else{
		return Неопределено;
	}
}

// Устанавливает новый флаг модифицированности формы и возвращает его.
ФормаОбъекта.prototype.УстановитьМодифицированность = function(ФлагМодифицированности){
	var ЭтаФорма = this;
	if(ЭтаФорма.Модифицированность === ФлагМодифицированности){
		// Флаг модифицированности не изменился
		return ЭтаФорма.Модифицированность;
	}
	ЭтаФорма.Модифицированность = ФлагМодифицированности;
	var ТекущийЗаголовок = ЭтаФорма.Заголовок();
	if(ЭтаФорма.Модифицированность === Истина){
		// Добавляем в заголовок звездочку
		ЭтаФорма.УстановитьЗаголовок(ТекущийЗаголовок + " *");
	}else{
		// Удаляем звездочку
		if(ТекущийЗаголовок && ТекущийЗаголовок.length > 2 && ТекущийЗаголовок.slice(-2) === " *"){
			ЭтаФорма.УстановитьЗаголовок(ТекущийЗаголовок.substr(ТекущийЗаголовок, ТекущийЗаголовок.length - 2));
		}
	}
	return ЭтаФорма.Модифицированность;
}

ФормаОбъекта.prototype.ТолькоПросмотр = function(){
	var ЭтаФорма = this;
	if(ЭтаФорма.Объект && ЭтаФорма.Объект.__Свойства && ЭтаФорма.Объект.__Свойства.ТолькоЧтение){
		return Истина;
	}
	if(ЭтаФорма.Реквизиты && ЭтаФорма.Реквизиты.ТолькоПросмотр){
		return Истина;
	}
	return Ложь;
}

ФормаОбъекта.prototype.ТекущийЭлемент = function(Элемент){
	var ЭтаФорма = this;
	if(typeof Элемент  === 'string'){
		Элемент = ЭлементПоИмениДанныхФормы(ЭтаФорма, ЭтаФорма.КорневойЭлемент, Элемент);
	}
	Элемент.focus();
}

ФормаОбъекта.prototype.ПолучитьНовыеСообщенияКонтекстногоОбсуждения = function(){
	var ЭтаФорма = this;
	var СообщенияСтруктура = ПолучитьНовыеСообщенияКонтекстногоОбсуждения(ЭтаФорма.Элементы.СообщенияСистемыВзаимодействия);
	if(СообщенияСтруктура.ТекстСообщений){
		ЭтаФорма.Элементы.СообщенияСистемыВзаимодействия.innerHTML = ЭтаФорма.Элементы.СообщенияСистемыВзаимодействия.innerHTML + СообщенияСтруктура.ТекстСообщений;
	}
}

// Событие окончания редактирования элемента
ФормаОбъекта.prototype.ПриИзмененииРеквизита = function(ЭлементРеквизита, ИмяРеквизита){
}

// Событие после открытия формы
ФормаОбъекта.prototype.ПослеЗагрузки = function(){
}

// Событие оперед записью
ФормаОбъекта.prototype.ПередЗаписью = function(){
}

// Событие обработки записи
ФормаОбъекта.prototype.ПриЗаписи = function(){
}

//  Событие при закрытии формы
ФормаОбъекта.prototype.ПриЗакрытии = function(ПараметрыПроверки){
}

//////////////////////////////////////////
// Класс "Форма списка"                 //
//////////////////////////////////////////

function ФормаСписка(Параметры){
	var ЭтаФорма = this;
	ЭтаФорма.Тип = (Параметры.Тип === Неопределено) ? 'ФормаСписка' : Параметры.Тип; // Тип формы. Может быть указан для выпадающего списка.
	if(Параметры.Идентификатор === Неопределено){
		ЭтаФорма.Идентификатор = СлучайныйИдентификатор();
	}else{
		ЭтаФорма.Идентификатор = Параметры.Идентификатор;
	}
	ГлобальныйКонтекст.Формы[ЭтаФорма.Идентификатор] = ЭтаФорма;
	ЭтаФорма.СоздаватьИзШаблона = (Параметры.СоздаватьИзШаблона === Неопределено) ? Истина : Параметры.СоздаватьИзШаблона; // Истина - создавать форму списка из копии шаблона, иначе использовать сам шаблон.
	var ШаблонКорневогоЭлемента = ЭлементHTMLДокумента(Параметры.КорневойЭлемент);
	if(ЭтаФорма.СоздаватьИзШаблона){
		var ФормаСпискаНовыйЭлементHTML = ШаблонКорневогоЭлемента.cloneNode(Истина);
		ФормаСпискаНовыйЭлементHTML.id = '';
		if(Параметры.ЭлементHTMLКонтейнер){
			// Указан родительский элемент для формы списка, размещаем ее в нем
			Параметры.ЭлементHTMLКонтейнер.appendChild(ФормаСпискаНовыйЭлементHTML);
		}else{
			// Размещаем форму списка там же, где лежит ее шаблон
			ШаблонКорневогоЭлемента.parentNode.insertBefore(ФормаСпискаНовыйЭлементHTML, ШаблонКорневогоЭлемента.nextSibling);
		}
		ЭтаФорма.КорневойЭлемент = ФормаСпискаНовыйЭлементHTML;
	}else{
		ЭтаФорма.КорневойЭлемент = ШаблонКорневогоЭлемента;
	}
	if(Параметры.СтильКорневогоЭлемента){
		// Параметры стиля корневого элемента
		for(param in Параметры.СтильКорневогоЭлемента){
			ЭтаФорма.КорневойЭлемент.style[param] = Параметры.СтильКорневогоЭлемента[param];
		};			
	}
	ЭтаФорма.Загружается = Ложь;
	ЭтаФорма.ШаблонHTMLТаблицы = (Параметры.ШаблонHTMLТаблицы === Неопределено) ? "" : Параметры.ШаблонHTMLТаблицы; // Шаблон списка табличной части
	ЭтаФорма.ШаблонФормы = Параметры.ШаблонФормы;
	ЭтаФорма.ИмяФормы = Параметры.ИмяФормы;
	ЭтаФорма.Владелец = Параметры.Владелец;
	ЭтаФорма.ПодчиненныеФормы = new Array();	// Подчиненные формы
	ЭтаФорма.ЦелевойЭлемент = ЭлементHTMLДокумента(Параметры.ЦелевойЭлемент); // !!!!! Элементы перенести массив "Элементы"
	ЭтаФорма.ОсновнаяТаблица = Параметры.ОсновнаяТаблица;	
	ЭтаФорма.ПроизвольныйЗапрос = (Параметры.ПроизвольныйЗапрос === Неопределено) ? "" : Параметры.ПроизвольныйЗапрос; // Имя функции 1С, возвращающей результат произвольного запроса с коллекцией данных для ТЧ
	ЭтаФорма.ТекстЗапроса = Параметры.ТекстЗапроса; // Имя функции 1С, возвращающей текст произвольного запроса. В отличие от ПроизвольныйЗапрос возвращает не коллекцию данных, а только основу запроса, к которой потом могут применены отборы и сортировка.
	ЭтаФорма.ЗакрыватьПриНажатииНаПодложку	= Параметры.ЗакрыватьПриНажатииНаПодложку;
	ЭтаФорма.ОбработчикЗаполненияОбъекта	= Параметры.ОбработчикЗаполненияОбъекта; // Имя функции 1С, вызываемой при заполнении нового объекта при добавлении его в форме списка
	ЭтаФорма.ОбработчикЗаписиОбъекта		= Параметры.ОбработчикЗаписиОбъекта;	 // Имя функции 1С, вызываемой при записи объекта, открытого в форме списка
	ЭтаФорма.ОбработчикКоллекцииДанных		= Параметры.ОбработчикКоллекцииДанных;	 // Имя функции 1С, вызываемой после формирования коллекции данных для списка
	ЭтаФорма.ПослеСозданияФормы				= Параметры.ПослеСозданияФормы;			 // Имя функции 1С, вызываемой после создания и заполнения формы, непосредственно перед возвратом ее клиенту
	ЭтаФорма.Элементы = {};
	ЭтаФорма.Элементы.Кнопки = {};
	ЭтаФорма.Элементы.Кнопки.Выбрать = Неопределено;
	ЭтаФорма.Элементы.Кнопки.Закрыть = Неопределено;
	ЭтаФорма.Элементы.Кнопки.Открыть = Неопределено;
	ЭтаФорма.Элементы.Кнопки.Добавить = Неопределено;
	ЭтаФорма.Элементы.Кнопки.Обновить = Неопределено;
	ЭтаФорма.Элементы.Заголовок = Неопределено;
	ЭтаФорма.Элементы.Поиск = {};
	ЭтаФорма.Элементы.Поиск.ПолеВвода = Неопределено;
	ЭтаФорма.Элементы.Поиск.КнопкаОчистки = Неопределено;
	ЭтаФорма.ЭлементHTMLКонтейнер = НулевойЭлементКоллекции(ЭтаФорма.КорневойЭлемент, "listContainer");
	ЭтаФорма.КорневойЭлементHTMLТаблицы = Неопределено;				// Корневой элемент списка (тег "<table>")
	ЭтаФорма.ЗагруженыВсеСтраницы = Ложь;							// Истина - загружены все страницы списка
	ЭтаФорма.ЗагруженоСтраниц = 0;									// Количество страниц списка, загруженных на данный момент
	ЭтаФорма.СтрокНаСтранице = (Параметры.СтрокНаСтранице === Неопределено) ? 100 : Параметры.СтрокНаСтранице; // Сколько строк загружать при прокрутке списка
	ЭтаФорма.ТекущаяСтрока = Неопределено;							// Текущая строка (элемент html)
	ЭтаФорма.Колонки = Параметры.Колонки; 							// Идентификаторы и наименования отображаемых колонок
	ЭтаФорма.ПолноеНаименование = Параметры.ПолноеНаименование;		// Истина - представление строки состоит из полного наименования элемента, включая наименования всех родительских групп
	ЭтаФорма.ПараметрыСортировки = Параметры.ПараметрыСортировки;	// Массив. Имя колонки, по которой происходит сортировка списка, и направление сортировки
	if(Параметры.Отбор === Неопределено){ 							// Отбор списка
		ЭтаФорма.Отбор = {};
	}else{
		ЭтаФорма.Отбор = Параметры.Отбор;
	}
	if(Параметры.РежимВыбора === Неопределено){
		if(ЭтаФорма.ЦелевойЭлемент === Неопределено){
			ЭтаФорма.РежимВыбора = Ложь; // Целевой элемент не указан, форма открыта не в режиме выбора
		}else{
			ЭтаФорма.РежимВыбора = Истина; // Целевой элемент указан, форма открыта в режиме выбора
		}
	}else{
		ЭтаФорма.РежимВыбора = Параметры.РежимВыбора;
	}
	//ЭтаФорма.selectПриАктивизацииСтроки = (Параметры.selectПриАктивизацииСтроки === Неопределено) ? Ложь : Параметры.selectПриАктивизацииСтроки; // !!!!! Убрать?
	if(Параметры.ЗакрыватьПриВыборе === Неопределено){
		if(ЭтаФорма.РежимВыбора){
			// Режим выбора, параметры закрытия формы при выборе не указаны. По умолчанию закрываем при выборе.
			ЭтаФорма.ЗакрыватьПриВыборе	= Истина;
		}else{
			// Не режим выбора, параметры закрытия формы при выборе не указаны. По умолчанию не закрываем при выборе.
			ЭтаФорма.ЗакрыватьПриВыборе	= Ложь;
		}
	}else{
		ЭтаФорма.ЗакрыватьПриВыборе	= Параметры.ЗакрыватьПриВыборе;
	}
	ЭтаФорма.КэшироватьСтроки = (Параметры.КэшироватьСтроки === Неопределено) ? Ложь : Параметры.КэшироватьСтроки; // Не удалять скрываемые строки и отображать их заново вместо выполнения запроса
	ЭтаФорма.ДополнительныеСвойства = (Параметры.ДополнительныеСвойства === Неопределено) ? {} : Параметры.ДополнительныеСвойства; // Дополнительные произвольные свойства
	ЭтаФорма.РежимОткрытияОкна = (Параметры.РежимОткрытияОкна === Неопределено) ? РежимОткрытияОкнаФормы.Независимый : Параметры.РежимОткрытияОкна;
	ЭтаФорма.РодительскаяФорма = (Параметры.РодительскаяФорма === Неопределено) ? Неопределено : Параметры.РодительскаяФорма; // Родительская форма
	if(ЭтаФорма.РодительскаяФорма && ЭтаФорма.РодительскаяФорма.hasOwnProperty("ПодчиненныеФормы")){
		// Назначим текущей форме родителя
		ЭтаФорма.РодительскаяФорма.ПодчиненныеФормы.push(ЭтаФорма);
	}
	
	ЭтаФорма.Инициализировать = function()
	{
		if(ЭтаФорма.КорневойЭлемент){						
			ЭтаФорма.КорневойЭлемент.onclick = function(Событие){
				var Событие = Событие || window.event;
				ОбработкаСобытияКликаПоСтрокеТаблицы(Событие, ЭтаФорма);
				ГлобальныйКонтекст.УстановитьАктивнуюФорму(ЭтаФорма);
				Событие.stopPropagation();
			};
			ЭтаФорма.КорневойЭлемент.ondblclick = function(Событие){
				var Событие = Событие || window.event;
				ОбработкаСобытияКликаПоСтрокеТаблицы(Событие, ЭтаФорма);
			};
			ЭтаФорма.КорневойЭлемент.onfocus = function(Событие){
				var Событие = Событие || window.event;
				ОбработкаСобытияКликаПоСтрокеТаблицы(Событие, ЭтаФорма);
				ГлобальныйКонтекст.УстановитьАктивнуюФорму(ЭтаФорма);
				Событие.stopPropagation();
			};
			// Для кнопки закрытия назначаем обработчик сразу, чтобы при ошибке загрузки содержимого формы ее можно было закрыть
			ЭтаФорма.Элементы.Кнопки.Закрыть = НулевойЭлементКоллекции(ЭтаФорма.КорневойЭлемент, "cancelBtn");
			if(ЭтаФорма.Элементы.Кнопки.Закрыть){
				ЭтаФорма.Элементы.Кнопки.Закрыть.onclick = function(){ЭтаФорма.ЗакрытьФорму()};
			}
		}	
		if(ЭтаФорма.ЭлементHTMLКонтейнер){
			ЭтаФорма.ЭлементHTMLКонтейнер.onscroll = function(Событие){
				var Событие = Событие || window.event;
				ЭтаФорма.ПриПрокрутке(Событие);
			};
		}
		ЭтаФорма.ОткрытьФорму();
	}
}

// Открытие формы списка
ФормаСписка.prototype.ОткрытьФорму = function(){
	var ЭтаФорма = this;
	if(ЭтаФорма.КорневойЭлемент){
		// z-index
		if(ЭтаФорма.Владелец && ЭтаФорма.Владелец.КорневойЭлемент && ЭтаФорма.Владелец.КорневойЭлемент.style.zIndex){
			ЭтаФорма.КорневойЭлемент.style.zIndex = Number(ЭтаФорма.Владелец.КорневойЭлемент.style.zIndex) + 1;
			if(ЭтаФорма.РежимОткрытияОкна === РежимОткрытияОкнаФормы.БлокироватьОкноВладельца || ЭтаФорма.РежимОткрытияОкна === РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс){
				// Предыдущий порядок оставляем для подложки
				ЭтаФорма.КорневойЭлемент.style.zIndex = Number(ЭтаФорма.КорневойЭлемент.style.zIndex) + 1;
			}
		}
		if(ЭтаФорма.РежимОткрытияОкна === РежимОткрытияОкнаФормы.БлокироватьОкноВладельца || ЭтаФорма.РежимОткрытияОкна === РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс){
			if(ЭтаФорма.Владелец && ЭтаФорма.Владелец.КорневойЭлемент && ЭтаФорма.Владелец.КорневойЭлемент.style.zIndex){
				var Порядок = Number(ЭтаФорма.Владелец.КорневойЭлемент.style.zIndex) + 1;
			}else{
				var Порядок = Неопределено;
			}
			ПодложкаМодальногоОкнаПоказать(ЭтаФорма.Идентификатор, Порядок);
		}		
		ЭтаФорма.КорневойЭлемент.style.display = 'block';
	}
}

// Закрытие формы списка
ФормаСписка.prototype.ЗакрытьФорму = function(){
	var ЭтаФорма = this;
	if(ЭтаФорма.ЦелевойЭлемент && АтрибутЭлементаHTML(ЭтаФорма.ЦелевойЭлемент, 'keydown') === 'true'){
		// Форма была открыта для выбора значения в поле ввода, но выбор не выполнен.
		// Восстанавливаем значение элемента из данных формы, содержащей поле ввода
		if(ЭтаФорма.Владелец && ЭтаФорма.Владелец.ЗначениеДанныхФормыЭлементаHTML){
			var ЗначениеЭлемента = ЭтаФорма.Владелец.УстановитьЗначениеЭлементаHTMLИзДанныхФормы(ЭтаФорма.ЦелевойЭлемент);
		}
	}	
	// Закрытие формы
	ЭтаФорма.ПриЗакрытии();
	ЗакрытьЗависимыеФормы(ЭтаФорма);
	ГлобальныйКонтекст.ПриЗакрытииФормы(ЭтаФорма);
	if(this.РодительскаяФорма){
		// Удалим текущую форму из массива подчиненных формы-родителя
		this.РодительскаяФорма.ПодчиненныеФормы.splice(this.РодительскаяФорма.ПодчиненныеФормы.indexOf(this), 1);
	}	
	if (ЭтаФорма.СоздаватьИзШаблона === Истина){ЭтаФорма.КорневойЭлемент.parentNode.removeChild(ЭтаФорма.КорневойЭлемент)}
	if(ЭтаФорма.Элементы.Кнопки.Выбрать){ЭтаФорма.Элементы.Кнопки.Выбрать.onclick			= Неопределено}
	if(ЭтаФорма.Элементы.Кнопки.Закрыть){ЭтаФорма.Элементы.Кнопки.Закрыть.onclick			= Неопределено}
	if(ЭтаФорма.Элементы.Кнопки.Добавить){ЭтаФорма.Элементы.Кнопки.Добавить.onclick			= Неопределено}
	if(ЭтаФорма.Элементы.Кнопки.Обновить){ЭтаФорма.Элементы.Кнопки.Обновить.onclick			= Неопределено}
	if(ЭтаФорма.Элементы.Кнопки.Открыть){ЭтаФорма.Элементы.Кнопки.Открыть.onclick			= Неопределено}
	if(ЭтаФорма.Элементы.Поиск.ПолеВвода){ЭтаФорма.Элементы.Поиск.ПолеВвода.onchange		= Неопределено}
	if(ЭтаФорма.Элементы.Поиск.КнопкаОчистки){ЭтаФорма.Элементы.Поиск.КнопкаОчистки.onclick	= Неопределено}
	if(ЭтаФорма.КорневойЭлемент){
		ЭтаФорма.КорневойЭлемент.ondblclick = Неопределено;
		ЭтаФорма.КорневойЭлемент.onclick = Неопределено;
	}
	ИдентификаторФормы = ЭтаФорма.Идентификатор;
	ЭтаФорма = Неопределено;
	delete ГлобальныйКонтекст.Формы[ИдентификаторФормы];
}

// Загрузка данных в список
ФормаСписка.prototype.Загрузить = function(ДополнительныеПараметры, ПараметрыОтображения){
	var ЭтаФорма = this;
	if(ЭтаФорма.Загружается){
		// Форма уже загружается
		return;
	}
	ЭтаФорма.Загружается = Истина;
	if(ЭтаФорма.КэшироватьСтроки && ЭтаФорма.ТекущаяСтрока){
		if(АтрибутЭлементаHTML(ЭтаФорма.ТекущаяСтрока, "cached-rows") === "loaded"){
			// Скрытие закэшированных строк
			ФормаСпискаСвернутьКэшируемуюСтроку(ЭтаФорма.ТекущаяСтрока);
			return;
		}
		if(АтрибутЭлементаHTML(ЭтаФорма.ТекущаяСтрока, "cached-rows") === "hidden"){
			// Отображение закэшированных строк
			ФормаСпискаРазвернутьКэшируемуюСтроку(ЭтаФорма.ТекущаяСтрока);
			return;
		}
	}
	// Загрузка содержимого формы
	ДополнительныеПараметры = (ДополнительныеПараметры === Неопределено) ? {} : ДополнительныеПараметры;
	АтрибутыЭлементаHTMLВПараметрыURL(ДополнительныеПараметры, ЭтаФорма.ЦелевойЭлемент, 'targetelem_');
	АтрибутыЭлементаHTMLВПараметрыURL(ДополнительныеПараметры, ЭтаФорма.ТекущаяСтрока, 'activerow_');
	ПеременнуюВКлючСтруктуры(ДополнительныеПараметры, 'formTemplate', ЭтаФорма.ШаблонФормы);
	ПеременнуюВКлючСтруктуры(ДополнительныеПараметры, 'formName', ЭтаФорма.ИмяФормы);
	if(ЭтаФорма.ПараметрыСортировки){
		ПеременнуюВКлючСтруктуры(ДополнительныеПараметры, 'listsorting', ЭтаФорма.ПараметрыСортировки.Колонка + ' ' + ЭтаФорма.ПараметрыСортировки.Направление);
	}
	ПеременнуюВКлючСтруктуры(ДополнительныеПараметры, 'targetelem_listformtemplate',	ЭтаФорма.ШаблонHTMLТаблицы);
	ПеременнуюВКлючСтруктуры(ДополнительныеПараметры, 'targetelem_maintable',			ЭтаФорма.ОсновнаяТаблица);
	ПеременнуюВКлючСтруктуры(ДополнительныеПараметры, 'targetelem_listformcols',		ЭтаФорма.Колонки);
	ПеременнуюВКлючСтруктуры(ДополнительныеПараметры, 'targetelem_fulldescr',			ЭтаФорма.ПолноеНаименование);
	ПеременнуюВКлючСтруктуры(ДополнительныеПараметры, 'targetelem_customquery',			ЭтаФорма.ПроизвольныйЗапрос);
	ПеременнуюВКлючСтруктуры(ДополнительныеПараметры, 'ТекстЗапроса',					ЭтаФорма.ТекстЗапроса);
	ПеременнуюВКлючСтруктуры(ДополнительныеПараметры, 'ОбработчикКоллекцииДанных',		ЭтаФорма.ОбработчикКоллекцииДанных);
	ПеременнуюВКлючСтруктуры(ДополнительныеПараметры, 'ПослеСозданияФормы',				ЭтаФорма.ПослеСозданияФормы);
	if(ЭтаФорма.ЦелевойЭлемент){
		// Связи параметров выбора
		var Отбор = АтрибутЭлементаHTML(ЭтаФорма.ЦелевойЭлемент, "filter");
		if(Отбор){
			// Разберем связи параметров выбора, передадим их в качестве дополнительных параметров в 1С
			var ОтборСтруктура = {};
			var МассивДанных = Отбор.split(",");
			for(var Счетчик = 0, Количество = МассивДанных.length; Счетчик < Количество; Счетчик++){
				var Значение = МассивДанных[Счетчик].split(":")[1].trim();
				var ОтборСтрока = null;
				if(Значение.indexOf("formdataname=") === 0){
					// Значение указано в данных формы
					Значение = Значение.replace("formdataname=", "");
					if(ЭтаФорма.Владелец){
						var ЭлементОтбора = {};
						if(ЭтаФорма.Владелец.Тип === "ТабличнаяЧасть"){
							var ОтборСтрока = ЭлементПоИмениДанныхФормы(ЭтаФорма, ЭтаФорма.Владелец.ТекущаяСтрока, Значение);
							if(ОтборСтрока === Неопределено && ЭтаФорма.Владелец.РодительскаяФорма){
								// У строки ТЧ данного реквизита нет, поищем его у родительской формы
								ОтборСтрока = ЭлементПоИмениДанныхФормы(ЭтаФорма, ЭтаФорма.Владелец.РодительскаяФорма.КорневойЭлемент, Значение);
								ЭлементОтбора.Значение = ЭтаФорма.Владелец.РодительскаяФорма.ЗначениеДанныхФормыЭлементаHTML(ОтборСтрока);
							}else{
								ЭлементОтбора.Значение = ЭтаФорма.Владелец.ЗначениеДанныхФормыЭлементаHTML(ОтборСтрока);
							}
						}else{
							var ОтборСтрока = ЭлементПоИмениДанныхФормы(ЭтаФорма, ЭтаФорма.Владелец.КорневойЭлемент, Значение);
							ЭлементОтбора.Значение = ЭтаФорма.Владелец.ЗначениеДанныхФормыЭлементаHTML(ОтборСтрока);
						}
						if(АтрибутЭлементаHTML(ОтборСтрока, "maintable")){
							ЭлементОтбора.ОсновнаяТаблица = АтрибутЭлементаHTML(ОтборСтрока, "maintable");
						}
					}
				}else if(Значение.indexOf("1ccode=") === 0){
					// Значение будет вычислено на стороне 1С
					Значение = Значение.replace("1ccode=", "1ccode:");
					var ОтборСтрока = ЭтаФорма.ЦелевойЭлемент;
					var ЭлементОтбора = {};
					ЭлементОтбора.Значение = Значение;
				}else if(Значение.indexOf("elemid=") === 0){
					// Указан id элемента, в котором хранится значение связи
					Значение = Значение.replace("elemid=", "");
					var ОтборСтрока = ЭлементHTMLДокумента(Значение);
					if(АтрибутЭлементаHTML(ОтборСтрока, "ref")){
						// Это ссылка
						var ЭлементОтбора = {};
						ЭлементОтбора.Значение = АтрибутЭлементаHTML(ОтборСтрока, "ref");
						if(АтрибутЭлементаHTML(ОтборСтрока, "maintable")){
							ЭлементОтбора.ОсновнаяТаблица = АтрибутЭлементаHTML(ОтборСтрока, "maintable");
						}						
					}else{
						// Используем значение элемента
						var ЭлементОтбора = {};
						ЭлементОтбора.Значение = ОтборСтрока.value;
					}
				}else{
					// Значение указано непосредственно в фильтре
					var ОтборСтрока = ЭтаФорма.ЦелевойЭлемент;
					var ЭлементОтбора = {};
					ЭлементОтбора.Значение = Значение;
				}
				if(ОтборСтрока){
					ОтборСтруктура[МассивДанных[Счетчик].split(":")[0].trim()] = ЭлементОтбора;
				}
			}
			ПеременнуюВКлючСтруктуры(ДополнительныеПараметры, "choice-parameters", JSON.stringify(ОтборСтруктура));
		}
	}
	if(ЭтаФорма.Отбор && Object.keys(ЭтаФорма.Отбор).length > 0){
		ПеременнуюВКлючСтруктуры(ДополнительныеПараметры, "Отбор", JSON.stringify(ЭтаФорма.Отбор));
	}
	// Поиск
	if(ЭтаФорма.Элементы && ЭтаФорма.Элементы.Поиск.ПолеВвода){
		ДополнительныеПараметры.ПоискПоСтроке_Значение = ЭтаФорма.Элементы.Поиск.ПолеВвода.value;
		if(АтрибутЭлементаHTML(ЭтаФорма.Элементы.Поиск.ПолеВвода, 'search_attrs')){
			ДополнительныеПараметры.ПоискПоСтроке_Поля = АтрибутЭлементаHTML(ЭтаФорма.Элементы.Поиск.ПолеВвода, 'search_attrs');
		}
	}	
	if(ПараметрыОтображения === Неопределено){
		ПараметрыОтображения = {};
	}
	if(ДополнительныеПараметры.ЗагрузитьСтраницу === Истина){
		// Загрузка страницы списка
		//ПараметрыОтображения.insertAdjacentHTML = 'afterEnd';
		//ПараметрыОтображения.ОчищатьСодержимое = Ложь;
		ПараметрыОтображения.ПриЗагрузке = 'ФормаСпискаПриЗагрузке("' + ЭтаФорма.Идентификатор + '")';
		ЗапросК1С('КэнСайтСервер.ФормаСписка(ПараметрыЗапроса)', ДополнительныеПараметры, ЭтаФорма.КорневойЭлементHTMLТаблицы.tBodies[0], Ложь, ПараметрыОтображения);
	}else if(ЭтаФорма.КэшироватьСтроки && ЭтаФорма.ТекущаяСтрока && АтрибутЭлементаHTML(ЭтаФорма.ТекущаяСтрока, "cached-rows") != "true"){
		// Загрузка подчиненных строк списка
		ЭтаФорма.ЗагруженоСтраниц = 0;
		ДополнительныеПараметры.leveloffsetfromparent = Истина;
		ПараметрыОтображения.insertAdjacentHTML = 'afterEnd';
		//ПараметрыОтображения.ПриЗагрузке = 'ФормаСпискаПриЗагрузкеКэшированнойСтроки(ЭлементКонтейнер); ГлобальныйКонтекст.Формы["' + ЭтаФорма.Идентификатор + '"].ПриЗагрузке()';
		ПараметрыОтображения.ПриЗагрузке = 'ФормаСпискаПриЗагрузкеКэшированнойСтроки(ЭлементКонтейнер); ФормаСпискаПриЗагрузке("' + ЭтаФорма.Идентификатор + '")';
		ЗапросК1С('КэнСайтСервер.ФормаСписка(ПараметрыЗапроса)', ДополнительныеПараметры, ЭтаФорма.ТекущаяСтрока, Истина, ПараметрыОтображения);
	}else{
		// Обычная загрузка списка
		ЭтаФорма.ЗагруженоСтраниц = 0;
		// После загрузки содержимого формы элемента, соответствующего активной строке, не будет. Обнуляем активную строку.
		ЭтаФорма.ТекущаяСтрока = Неопределено;
		//ПараметрыОтображения.ПриЗагрузке = 'ГлобальныйКонтекст.Формы["' + ЭтаФорма.Идентификатор + '"].ПриЗагрузке()';
		ПараметрыОтображения.ПриЗагрузке = 'ФормаСпискаПриЗагрузке("' + ЭтаФорма.Идентификатор + '")';
		ЗапросК1С('КэнСайтСервер.ФормаСписка(ПараметрыЗапроса)', ДополнительныеПараметры, ЭтаФорма.ЭлементHTMLКонтейнер, Истина, ПараметрыОтображения);
	}
}

// Загрузка строк страницы списка
ФормаСписка.prototype.ЗагрузитьСтраницу = function(){
	var ЭтаФорма = this;
	if(ЭтаФорма.ЗагруженыВсеСтраницы != Истина){
		var ДополнительныеПараметры = {
			ЗагрузитьСтраницу: Истина,
			НомерСтраницы: ЭтаФорма.ЗагруженоСтраниц + 1,
			СтрокНаСтранице: ЭтаФорма.СтрокНаСтранице
		};
		ЭтаФорма.Загрузить(ДополнительныеПараметры);
	}
	// !!!!! При загрузке страницы 1С возвращает только новые строки.
	//       Если после загрузки страницы пришла пустая строка, значит у формы загружены все строки.
	//       В этом случае для формы можно установить флаг "ЗагруженыВсеСтраницы"
}

// Обработка выбора
ФормаСписка.prototype.ОбработкаВыбора = function(){
	var ЭтаФорма = this;
	console.log(ЭтаФорма.КорневойЭлементHTMLТаблицы);
	if(!ЭтаФорма.ТекущаяСтрока){
		// Найдем текущую строку по атрибуту
		var НайденнаяСтрока = ЭтаФорма.КорневойЭлементHTMLТаблицы.querySelector('[isactiverow="true"]');
		if(НайденнаяСтрока){
			ЭтаФорма.ТекущаяСтрока = НайденнаяСтрока;
		}
	}
	if(АтрибутЭлементаHTML(ЭтаФорма.ТекущаяСтрока, 'isgroup') === 'true'){
		ЭтаФорма.ПриВыборе();
		// При клике на группу загружаем ее содержимое
		ЭтаФорма.Загрузить();
	}else{
		if(ЭтаФорма.ЦелевойЭлемент){
			// При клике на элемент помещаем ссылку на него в целевой элемент, к которому привязана форма списка
			ЭтаФорма.ЦелевойЭлемент.value = АтрибутЭлементаHTML(ЭтаФорма.ТекущаяСтрока, 'presentation');
			ЭтаФорма.ЦелевойЭлемент.setAttribute('ref', АтрибутЭлементаHTML(ЭтаФорма.ТекущаяСтрока, 'ref'));
			ЭтаФорма.ЦелевойЭлемент.setAttribute('keydown', '');
			// Вызываем событие "При изменении" для целевого элемента
			var Событие = document.createEvent('Event');
			Событие.initEvent('change', Ложь, Истина); 		
			ЭтаФорма.ЦелевойЭлемент.dispatchEvent(Событие);
		}
		// Вызываем событие "При выборе" для формы списка
		ЭтаФорма.ПриВыборе();
		// Закрываем форму
		if(ЭтаФорма.РежимВыбора === Истина && ЭтаФорма.ЗакрыватьПриВыборе === Истина){
			ЭтаФорма.ЗакрытьФорму();
		}
	}
}

// Обработка открытия формы объекта
ФормаСписка.prototype.ОбработкаОткрытия = function(Параметры){
	var ЭтаФорма = this;
	if(Параметры === Неопределено){Параметры = {}}
	// Вызываем событие "При выборе" для формы списка
	Параметры.ОбработкаОткрытия = Истина;
	return ЭтаФорма.ПриВыборе(Параметры);
}

// Обработка добавления объекта
ФормаСписка.prototype.ОбработкаДобавления = function(Параметры){
	var ЭтаФорма = this;
	if(Параметры === Неопределено){Параметры = {}}
	if(ЭтаФорма.ЦелевойЭлемент){
		// При клике на элемент помещаем ссылку на него в целевой элемент, к которому привязана форма списка
		ЭтаФорма.ЦелевойЭлемент.value = "";
		ЭтаФорма.ЦелевойЭлемент.setAttribute("ref", "");
	}
	// Вызываем событие "При выборе" для формы списка
	Параметры.ОбработкаДобавления = Истина;
	if(ЭтаФорма.ОбработчикЗаполненияОбъекта){
		Параметры.ОбработчикЗаполненияОбъекта = ЭтаФорма.ОбработчикЗаполненияОбъекта;
	}
	return ЭтаФорма.ПриВыборе(Параметры);
}

// Обработка сортировки
ФормаСписка.prototype.ОбработкаСортировки = function(sortElem){
	var o = this;
	var ПараметрыСортировки = {};
	ПараметрыСортировки.Колонка = АтрибутЭлементаHTML(sortElem, "sortcolumn");
	// Установка сортировки
	if(sortElem.classList.contains('sorting-desc') || sortElem.classList.contains('sorting-asc')){
		if(sortElem.classList.contains('sorting-asc')){
			ПараметрыСортировки.Направление = "desc";
		}else{
			ПараметрыСортировки.Направление = "asc";
		}
	}else{
		// Ранее сортировки не было, сортируем по возрастанию
		ПараметрыСортировки.Направление = "asc";
	}
	o.ПараметрыСортировки = ПараметрыСортировки;
	// Перезагрузка формы
	o.Загрузить();
}

// Событие загрузки данных формы
ФормаСписка.prototype.ПриЗагрузке = function(ДополнительныеПараметры){
	var ЭтаФорма = this;
	ДополнительныеПараметры = (ДополнительныеПараметры === Неопределено) ? {} : ДополнительныеПараметры;	
	ЭтаФорма.ЗагруженоСтраниц = ЭтаФорма.ЗагруженоСтраниц + 1;
	// Инициализация элементов формы и назначение им обработчиков	
	if(ЭтаФорма.КорневойЭлемент){						
		// Поместим ссылку на табличное поле в реквизит формы
		ЭтаФорма.КорневойЭлементHTMLТаблицы = НулевойЭлементКоллекции(ЭтаФорма.ЭлементHTMLКонтейнер, "table", Истина);
		if (ЭтаФорма.КорневойЭлементHTMLТаблицы === Неопределено) {
			// Т.к. в новой верстке списки не всегда <table>
			ЭтаФорма.КорневойЭлементHTMLТаблицы = НулевойЭлементКоллекции(ЭтаФорма.ЭлементHTMLКонтейнер, "table-list-container", Ложь);
		}
		// Элементы формы
		ЭтаФорма.Элементы.Заголовок = НулевойЭлементКоллекции(ЭтаФорма.КорневойЭлемент, "formTitle");
		// Кнопки
		if(ЭтаФорма.Элементы.Кнопки.Закрыть === null){
			// Кнопка закрытия могла быть инициализирована при открытии формы
			ЭтаФорма.Элементы.Кнопки.Закрыть  = НулевойЭлементКоллекции(ЭтаФорма.КорневойЭлемент, "cancelBtn");
			if(ЭтаФорма.Элементы.Кнопки.Закрыть){
				ЭтаФорма.Элементы.Кнопки.Закрыть.onclick = function(){ЭтаФорма.ЗакрытьФорму()};
			}			
		}
		ЭтаФорма.Элементы.Кнопки.Выбрать  = НулевойЭлементКоллекции(ЭтаФорма.КорневойЭлемент, "selectBtn");
		ЭтаФорма.Элементы.Кнопки.Закрыть  = НулевойЭлементКоллекции(ЭтаФорма.КорневойЭлемент, "cancelBtn");
		ЭтаФорма.Элементы.Кнопки.Добавить = НулевойЭлементКоллекции(ЭтаФорма.КорневойЭлемент, "insertBtn");
		ЭтаФорма.Элементы.Кнопки.Обновить = НулевойЭлементКоллекции(ЭтаФорма.КорневойЭлемент, "refreshBtn");
		ЭтаФорма.Элементы.Кнопки.Открыть  = НулевойЭлементКоллекции(ЭтаФорма.КорневойЭлемент, "openBtn");
		ЭтаФорма.Элементы.Поиск.ПолеВвода  = НулевойЭлементКоллекции(ЭтаФорма.КорневойЭлемент, "searchInput");
		ЭтаФорма.Элементы.Поиск.КнопкаОчистки = НулевойЭлементКоллекции(ЭтаФорма.КорневойЭлемент, "searchInputReset");
		if(ЭтаФорма.Элементы.Кнопки.Выбрать){
			ЭтаФорма.Элементы.Кнопки.Выбрать.onclick = function(){
				ЭтаФорма.ОбработкаВыбора();
			}
		}
		if(ЭтаФорма.Элементы.Кнопки.Добавить){
			ЭтаФорма.Элементы.Кнопки.Добавить.onclick = function(){
				ЭтаФорма.ОбработкаДобавления();
			}
		}
		if(ЭтаФорма.Элементы.Кнопки.Обновить){
			ЭтаФорма.Элементы.Кнопки.Обновить.onclick = function(){
				ЭтаФорма.Обновить();
			};
		}
		if(ЭтаФорма.Элементы.Кнопки.Открыть){
			ЭтаФорма.Элементы.Кнопки.Открыть.onclick = function(){ЭтаФорма.ОбработкаОткрытия()};
		}
		if(ЭтаФорма.Элементы.Поиск.ПолеВвода){
			ЭтаФорма.Элементы.Поиск.ПолеВвода.onchange = function(){ЭтаФорма.ПоискВыполнить()};
			ЭтаФорма.Элементы.Поиск.ПолеВвода.onkeydown = function(evt){
				if(evt.keyCode === 13 && ЭтоIE()){ // Только для Осла. Остальные браузеры самостоятельно нормально отрабатывают нажатие Энтер.
					ЭтаФорма.ПоискВыполнить();
				}
			};
		}
		if(ЭтаФорма.Элементы.Поиск.КнопкаОчистки){
			ЭтаФорма.Элементы.Поиск.КнопкаОчистки.onclick = function(){ЭтаФорма.ПоискОчистить()};
		}
		// Сортировка
		var КолонкиСортировки = ЭтаФорма.КорневойЭлемент.querySelectorAll('[sortcolumn]');
		for(var Счетчик = 0, Количество = КолонкиСортировки.length; Счетчик < Количество; Счетчик++) {
			// Назначение события нажатия для запуска сортировки
			КолонкиСортировки[Счетчик].onclick = function(){ЭтаФорма.ОбработкаСортировки(this)};
			// Оформление колонки, по которой сейчас установлена сортировка
			if(ЭтаФорма.ПараметрыСортировки && ЭтаФорма.ПараметрыСортировки.Колонка === АтрибутЭлементаHTML(КолонкиСортировки[Счетчик], "sortcolumn")){
				КолонкиСортировки[Счетчик].classList.remove('sorting-asc');
				КолонкиСортировки[Счетчик].classList.remove('sorting-desc');
				КолонкиСортировки[Счетчик].classList.add("sorting-" + ЭтаФорма.ПараметрыСортировки.Направление);
			} else {
				КолонкиСортировки[Счетчик].classList.remove('sorting-asc');
				КолонкиСортировки[Счетчик].classList.remove('sorting-desc');
			}
		}
		// Установка активной строки
		if(ЭтаФорма.ДополнительныеСвойства.УстановитьТекущуюСтроку != Неопределено){
			ЭтаФорма.УстановитьТекущуюСтроку(ЭтаФорма.ДополнительныеСвойства.УстановитьТекущуюСтроку);
			ЭтаФорма.ДополнительныеСвойства.УстановитьТекущуюСтроку = Неопределено; // !!!!! Необходимо удалять ключ-значение, а не устанавливать Неопределено
		}else{
			// Устанавливаем активной первую строку
			ЭтаФорма.УстановитьТекущуюСтроку(0);
		}
		if(ЭтаФорма.КорневойЭлементHTMLТаблицы && СодержитКласс(ЭтаФорма.КорневойЭлементHTMLТаблицы, 'fixed-header')){
			// Это форма списка с фиксированной высотой. Необходима обработка события прокрутки содержимого тела таблицы.
			if(ЭтаФорма.КорневойЭлементHTMLТаблицы.tBodies[0]){
				ЭтаФорма.КорневойЭлементHTMLТаблицы.tBodies[0].onscroll = function(Событие){
					var Событие = Событие || window.event;
					ЭтаФорма.ПриПрокрутке(Событие);
				};
			}
		}
		НазначитьЭлементамФормыОбработчикИзмененияПоМаске(ЭтаФорма, ЭтаФорма.КорневойЭлемент);
	}	
	if(ЭтаФорма.РежимВыбора){
		// Форма открывается для выбора, делаем ее активной
		ГлобальныйКонтекст.УстановитьАктивнуюФорму(ЭтаФорма);
	}
	ПодложкаМодальногоОкнаЗагружено(ЭтаФорма.Идентификатор);
	ЭтаФорма.Загружается = Ложь;
	/*
	if(ЭтаФорма.ДополнительныеСвойства.УстановитьТекущуюСтроку){
		ЭтаФорма.УстановитьТекущуюСтроку(ЭтаФорма.ДополнительныеСвойства.УстановитьТекущуюСтроку);
		ЭтаФорма.ДополнительныеСвойства.УстановитьТекущуюСтроку = Неопределено;
	}
	*/
	// Вызов обработчика "После загрузки формы"
	ЭтаФорма.ПослеЗагрузки();
}

// Событие обработки выбора
ФормаСписка.prototype.ПриВыборе = function(Параметры){
	var ЭтаФорма = this;
	if(Параметры === Неопределено){Параметры = {}}	
	var НоваяФормаОбъекта = Неопределено;
	if(Параметры && Параметры.ОбработкаДобавления){
		// Создание нового объекта
		if(ЭтаФорма.ОсновнаяТаблица){var ОсновнаяТаблица = ЭтаФорма.ОсновнаяТаблица}else{var ОсновнаяТаблица = АтрибутЭлементаHTML(ЭтаФорма.ЦелевойЭлемент, "maintable")}
		var НоваяФормаОбъекта = new ФормаОбъекта({
			ШаблонФормы: "mdname",
			ОсновнаяТаблица: ОсновнаяТаблица,
			Владелец: ЭтаФорма
		})	
		if(НоваяФормаОбъекта){
			if(ЭтаФорма.ОбработчикЗаписиОбъекта){
				НоваяФормаОбъекта.ОбработчикЗаписиОбъекта = ЭтаФорма.ОбработчикЗаписиОбъекта;
			}
			if(ЭтаФорма.ОбработчикЗаполненияОбъекта){
				НоваяФормаОбъекта.ОбработчикЗаполненияОбъекта = ЭтаФорма.ОбработчикЗаполненияОбъекта;
			}
			НоваяФормаОбъекта.Инициализировать(Параметры);
		}
	} else if((Параметры && Параметры.ОбработкаОткрытия) || ЭтаФорма.РежимВыбора === Ложь){
		// Открытие формы существующего объекта
		if(ЭтаФорма.ТекущаяСтрока && АтрибутЭлементаHTML(ЭтаФорма.ТекущаяСтрока, 'ref')){
			if(ЭтаФорма.ОсновнаяТаблица){var ОсновнаяТаблица = ЭтаФорма.ОсновнаяТаблица}else{var ОсновнаяТаблица = АтрибутЭлементаHTML(ЭтаФорма.ЦелевойЭлемент, "maintable")}
			var НоваяФормаОбъекта = new ФормаОбъекта({
				ШаблонФормы: 'mdname',
				ОсновнаяТаблица: ОсновнаяТаблица,
				ОбъектСсылка: АтрибутЭлементаHTML(ЭтаФорма.ТекущаяСтрока, 'ref'),
				Владелец: ЭтаФорма
			})
		}
		if(НоваяФормаОбъекта){
			if(Параметры.ШаблонФормы){
				НоваяФормаОбъекта.ШаблонФормы = Параметры.ШаблонФормы;
			}
			if(ЭтаФорма.ОбработчикЗаписиОбъекта){
				НоваяФормаОбъекта.ОбработчикЗаписиОбъекта = ЭтаФорма.ОбработчикЗаписиОбъекта;
			}
			if(ЭтаФорма.ОбработчикЗаполненияОбъекта){
				НоваяФормаОбъекта.ОбработчикЗаполненияОбъекта = ЭтаФорма.ОбработчикЗаполненияОбъекта;
			}
			НоваяФормаОбъекта.Инициализировать(Параметры);
		}
	}
	return НоваяФормаОбъекта;
}

ФормаСписка.prototype.ПриПрокрутке = function(Событие){
	var ЭтаФорма = this;
	if(ЭтаФорма.Тип === 'ФормаСписка'){ // Подгрузка строк работает только для формы списка, для выпадающего списка не применяется
		if(СодержитКласс(ЭтаФорма.КорневойЭлементHTMLТаблицы, 'fixed-header')){
			// Это список с фиксированной высотой, ориентируемся на высоту тела таблицы
			var ТелоТаблицы = ЭтаФорма.КорневойЭлементHTMLТаблицы.tBodies[0];
			if(ТелоТаблицы){
				if(ТелоТаблицы.scrollTop === (ТелоТаблицы.scrollHeight - ТелоТаблицы.clientHeight)){
					ЭтаФорма.ЗагрузитьСтраницу();
				}
			}
		}else{
			// Неограниченный по высоте список, ориентируемся на высоту экрана
			var ЭлементHTMLКонтейнер = ЭтаФорма.ЭлементHTMLКонтейнер;
			if(ЭлементHTMLКонтейнер){
				if(ЭлементHTMLКонтейнер.scrollTop === (ЭлементHTMLКонтейнер.scrollHeight - ЭлементHTMLКонтейнер.clientHeight)){
					ЭтаФорма.ЗагрузитьСтраницу();
				}
			}
		}
	}
}

// Установка активной строки формы списка
ФормаСписка.prototype.УстановитьТекущуюСтроку = function(ТекущаяСтрокаПараметр, ПредыдущаяТекущаяСтрока, Элемент, УстанавливатьФокус){
	var ЭтаФорма = this;
	var НоваяТекущаяСтрока = Неопределено;
	if(ТекущаяСтрокаПараметр || ТекущаяСтрокаПараметр === 0){
		if(typeof ТекущаяСтрокаПараметр === 'number'){
			// Передан индекс строки
			НоваяТекущаяСтрока = ЭтаФорма.ПолучитьСтрокуПоИндексу(ТекущаяСтрокаПараметр);
		}else if(ТекущаяСтрокаПараметр.toString() === '[object HTMLTableRowElement]'){
			// В качестве новой строки передан элемент-строка таблицы
			НоваяТекущаяСтрока = ТекущаяСтрокаПараметр;
		}else if(ЭтоСсылка(ТекущаяСтрокаПараметр)){
			// Передана ссылка на объект, соответствующий строке. Необходимо найти строку, содержащую объект.
			НоваяТекущаяСтрока = ЭтаФорма.ЭлементHTMLКонтейнер.querySelector('tr[ref="' + ТекущаяСтрокаПараметр.Ссылка + '"]');
		}else if(typeof ТекущаяСтрокаПараметр === 'string'){
			// Возможно, передана ссылка на в виде строки.
			НоваяТекущаяСтрока = ЭтаФорма.ЭлементHTMLКонтейнер.querySelector('tr[ref="' + ТекущаяСтрокаПараметр + '"]');
		}
	}
	if(!НоваяТекущаяСтрока) return; // Новая активная строка не определена
	if((ЭтаФорма.ТекущаяСтрока && ЭтаФорма.ТекущаяСтрока === НоваяТекущаяСтрока) && (Элемент && !Элемент.classList.contains('ListFormTreeIconTD'))) return; // Активная строка не изменилась и это не клик по ячейке сворачивания/разворачивания подчиненных строк
	СменитьАктивнуюСтрокуТаблицыФормы(ЭтаФорма, НоваяТекущаяСтрока);
	ЭтаФорма.ТекущаяСтрока = НоваяТекущаяСтрока;
	if(ЭтаФорма.Тип === 'ФормаСписка'){
		if(АтрибутЭлементаHTML(ЭтаФорма.ТекущаяСтрока, 'tabindex') === null){
			ЭтаФорма.ТекущаяСтрока.setAttribute('tabindex', '0');
		}
	}
	if(УстанавливатьФокус){
		// Не всегда надо устанавливать фокус на текущую строку, например, при загрузке страницы списка,
		// в этом случае список пролшистывается вверх. Принудительная установка фокуса на текущую строку будет опциональной.
		ЭтаФорма.ТекущаяСтрока.focus();
	}
	if(ЭлементHTMLВВидимойОбластиОкна(ЭтаФорма.ТекущаяСтрока) === Ложь){
		ПрокруткаДоПозицииЭлемента(ЭтаФорма.ТекущаяСтрока);
	}
	ЭтаФорма.ПриАктивизацииСтроки();
	if(Элемент && Элемент.classList.contains("ListFormTreeIconTD")){
		// !!!!! Необходимо передавать в 1С признак клика по иконке разворачивания/сворачивания строки.
		ЭтаФорма.Загрузить();
	}
}

ФормаСписка.prototype.СсылкаВТекущейСтроке = function(ИндексСтроки){
	var ЭтаФорма = this;
	var Ссылка = Неопределено;
	if(ЭтаФорма.ТекущаяСтрока){
		Ссылка = АтрибутЭлементаHTML(ЭтаФорма.ТекущаяСтрока, 'ref'); 
	}
	return Ссылка;
}

// Получение строки списка по индексу
ФормаСписка.prototype.ПолучитьСтрокуПоИндексу = function(ИндексСтроки){
	var ЭтаФорма = this;
	if(ЭтаФорма.КорневойЭлементHTMLТаблицы && ЭтаФорма.КорневойЭлементHTMLТаблицы.nodeName.toLowerCase() === "table" && ЭтаФорма.КорневойЭлементHTMLТаблицы.tBodies[0]){
		return ЭтаФорма.КорневойЭлементHTMLТаблицы.tBodies[0].rows[ИндексСтроки];
	}
}

// Возвращет количество строк списка
ФормаСписка.prototype.КоличествоСтрок = function(){
	var ЭтаФорма = this;
	if(ЭтаФорма.КорневойЭлементHTMLТаблицы && ЭтаФорма.КорневойЭлементHTMLТаблицы.nodeName.toLowerCase() === "table" && ЭтаФорма.КорневойЭлементHTMLТаблицы.tBodies[0]){
		return ЭтаФорма.КорневойЭлементHTMLТаблицы.tBodies[0].rows.length;
	}	
}

// Возврат индекса текущей строки
ФормаСписка.prototype.ИндексТекущейСтроки = function(){
	var ЭтаФорма = this;
	if(ЭтаФорма.ТекущаяСтрока){
		var ИндексСтроки = ЭтаФорма.ТекущаяСтрока.rowIndex;
		return ИндексСтроки - 1;
	}
	return null;
}

// Перевод курсора с активной строки на строку выше
ФормаСписка.prototype.ТекущаяСтрокаВверх = function(){
	var ЭтаФорма = this;
	if(ЭтаФорма.ТекущаяСтрока){
		ЭтаФорма.УстановитьТекущуюСтроку(Math.max(ЭтаФорма.ИндексТекущейСтроки() - 1, 0), Неопределено, Неопределено, Истина);
	}else{
		// Нет активной строки, устанавливаем активной первую
		ЭтаФорма.УстановитьТекущуюСтроку(0, Неопределено, Неопределено, Истина);
	}
}

// Перевод курсора с активной строки на строку ниже
ФормаСписка.prototype.ТекущаяСтрокаВниз = function(){
	var ЭтаФорма = this;
	if(ЭтаФорма.ТекущаяСтрока){
		ЭтаФорма.УстановитьТекущуюСтроку(Math.min(ЭтаФорма.ИндексТекущейСтроки() + 1, ЭтаФорма.КоличествоСтрок() - 1), Неопределено, Неопределено, Истина);
	}else{
		// Нет активной строки, устанавливаем активной первую
		ЭтаФорма.УстановитьТекущуюСтроку(0, Неопределено, Неопределено, Истина);
	}
}

// Возвращает текущий заголовок формы
ФормаСписка.prototype.Заголовок = function(){
	var ЭтаФорма = this;
	if(ЭтаФорма.Элементы && ЭтаФорма.Элементы.Заголовок){
		return ЭтаФорма.Элементы.Заголовок.innerHTML;
	}else{
		return Неопределено;
	}
}

// Устанавливает новый заголовок формы и возвращает его. Если у формы нет элемента с заголовком, то возвращает null.
ФормаСписка.prototype.УстановитьЗаголовок = function(НовыйЗаголовок){
	var ЭтаФорма = this;
	if(ЭтаФорма.Элементы && ЭтаФорма.Элементы.Заголовок){		
		ЭтаФорма.Элементы.Заголовок.innerHTML = НовыйЗаголовок;
		return ЭтаФорма.Элементы.Заголовок.innerHTML;
	}else{
		return Неопределено;
	}
}

ФормаСписка.prototype.Обновить = function(ПараметрыОтображения){
	var ЭтаФорма = this;
	if(ЭтаФорма.Элементы.Кнопки.Обновить){
		ЭтаФорма.Элементы.Кнопки.Обновить.disabled = Истина;
	}
	var Параметры = {};
	if(ЭтаФорма.ТекущаяСтрока && АтрибутЭлементаHTML(ЭтаФорма.ТекущаяСтрока, "ref")){
		// Восстановим текущую строку после загрузки
		ЭтаФорма.ДополнительныеСвойства.УстановитьТекущуюСтроку = АтрибутЭлементаHTML(ЭтаФорма.ТекущаяСтрока, "ref");
	}
	ЭтаФорма.Загрузить(Параметры, ПараметрыОтображения);
}

ФормаСписка.prototype.ПоискВыполнить = function(){
	var ЭтаФорма = this;
	ЭтаФорма.Загрузить();
	/*
	if(ЭтаФорма.Элементы && ЭтаФорма.Элементы.Поиск.ПолеВвода){
		var Параметры = {};
		Параметры.ПоискПоСтроке_Значение = ЭтаФорма.Элементы.Поиск.ПолеВвода.value;
		if(АтрибутЭлементаHTML(ЭтаФорма.Элементы.Поиск.ПолеВвода, 'search_attrs')){
			Параметры.ПоискПоСтроке_Поля = АтрибутЭлементаHTML(ЭтаФорма.Элементы.Поиск.ПолеВвода, 'search_attrs');
		}
	}
	*/
}

ФормаСписка.prototype.ПоискОчистить = function(){
	var ЭтаФорма = this;
	if(ЭтаФорма.Элементы && ЭтаФорма.Элементы.Поиск.ПолеВвода){
		ЭтаФорма.Элементы.Поиск.ПолеВвода.value = '';
		ЭтаФорма.ПоискВыполнить();
	}
}

// Событие после загрузки содержимого формы
ФормаСписка.prototype.ПослеЗагрузки = function(){
}

// Событие активизации строки
ФормаСписка.prototype.ПриАктивизацииСтроки = function(){
}

// Событие при нажатии на строку
ФормаСписка.prototype.ПриНажатии = function(ЭлементСтрока, ИсточникСобытия){
}

// Событие закрытия формы
ФормаСписка.prototype.ПриЗакрытии = function(){
}

// Событие при загрузке формы списка
function ФормаСпискаПриЗагрузке(ИдентификаторФормы){
	if(ГлобальныйКонтекст.Формы[ИдентификаторФормы]){
		ГлобальныйКонтекст.Формы[ИдентификаторФормы].ПриЗагрузке();
	}
}

// Обработка события загрузки у строки с кэшируемыми подчиненными строками
function ФормаСпискаПриЗагрузкеКэшированнойСтроки(activeRow){
	activeRow.setAttribute("cached-rows", "loaded");
	activeRow.setAttribute("expanded", "true");
	ДобавитьКлассHTMLЭлементу(activeRow.getElementsByClassName('ListFormTreeIconTD')[0], 'Expanded');
}

function rowLevel(ListFormIconTDElem){
	var rowLevel=0;
	for (var i = 0; i < ListFormIconTDElem.classList.length; i++) {
		var classElem = ListFormIconTDElem.classList[i];
		if(classElem.substr(0, 5)==='level'){
			rowLevel = Number(classElem.substr(5));
			return rowLevel;
		}
	}
	return rowLevel;
}

// Обработка события сворачивания у строки с кэшируемыми подчиненными строками
function ФормаСпискаСвернутьКэшируемуюСтроку(activeRow){
	// Отображение активной строки
	activeRow.setAttribute("cached-rows", "hidden");
	activeRow.setAttribute("expanded", "");
	УдалитьКлассHTMLЭлемента(activeRow.getElementsByClassName('ListFormTreeIconTD')[0], 'Expanded');
	// Скрытие подчиненных строк
	var currentLevel = rowLevel(activeRow.getElementsByClassName('ListFormIconTD')[0]);
	nextElem = activeRow.nextElementSibling;
	while(true){
		if(nextElem.tagName ==="TR"){
			nextElemLevel = rowLevel(nextElem.getElementsByClassName('ListFormIconTD')[0]);
			if(nextElemLevel > currentLevel){
				// Это подчиненная строка
				nextElem.style.display = 'none';
				nextElem.setAttribute("expanded", "");
				nextElem.setAttribute("cached-rows", "hidden");
				УдалитьКлассHTMLЭлемента(nextElem.getElementsByClassName('ListFormTreeIconTD')[0], 'Expanded');
			}else{
				// Подчиненные строки закончились
				break;
			}
		}else{
			// Перебрали все строки
			break;
		}
		nextElem = nextElem.nextElementSibling;
	}
}

// Обработка события разворачивания у строки с кэшируемыми подчиненными строками
function ФормаСпискаРазвернутьКэшируемуюСтроку(activeRow){
	// Отображение активной строки
	activeRow.setAttribute("cached-rows", "loaded");
	activeRow.setAttribute("expanded", "true");
	ДобавитьКлассHTMLЭлементу(activeRow.getElementsByClassName('ListFormTreeIconTD')[0], 'Expanded');
	// Отображение подчиненных строк
	var currentLevel = rowLevel(activeRow.getElementsByClassName('ListFormIconTD')[0]);
	var nextElem = activeRow.nextElementSibling;
	var parentExpanded = "true";
	while(Истина){
		if(nextElem.tagName ==="TR"){
			nextElemLevel = rowLevel(nextElem.getElementsByClassName('ListFormIconTD')[0]);
			if(nextElemLevel > currentLevel){
				if(nextElemLevel === currentLevel + 1){
					// Это подчиненная строка
					nextElem.style.display = '';
				}
			}else{
				// Подчиненные строки закончились
				break;
			}
		}else{
			// Перебрали все строки
			break;
		}
	nextElem = nextElem.nextElementSibling;
	}
}

function СменитьАктивнуюСтрокуТаблицыФормы(ЭтаФорма, НоваяТекущаяСтрока){
	var МассивЭлементов = ЭтаФорма.КорневойЭлементHTMLТаблицы.querySelectorAll('[isactiverow="true"]');
	for(var Счетчик = 0, Количество = МассивЭлементов.length; Счетчик < Количество; Счетчик++){
		УдалитьАтрибутЭлементаHTML(МассивЭлементов[Счетчик], 'isactiverow');
		УдалитьКлассHTMLЭлемента(МассивЭлементов[Счетчик], ГлобальныйКонтекст.КлассАктивнойСтроки);
	}
	// Устанавливаем  для новой активной строки признак активности
	if(НоваяТекущаяСтрока){
		УстановитьАтрибутЭлементаHTML(НоваяТекущаяСтрока, 'isactiverow', 'true');
		ДобавитьКлассHTMLЭлементу(НоваяТекущаяСтрока, ГлобальныйКонтекст.КлассАктивнойСтроки);
	}
}

//////////////////////////////////////////
// Класс "Произвольная форма            //
//////////////////////////////////////////

function ПроизвольнаяФорма(Параметры){
	var ЭтаФорма = this;
	ЭтаФорма.Тип = "ПроизвольнаяФорма";
	if(Параметры.Идентификатор === Неопределено){
		ЭтаФорма.Идентификатор = СлучайныйИдентификатор();
	}else{
		ЭтаФорма.Идентификатор = Параметры.Идентификатор;
	}
	ГлобальныйКонтекст.Формы[ЭтаФорма.Идентификатор] = ЭтаФорма;
	ЭтаФорма.СоздаватьИзШаблона = (Параметры.СоздаватьИзШаблона === Неопределено) ? Истина : Параметры.СоздаватьИзШаблона; // Истина - создавать форму списка из копии шаблона, иначе использовать сам шаблон.
	var ШаблонКорневогоЭлемента = ЭлементHTMLДокумента(Параметры.КорневойЭлемент);
	if(ЭтаФорма.СоздаватьИзШаблона){
		var ПроизвольнаяФормаНовыйЭлементHTML = ШаблонКорневогоЭлемента.cloneNode(Истина);
		ПроизвольнаяФормаНовыйЭлементHTML.Идентификатор = '';
		if(Параметры.ЭлементHTMLКонтейнер){
			// Указан родительский элемент для формы, размещаем ее в нем
			Параметры.ЭлементHTMLКонтейнер.appendChild(ПроизвольнаяФормаНовыйЭлементHTML);
		}else{
			// Размещаем форму там же, где лежит ее шаблон
			ШаблонКорневогоЭлемента.parentNode.insertBefore(ПроизвольнаяФормаНовыйЭлементHTML, ШаблонКорневогоЭлемента.nextSibling);
		}
		ЭтаФорма.КорневойЭлемент = ПроизвольнаяФормаНовыйЭлементHTML;
	}else{
		ЭтаФорма.КорневойЭлемент = ШаблонКорневогоЭлемента;
	}
	if(Параметры.СтильКорневогоЭлемента){
		// Параметры стиля корневого элемента
		for(param in Параметры.СтильКорневогоЭлемента){
			ЭтаФорма.КорневойЭлемент.style[param] = Параметры.СтильКорневогоЭлемента[param];
		};			
	}
	ЭтаФорма.ЭлементHTMLКонтейнер = ЭлементHTMLДокумента(Параметры.ЭлементHTMLКонтейнер);
	if(ЭтаФорма.ЭлементHTMLКонтейнер === Неопределено){
		ЭтаФорма.ЭлементHTMLКонтейнер = ЭтаФорма.КорневойЭлемент.parentNode;
	}	
	ЭтаФорма.ШаблонФормы = Параметры.ШаблонФормы;
	ЭтаФорма.ИмяФормы = Параметры.ИмяФормы;
	ЭтаФорма.Владелец = Параметры.Владелец;
	ЭтаФорма.ПодчиненныеФормы = new Array();	// Подчиненные формы
	ЭтаФорма.Элементы = {};
	ЭтаФорма.Элементы.Кнопки = {};
	ЭтаФорма.Элементы.Кнопки.Закрыть = Неопределено;
	ЭтаФорма.Элементы.Заголовок = Неопределено;
	ЭтаФорма.ДополнительныеСвойства = (Параметры.ДополнительныеСвойства === Неопределено) ? {} : Параметры.ДополнительныеСвойства; // Дополнительные произвольные свойства
	ЭтаФорма.РежимОткрытияОкна = (Параметры.РежимОткрытияОкна === Неопределено) ? РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс : Параметры.РежимОткрытияОкна;
	ЭтаФорма.ЗакрыватьПриНажатииНаПодложку = Параметры.ЗакрыватьПриНажатииНаПодложку;
	ЭтаФорма.РодительскаяФорма = (Параметры.РодительскаяФорма === Неопределено) ? Неопределено : Параметры.РодительскаяФорма; // Родительская форма
	if(ЭтаФорма.РодительскаяФорма && ЭтаФорма.РодительскаяФорма.hasOwnProperty("ПодчиненныеФормы")){
		// Назначим текущей форме родителя
		ЭтаФорма.РодительскаяФорма.ПодчиненныеФормы.push(ЭтаФорма);
	}
	ЭтаФорма.Объект = {};						// Данные формы
	ЭтаФорма.ПодчиненныеФормы = new Array();	// Подчиненные формы
	ЭтаФорма.Реквизиты = {};
	ЭтаФорма.ДанныеЭлементов = {};
	ЭтаФорма.Модифицированность = Ложь;			// Флаг модифицированности формы	
	ЭтаФорма.Инициализировать = function()
	{
		if(ЭтаФорма.КорневойЭлемент){						
			ЭтаФорма.КорневойЭлемент.onclick = function(Событие){
				var Событие = Событие || window.event;
				ГлобальныйКонтекст.УстановитьАктивнуюФорму(ЭтаФорма);
				Событие.stopPropagation();
			};
			ЭтаФорма.Элементы.Кнопки.Закрыть = НулевойЭлементКоллекции(ЭтаФорма.КорневойЭлемент, "closeBtn");
			if(ЭтаФорма.Элементы.Кнопки.Закрыть != null){
				ЭтаФорма.Элементы.Кнопки.Закрыть.onclick = function(){
					ЭтаФорма.ЗакрытьФорму();
				};
			}
		}	
		// Назначение полям ввода события изменения реквизита формы
		НазначитьЭлементамФормыСобытия(ЭтаФорма, ЭтаФорма.КорневойЭлемент);
		ЭтаФорма.ОткрытьФорму();
	}
}

// Открытие формы списка
ПроизвольнаяФорма.prototype.ОткрытьФорму = function(){
	var ЭтаФорма = this;
	if(ЭтаФорма.КорневойЭлемент){
		// z-index
		if(ЭтаФорма.Владелец && ЭтаФорма.Владелец.КорневойЭлемент && ЭтаФорма.Владелец.КорневойЭлемент.style.zIndex){
			ЭтаФорма.КорневойЭлемент.style.zIndex = Number(ЭтаФорма.Владелец.КорневойЭлемент.style.zIndex) + 1;
			if(ЭтаФорма.РежимОткрытияОкна === РежимОткрытияОкнаФормы.БлокироватьОкноВладельца || ЭтаФорма.РежимОткрытияОкна === РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс){
				// Предыдущий порядок оставляем для подложки
				ЭтаФорма.КорневойЭлемент.style.zIndex = Number(ЭтаФорма.КорневойЭлемент.style.zIndex) + 1;
			}
		}
		if(ЭтаФорма.РежимОткрытияОкна === РежимОткрытияОкнаФормы.БлокироватьОкноВладельца || ЭтаФорма.РежимОткрытияОкна === РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс){
			if(ЭтаФорма.Владелец && ЭтаФорма.Владелец.КорневойЭлемент && ЭтаФорма.Владелец.КорневойЭлемент.style.zIndex){
				var Порядок = Number(ЭтаФорма.Владелец.КорневойЭлемент.style.zIndex) + 1;
			}else{
				var Порядок = Неопределено;
			}
			ПодложкаМодальногоОкнаПоказать(ЭтаФорма.Идентификатор, Порядок);
		}		
		ЭтаФорма.КорневойЭлемент.style.display = 'block';
	}
	ЭтаФорма.ПриОткрытии();
}

// Закрытие формы списка
ПроизвольнаяФорма.prototype.ЗакрытьФорму = function(){
	var ЭтаФорма = this;
	// Закрытие формы
	ЭтаФорма.ПриЗакрытии();
	ЗакрытьЗависимыеФормы(ЭтаФорма);
	ГлобальныйКонтекст.ПриЗакрытииФормы(ЭтаФорма);
	if(ЭтаФорма.РодительскаяФорма){
		// Удалим текущую форму из массива подчиненных формы-родителя
		ЭтаФорма.РодительскаяФорма.ПодчиненныеФормы.splice(ЭтаФорма.РодительскаяФорма.ПодчиненныеФормы.indexOf(ЭтаФорма), 1);
	}	
	if (ЭтаФорма.СоздаватьИзШаблона === Истина){
		ЭтаФорма.КорневойЭлемент.parentNode.removeChild(ЭтаФорма.КорневойЭлемент)
	}else{
		ЭтаФорма.КорневойЭлемент.style.display = 'none';
	}
	if(ЭтаФорма.Элементы.Кнопки.Закрыть){ЭтаФорма.Элементы.Кнопки.Закрыть.onclick = Неопределено}
	ЭтаФорма.КорневойЭлемент.onclick = Неопределено;
	ИдентификаторФормы = ЭтаФорма.Идентификатор;
	ЭтаФорма = Неопределено;
	delete ГлобальныйКонтекст.Формы[ИдентификаторФормы];
}

// Событие открытия формы
ПроизвольнаяФорма.prototype.ПриОткрытии = function(ДополнительныеПараметры){
	var ЭтаФорма = this;
	ДополнительныеПараметры = (ДополнительныеПараметры === Неопределено) ? {} : ДополнительныеПараметры;	
	// Инициализация элементов формы и назначение им обработчиков	
	if(ЭтаФорма.КорневойЭлемент){						
		// Элементы формы
		ЭтаФорма.Элементы.Заголовок = НулевойЭлементКоллекции(ЭтаФорма.КорневойЭлемент, "formTitle");
		// Кнопки
		if(!ЭтаФорма.Элементы.Кнопки.Закрыть){
			// Кнопка закрытия могла быть инициализирована при открытии формы
			ЭтаФорма.Элементы.Кнопки.Закрыть  = НулевойЭлементКоллекции(ЭтаФорма.КорневойЭлемент, "cancelBtn");
			if(ЭтаФорма.Элементы.Кнопки.Закрыть){
				ЭтаФорма.Элементы.Кнопки.Закрыть.onclick = function(){ЭтаФорма.ЗакрытьФорму()};
			}			
		}
	}	
	ПодложкаМодальногоОкнаЗагружено(ЭтаФорма.Идентификатор);
	// Вызов обработчика "После открытия формы"
	ЭтаФорма.ПослеОткрытия();
}

// Возвращает текущий заголовок формы
ПроизвольнаяФорма.prototype.Заголовок = function(){
	var ЭтаФорма = this;
	if(ЭтаФорма.Элементы && ЭтаФорма.Элементы.Заголовок){
		return ЭтаФорма.Элементы.Заголовок.innerHTML;
	}else{
		return null;
	}
}

// Устанавливает новый заголовок формы и возвращает его. Если у формы нет элемента с заголовком, то возвращает null.
ПроизвольнаяФорма.prototype.УстановитьЗаголовок = function(НовыйЗаголовок){
	var ЭтаФорма = this;
	if(ЭтаФорма.Элементы && ЭтаФорма.Элементы.Заголовок){		
		ЭтаФорма.Элементы.Заголовок.innerHTML = НовыйЗаголовок;
		return ЭтаФорма.Элементы.Заголовок.innerHTML;
	}else{
		return null;
	}
}

ПроизвольнаяФорма.prototype.ПриИзменении = function(СобытиеИлиЭлемент){
	var ЭтаФорма = this;
	Форма_ПриИзменении(ЭтаФорма, СобытиеИлиЭлемент);
}

// Событие очистки реквизита формы
ПроизвольнаяФорма.prototype.ОчиститьПолеВвода = function(Элемент){
	var ЭтаФорма = this;
	ОчиститьПолеВвода(Элемент);
	ЭтаФорма.ПриИзменении(Элемент);
}

// Событие набора текста в реквизите
ПроизвольнаяФорма.prototype.ИзменениеТекстаРедактирования = function(Событие){
	var ЭтаФорма = this;
	ИзменениеТекстаРедактирования(ЭтаФорма, Событие);
}

// Устанавливает новый флаг модифицированности формы и возвращает его.
ПроизвольнаяФорма.prototype.УстановитьМодифицированность = function(ФлагМодифицированности){
	var ЭтаФорма = this;
	if(ЭтаФорма.Модифицированность === ФлагМодифицированности){
		// Флаг модифицированности не изменился
		return ЭтаФорма.Модифицированность;
	}
	ЭтаФорма.Модифицированность = ФлагМодифицированности;
	var ТекущийЗаголовок = ЭтаФорма.Заголовок();
	if(ЭтаФорма.Модифицированность === Истина){
		// Добавляем в заголовок звездочку
		ЭтаФорма.УстановитьЗаголовок(ТекущийЗаголовок + " *");
	}else{
		// Удаляем звездочку
		if(ТекущийЗаголовок && ТекущийЗаголовок.length > 2 && ТекущийЗаголовок.slice(-2) === " *"){
			ЭтаФорма.УстановитьЗаголовок(ТекущийЗаголовок.substr(ТекущийЗаголовок, ТекущийЗаголовок.length - 2));
		}
	}
	return ЭтаФорма.Модифицированность;
}

// Для элемента формы находит соответствующее ему значение в данных формы и возвращает его
ПроизвольнаяФорма.prototype.ЗначениеДанныхФормыЭлементаHTML = function(Элемент){
	var ЭтаФорма = this;
	var ИмяРеквизита = АтрибутЭлементаHTML(Элемент, "formdataname");
	if(ИмяРеквизита){
		if(ЭтаФорма.Объект.hasOwnProperty(ИмяРеквизита)){
			return ЭтаФорма.Объект[ИмяРеквизита];
		}
	}
	return null;
}

// Для элемента формы обновляет значение из данных формы
ПроизвольнаяФорма.prototype.УстановитьЗначениеЭлементаHTMLИзДанныхФормы = function(Элемент){
	var ЭтаФорма = this;
	var ИмяРеквизита = АтрибутЭлементаHTML(Элемент, "formdataname");
	if(ИмяРеквизита){
		if(ЭтаФорма.Объект.hasOwnProperty(ИмяРеквизита)){
			ЭтаФорма.УстановитьЗначениеЭлементаHTML(ИмяРеквизита, ЭтаФорма.Объект[ИмяРеквизита]);
		}
	}
}

// Изменение значения реквизита и обновление отображения данных формы
// Сначала устанавливается значение элемента html, а потом - соответствующих ему данных формы
ПроизвольнаяФорма.prototype.УстановитьЗначениеДанныхФормы = function(ИмяРеквизита, ЗначениеРеквизита, НеИнициироватьСобытиеПриИзменении){
	var ЭтаФорма = this;
	УстановитьЗначениеДанныхФормы(ЭтаФорма, ИмяРеквизита, ЗначениеРеквизита, НеИнициироватьСобытиеПриИзменении);
}

// Изменение значения реквизита и обновление отображения данных формы
// Сначала устанавливается значение данных формы, потом оно копируется в значение соответствующего элемента html
ПроизвольнаяФорма.prototype.УстановитьЗначениеРеквизита = function(ИмяРеквизита, ЗначениеРеквизита, НеИнициироватьСобытиеПриИзменении){
	var ЭтаФорма = this;
	УстановитьЗначениеРеквизитаФормы(ЭтаФорма, ИмяРеквизита, ЗначениеРеквизита, НеИнициироватьСобытиеПриИзменении);
}

// Обновление значения элемента формы
ПроизвольнаяФорма.prototype.УстановитьЗначениеЭлементаHTML = function(ИмяРеквизита, ЗначениеРеквизита){
	var ЭтаФорма = this;
	var Элемент = ЭтаФорма.КорневойЭлемент.querySelectorAll('[formdataname="' + ИмяРеквизита + '"]')[0];
	УстановитьЗначениеЭлементаHTML(Элемент, ЗначениеРеквизита);
}

// Заполнение реквизитов объекта формы из соотвесттвующих свойств источника
ПроизвольнаяФорма.prototype.ЗаполнитьЗначенияСвойств = function(Источник){
	var ЭтаФорма = this;
	for(Ключ in Источник){
		var Значение = Источник[Ключ];
		if(ЭтаФорма.Объект.hasOwnProperty(Ключ)){
			ЭтаФорма.УстановитьЗначениеРеквизита(Ключ, Значение, Истина);
		}
	}		
}

// Загрузка данных в форму
ПроизвольнаяФорма.prototype.Загрузить = function(Параметры){
	var ЭтаФорма = this;
	if(ЭтаФорма.РежимОткрытияОкна === РежимОткрытияОкнаФормы.БлокироватьОкноВладельца || ЭтаФорма.РежимОткрытияОкна === РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс){
		if(ЭтаФорма.Владелец && ЭтаФорма.Владелец.КорневойЭлемент && ЭтаФорма.Владелец.КорневойЭлемент.style.zIndex){
			var Порядок = Number(ЭтаФорма.Владелец.КорневойЭлемент.style.zIndex) + 1;
		}else{
			var Порядок = Неопределено;
		}
		ПодложкаМодальногоОкнаПоказать(ЭтаФорма.Идентификатор, Порядок);
	}
	Параметры = (Параметры === Неопределено) ? {} : Параметры;
	ПеременнуюВКлючСтруктуры(Параметры, "formTemplate", ЭтаФорма.ШаблонФормы);
	ПеременнуюВКлючСтруктуры(Параметры, "formName", ЭтаФорма.ИмяФормы);
	// Флаг асинхронной загрузки
	var АсинхронныйВызов = Истина; // По умолчанию делается асинхронный вызов
	if(Параметры.hasOwnProperty("АсинхронныйВызов")){
		АсинхронныйВызов = Параметры.АсинхронныйВызов;
	}
	if(ЭтаФорма.ТабличныеЧасти){
		ПеременнуюВКлючСтруктуры(Параметры, "tabularSections", КодироватьКомпонентыURI(ЭтаФорма.ТабличныеЧасти));
	}
	if(ГлобальныйКонтекст.ИспользуетсяВИнтрасети){
		var link = ГлобальныйКонтекст.Коннектор1С.ПутьКБазе1С + '/v-can.site/execute';
		ПеременнуюВКлючСтруктуры(Параметры, "exec", КодироватьКомпонентыURI('КэнСайтСервер.ФормаОбъекта(ПараметрыЗапроса)'));		
	}else{
		var link = 'ajax/objectform.php';
	}
	// Добавление параметров запроса в данные формы
	var ДанныеHTMLФормы = new FormData();
	ПараметрыURLВДанныеHTMLФормы(ДанныеHTMLФормы, Параметры);
	var ЗапросHttp = НовыйЗапросHttp(); 
	if(ЗапросHttp){
		ЗапросHttp.open('post', link, АсинхронныйВызов); 
		ЗапросHttp.withCredentials = Истина;
		ЗапросHttp.onreadystatechange = function (){
			if(ЗапросHttp.readyState === 4){
				var ТелоОтветаHttp = ЗапросHttp.responseText;
				ТелоОтветаHttp = ТелоОтветаHttp.trim();
				if(ГлобальныйКонтекст.ИспользуетсяВИнтрасети){
					// !!!!! Добавить проверки на корректный ответ, сделать в виде отдельной функции, так как вызываться  будет из нескольких мест
					ТелоОтветаHttp = ТелоОтветаHttp.replace('<!--v-can.Status: OK-->', '');
					ТелоОтветаHttp = ТелоОтветаHttp.trim();					
				}
				ЭтаФорма.ПриЗагрузке(ТелоОтветаHttp);
			}
        } 
		ЗапросHttp.send(ДанныеHTMLФормы);
	}else{  
		{return null;}
	} 
}

// Событие загрузки данных формы
ПроизвольнаяФорма.prototype.ПриЗагрузке = function(ОтветHttpJSON){
	var ЭтаФорма = this;
	// Обработка полученного ответа
	try{
		var СтруктураОтвета = JSON.parse(ОтветHttpJSON);
		var ТелоОтветаHttp = СтруктураОтвета.ТекстФормы;
		var Объект = СтруктураОтвета.Объект;
		ЭтаФорма.Объект = JSON.parse(Объект);
		if(ЭтаФорма.Объект.Ссылка){
			ЭтаФорма.ОбъектСсылка = ЭтаФорма.Объект.Ссылка;
		}
	}catch(err){
		if(СтруктураОтвета && СтруктураОтвета.status){
			alert(СтруктураОтвета.status);
		}else{
			alert(ОтветHttpJSON);
		}
		if(ЭтаФорма && ЭтаФорма.Элементы && ЭтаФорма.Элементы.Кнопки){
			if(ЭтаФорма.Элементы.Кнопки.Записать){ЭтаФорма.Элементы.Кнопки.Записать.disabled = Ложь}
			if(ЭтаФорма.Элементы.Кнопки.Провести){ЭтаФорма.Элементы.Кнопки.Провести.disabled = Ложь}
			if(ЭтаФорма.Элементы.Кнопки.ЗаписатьИЗакрыть){ЭтаФорма.Элементы.Кнопки.ЗаписатьИЗакрыть.disabled = Ложь}		
		}
		return;
	}
	
	// Проверка корректности загрузки формы
	if(СтруктураОтвета && СтруктураОтвета.Статус){
		if(СтруктураОтвета.Статус === "OK"){
			// Форма загружена корректно. Снимаем флаг модифицированности.
			ЭтаФорма.УстановитьМодифицированность(Ложь);
		}else{
			// Ошибка. Форму не обновляем
			alert(СтруктураОтвета.Статус);
			return;
		}
	}
	
	// Конвертация текста формы в DOM
	// Очистка старого содержимого формы при повторной загрузке
	if(ЭтаФорма.КорневойЭлемент){
		ЭтаФорма.КорневойЭлемент.parentNode.removeChild(ЭтаФорма.КорневойЭлемент);
		ЭтаФорма.КорневойЭлемент = Неопределено;
	}
	// Создание элементов формы
	var ФормаHTML = document.createElement("div");
	ФормаHTML.insertAdjacentHTML("afterBegin", ТелоОтветаHttp.trim());
	ЭтаФорма.КорневойЭлемент = ЭтаФорма.ЭлементHTMLКонтейнер.appendChild(ФормаHTML.childNodes[0]);
	if(ЭтаФорма.КорневойЭлемент.style.position = 'absolute'){
		ЭтаФорма.КорневойЭлемент.style.top = '' + getScrollTop() + 'px';
		// z-index
		if(ЭтаФорма.Владелец && ЭтаФорма.Владелец.КорневойЭлемент && ЭтаФорма.Владелец.КорневойЭлемент.style.zIndex){
			ЭтаФорма.КорневойЭлемент.style.zIndex = Number(ЭтаФорма.Владелец.КорневойЭлемент.style.zIndex) + 1;
			if(ЭтаФорма.РежимОткрытияОкна === РежимОткрытияОкнаФормы.БлокироватьОкноВладельца || ЭтаФорма.РежимОткрытияОкна === РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс){
				// Предыдущий порядок оставляем для подложки
				ЭтаФорма.КорневойЭлемент.style.zIndex = Number(ЭтаФорма.КорневойЭлемент.style.zIndex) + 1;
			}
		}
	}
	delete ФормаHTML;
	
	// Данные элементов
	if(Object.keys(ЭтаФорма.ДанныеЭлементов).length === 0){
		// Данные элементов не инициализированы, создадим их из элементов формы с атрибутом formdataname
		var МассивЭлементов = ЭтаФорма.КорневойЭлемент.querySelectorAll('[formdataname]');
		for (var Счетчик = 0, Количество = МассивЭлементов.length; Счетчик < Количество; Счетчик++) {
			var ОболочкаЭлемента = ОболочкаЭлементаHTML(МассивЭлементов[Счетчик]);
			if(ОболочкаЭлемента && !ЭлементHTMLПринадлежитПодчиненнойФорме(ЭтаФорма, ОболочкаЭлемента)){
				ЭтаФорма.ДанныеЭлементов[АтрибутЭлементаHTML(МассивЭлементов[Счетчик], "formdataname")] = СвойстваЭлементаHTML(ОболочкаЭлемента);
			}
		}
		// Добавляем элементы, к которым не прикреплены данные формы (группы, декорации)
		var МассивЭлементов = ЭтаФорма.КорневойЭлемент.querySelectorAll('[formelemname]');
		for (var Счетчик = 0, Количество = МассивЭлементов.length; Счетчик < Количество; Счетчик++) {
			var ОболочкаЭлемента = ОболочкаЭлементаHTML(МассивЭлементов[Счетчик]);
			if(ОболочкаЭлемента && !ЭлементHTMLПринадлежитПодчиненнойФорме(ЭтаФорма, ОболочкаЭлемента)){
				if(ЭтаФорма.ДанныеЭлементов[АтрибутЭлементаHTML(МассивЭлементов[Счетчик], "formelemname")] === Неопределено){
					ЭтаФорма.ДанныеЭлементов[АтрибутЭлементаHTML(МассивЭлементов[Счетчик], "formelemname")] = СвойстваЭлементаHTML(ОболочкаЭлемента);
				}
			}
		}
	}

	// Изменение свойств элементов формы
	if(СтруктураОтвета.ИзмененныеЭлементы){
		var ИзмененныеЭлементы = JSON.parse(СтруктураОтвета.ИзмененныеЭлементы);
		ИзменитьСвойстваЭлементовФормы(ЭтаФорма, ИзмененныеЭлементы);
	}

	if(СтруктураОтвета.РеквизитыФормы){
		ЭтаФорма.Реквизиты = JSON.parse(СтруктураОтвета.РеквизитыФормы);
	}

	if(ЭтаФорма.ТабличныеЧасти){
		// Создание и инициализация форм табличных частей
		// Инициализируем их раньше элементов формы, чтоб не происходило двойного назначения обработчиков событий
		var ТабличныеЧасти = JSON.parse(ЭтаФорма.ТабличныеЧасти);
		for (var Счетчик = 0, Количество = ТабличныеЧасти.length; Счетчик < Количество; Счетчик++) {
			ЭтаФорма.ИнициализироватьТабличнуюЧасть(ТабличныеЧасти[Счетчик]);
		}
	}
	
	// Инициализация кнопок формы
	//ЭтаФорма.Элементы = {};
	ЭтаФорма.Элементы.Заголовок = НулевойЭлементКоллекции(ЭтаФорма.КорневойЭлемент, "formTitle");
	ЭтаФорма.Элементы.Кнопки = {};
	ЭтаФорма.Элементы.Кнопки.Записать  = НулевойЭлементКоллекции(ЭтаФорма.КорневойЭлемент, "saveBtn");
	ЭтаФорма.Элементы.Кнопки.ЗаписатьИЗакрыть  = НулевойЭлементКоллекции(ЭтаФорма.КорневойЭлемент, "saveCloseBtn");
	ЭтаФорма.Элементы.Кнопки.Провести  = НулевойЭлементКоллекции(ЭтаФорма.КорневойЭлемент, "postBtn");
	ЭтаФорма.Элементы.Кнопки.Закрыть = НулевойЭлементКоллекции(ЭтаФорма.КорневойЭлемент, "closeBtn");
	// События элементов формы
	if(ЭтаФорма.КорневойЭлемент){
		ЭтаФорма.КорневойЭлемент.onclick = function(Событие){
			var Событие = Событие || window.event;
			var ЭлементСобытия = Событие.ЭлементСобытия || Событие.target;
			if(ЭлементСобытия.tagName === "A" && АтрибутЭлементаHTML(ЭлементСобытия, "data-toggle") === "tab"){
				// Клик по вкладке формы
				ПереключитьВкладкуФормы(ЭлементСобытия);
			}
			ГлобальныйКонтекст.УстановитьАктивнуюФорму(ЭтаФорма);
			Событие.stopPropagation();
		};
		ЭтаФорма.КорневойЭлемент.ondblclick = function(Событие){
			var Событие = Событие || window.event;
			var ЭлементСобытия = Событие.ЭлементСобытия || Событие.target;
			СнятьВыделение();
		};
	}
	// Кнопки
	// Запись формы
	if(ЭтаФорма.Элементы.Кнопки.Записать != null){
		if(ЭтаФорма.ТолькоПросмотр()){
			ЭтаФорма.Элементы.Кнопки.Записать.disabled = Истина;
		}else{
			ЭтаФорма.Элементы.Кнопки.Записать.onclick = function(){
				ЭтаФорма.ОбработкаЗаписи();
			};
		}
	}
	// Запись и проведение
	if(ЭтаФорма.Элементы.Кнопки.Провести != null){
		if(ЭтаФорма.ТолькоПросмотр()){
			ЭтаФорма.Элементы.Кнопки.Провести.disabled = Истина;
		}else{
			ЭтаФорма.Элементы.Кнопки.Провести.onclick = function(){
				ЭтаФорма.ОбработкаЗаписи({postProcessing: Истина});
			};
		}
	}
	// Запись и закрытие формы
	if(ЭтаФорма.Элементы.Кнопки.ЗаписатьИЗакрыть != null){
		if(ЭтаФорма.ТолькоПросмотр()){
			ЭтаФорма.Элементы.Кнопки.ЗаписатьИЗакрыть.disabled = Истина;
		}else{
			ЭтаФорма.Элементы.Кнопки.ЗаписатьИЗакрыть.onclick = function(){
				ЭтаФорма.ОбработкаЗаписи({ЗакрытьПослеЗаписи: Истина}); // При записи и закрытии запрос к 1С обязательно синхронный, чтобы закрытие формы не произошло раньше ее обновления.
				//ЭтаФорма.ЗакрытьФорму();
			};
		}
	}
	// Закрытие формы
	if(ЭтаФорма.Элементы.Кнопки.Закрыть != null){
		ЭтаФорма.Элементы.Кнопки.Закрыть.onclick = function(){
			ЭтаФорма.ЗакрытьФорму();
		};
	}

	// События элементов
	НазначитьЭлементамФормыСобытия(ЭтаФорма, ЭтаФорма.КорневойЭлемент);

	// Делаем текущую форму активной
	ГлобальныйКонтекст.УстановитьАктивнуюФорму(ЭтаФорма);
	ПодложкаМодальногоОкнаЗагружено(ЭтаФорма.Идентификатор);
		
	// Вызов события "После загрузки формы"
	ЭтаФорма.ПослеЗагрузки();
}

ПроизвольнаяФорма.prototype.КонтекстныйВызовФункции = function(ИмяФункции, ИмяОбработчика, Параметры){
	var ЭтаФорма = this;
	Параметры = (Параметры === Неопределено) ? {} : Параметры;
	if(ЭтаФорма.Элементы.Кнопки.Записать){ЭтаФорма.Элементы.Кнопки.Записать.disabled = Истина}
	if(ЭтаФорма.Элементы.Кнопки.Провести){ЭтаФорма.Элементы.Кнопки.Провести.disabled = Истина}
	if(ЭтаФорма.Элементы.Кнопки.ЗаписатьИЗакрыть){ЭтаФорма.Элементы.Кнопки.ЗаписатьИЗакрыть.disabled = Истина}
	Параметры.КонтекстныйВызовФункции = Истина;
	Параметры.ИмяФункции = ИмяФункции;
	Параметры.ИмяОбработчика = ИмяОбработчика;
	Параметры.Объект = КодироватьКомпонентыURI(JSON.stringify(ЭтаФорма.Объект));
	Параметры.ДанныеЭлементов = КодироватьКомпонентыURI(JSON.stringify(ЭтаФорма.ДанныеЭлементов));
	Параметры.АсинхронныйВызов = Ложь;
	ЭтаФорма.Загрузить(Параметры);
 	//ЭтаФорма.УстановитьМодифицированность(Ложь);
}

ПроизвольнаяФорма.prototype.ТекущийЭлемент = function(Элемент){
	var ЭтаФорма = this;
	if(typeof Элемент  === 'string'){
		Элемент = ЭлементПоИмениДанныхФормы(ЭтаФорма, ЭтаФорма.КорневойЭлемент, Элемент);
	}
	Элемент.focus();
}

// Событие после открытия формы
ПроизвольнаяФорма.prototype.ПослеОткрытия = function(){
}

// Событие после загрузки формы
ПроизвольнаяФорма.prototype.ПослеЗагрузки = function(){
}

// Событие закрытия формы
ПроизвольнаяФорма.prototype.ПриЗакрытии = function(){
}

// Событие окончания редактирования элемента
ПроизвольнаяФорма.prototype.ПриИзмененииРеквизита = function(ЭлементРеквизита, ИмяРеквизита){
}


//////////////////////////////////////////
// Форма загрузки файлов на сервер      //
//////////////////////////////////////////

function ФормаОтправкиФайлов(Параметры) {
	var ЭтаФорма = this;
	if(typeof Параметры.Идентификатор === 'undefined'){
		ЭтаФорма.Идентификатор = СлучайныйИдентификатор();
	}else{
		ЭтаФорма.Идентификатор = Параметры.Идентификатор;
	}
	ГлобальныйКонтекст.Формы[ЭтаФорма.Идентификатор] = ЭтаФорма;
	ЭтаФорма.Владелец = Параметры.Владелец;
	ЭтаФорма.КорневойЭлемент = Параметры.КорневойЭлемент;	// Корневой элемент формы передачи файлов
	ЭтаФорма.АдресОтправки = Параметры.АдресОтправки;		// Адрес для передачи файлов
	ЭтаФорма.Отправлено = Ложь;      						// Флаг завершения передачи всех файлов
	ЭтаФорма.ВыполняетсяОтправкаВсехФайлов = Ложь;      	// Флаг выполнения процесса отправки всех файлов
	ЭтаФорма.ОтправлятьПоследовательно = Ложь; 				// Отправлять все файлы последовательно
	ЭтаФорма.ПараметрыОтправки = '';     					// Параметры отправки файлов
	ЭтаФорма.ДанныеОтправки = new Array();      			// Массив файлов, объектов "XMLHttpRequest"
	ЭтаФорма.ЭлементHTMLВыборФайла = ЭтаФорма.КорневойЭлемент.getElementsByClassName('FileTransferFileSelectInput')[0];			// Элемент input для выбора файлов
	ЭтаФорма.ЭлементHTMLВставкаИзБуфераОбмена = ЭтаФорма.КорневойЭлемент.getElementsByClassName('FileTransferPasteElem')[0];	// Элемент для вставки скриншотов
	ЭтаФорма.ЭлементHTMLСписокФайлов = ЭтаФорма.КорневойЭлемент.getElementsByClassName('FileTransferFileList')[0];				// Элемент - таблица со списком файлов	
	ЭтаФорма.ОтправлятьКакСтроку = (typeof Параметры.ОтправлятьКакСтроку === 'undefined') ? Истина : Параметры.ОтправлятьКакСтроку;		 // Перед отправкой считывать файл как строку. Необходимо при работе в интрасети.
	ЭтаФорма.ДополнительныеСвойства = (typeof Параметры.ДополнительныеСвойства === 'undefined') ? {} : Параметры.ДополнительныеСвойства; // Дополнительные произвольные свойства
	ЭтаФорма.Инициализировать = function()
	{
		if(ЭтаФорма.КорневойЭлемент){
			if(ЭтаФорма.КорневойЭлемент.onclick === null){
				ЭтаФорма.КорневойЭлемент.onclick = function(Событие){
					var Событие = Событие || window.event;
					var srcElement = Событие.srcElement || Событие.target;
					if(СодержитКласс(srcElement, 'FileTransferDeleteFileFromList')){
						// Клик по кнопке удаления файла из списка
						ЭтаФорма.УдалитьФайл(srcElement.id);
					}
				}
			};
		}
		var ПриПеретаскивании = function(Событие){
			Событие.stopPropagation();
			Событие.preventDefault();
		}
		//if(ЭтаФорма.КорневойЭлемент.ondrop === null){
			ЭтаФорма.КорневойЭлемент.ondrop = function(Событие){      // Событие перетаскивание файла
				if(!Событие.dataTransfer.files) return;
				Событие.stopPropagation();
				Событие.preventDefault();
				ЭтаФорма.ДобавитьФайлы(Событие.dataTransfer.files);   // Добавляем файлы к загрузке
			};
			ЭтаФорма.КорневойЭлемент.ondragenter = ПриПеретаскивании; // Событие при наведении указателя
			ЭтаФорма.КорневойЭлемент.ondragover = ПриПеретаскивании;  // Событие при покидании мыши области элемента
		//}
		if(ЭтаФорма.ЭлементHTMLВыборФайла.onchange === null){
			ЭтаФорма.ЭлементHTMLВыборФайла.onchange = function(Событие){
				ЭтаФорма.ДобавитьФайлы(Событие.srcElement.files); // Добавляем файлы к загрузке
			};
		}

		try {
			if(ЭтаФорма.ЭлементHTMLВставкаИзБуфераОбмена.onpaste === null){
				ЭтаФорма.ЭлементHTMLВставкаИзБуфераОбмена.onpaste = function(Событие){
					var ДанныеБуфераОбмена = Событие.clipboardData || window.clipboardData;
					if(ДанныеБуфераОбмена){
						Событие.preventDefault();
						var ЭлементыБуфераОбмена = ДанныеБуфераОбмена.files || ДанныеБуфераОбмена.items;
						if(ЭлементыБуфераОбмена){
							// Находим изображение
							for(var Счетчик = 0; Счетчик < ЭлементыБуфераОбмена.length; Счетчик++){
								if(ЭлементыБуфераОбмена[Счетчик].type.indexOf('image') != -1){
									// Добавляем файл к загрузке
									ЭтаФорма.ДобавитьФайлы(ЭлементыБуфераОбмена);
								}
							}
						}
						ЭтаФорма.ЭлементHTMLВставкаИзБуфераОбмена.InnerHTML = '';
					}else{
						//setTimeout(checkInput, 1);
					}
				}
			}
		} catch(e) {
			console.warn(e);
		}

	}
}

// Закрытие формы
ФормаОтправкиФайлов.prototype.ЗакрытьФорму = function(){
	var ЭтаФорма = this;
	ЭтаФорма.ПриЗакрытии();
	ЗакрытьЗависимыеФормы(ЭтаФорма);
	ГлобальныйКонтекст.ПриЗакрытииФормы(ЭтаФорма);
	if(ЭтаФорма.РодительскаяФорма){
		// Удалим текущую форму из массива подчиненных формы-родителя
		ЭтаФорма.РодительскаяФорма.ПодчиненныеФормы.splice(ЭтаФорма.РодительскаяФорма.ПодчиненныеФормы.indexOf(ЭтаФорма), 1);
	}
	ЭтаФорма.КорневойЭлемент.parentNode.removeChild(ЭтаФорма.КорневойЭлемент);
	/*
	if(ЭтаФорма.Элементы.Кнопки.ДобавитьСтроку){
		ЭтаФорма.Элементы.Кнопки.ДобавитьСтроку.onclick = Неопределено;
	}
	if(ЭтаФорма.Элементы.Кнопки.УдалитьСтроку){
		ЭтаФорма.Элементы.Кнопки.УдалитьСтроку.onclick = Неопределено;
	}
	ЭтаФорма.КорневойЭлемент.ondblclick = Неопределено;
	ЭтаФорма.КорневойЭлемент.onclick = Неопределено;
	*/
	ИдентификаторФормы = ЭтаФорма.Идентификатор;
	ЭтаФорма = Неопределено;
	delete ГлобальныйКонтекст.Формы[ИдентификаторФормы];
}

// Сброс объекта
ФормаОтправкиФайлов.prototype.Сброс = function(){
	var ЭтаФорма = this;
	// При повторной инициализации выполняем обнуление массивов файлов
	// !!!!! Здесь сначала необходимо останавливать передачу ранее отправленных, но еще не загруженных на сервер файлов, удалять transport'ы
	ЭтаФорма.ЭлементHTMLВыборФайла.value = '';
	ЭтаФорма.ДанныеОтправки = new Array();
	ЭтаФорма.Отправлено = Ложь;
	ЭтаФорма.ОбновитьСписокФайлов();
}

// Добавление файла в массив передаваемых файлов
ФормаОтправкиФайлов.prototype.ДобавитьФайлы = function(МассивФайлов){
	var ЭтаФорма = this;
	var ПараметрыДобавления = {};
	ЭтаФорма.ПриНачалеДобавления(ПараметрыДобавления);
	if(ПараметрыДобавления.Отказ){
		return;
	}
	if(ЭтаФорма.ЭлементHTMLВыборФайла.accept){
		// Есть ограничение по типу загружаемых файлов
		var МассивДоступныхТиповФайлов = ЭтаФорма.ЭлементHTMLВыборФайла.accept.toLowerCase().replaceAll(',', '').split('.');
		if(МассивДоступныхТиповФайлов[0] === ''){
			МассивДоступныхТиповФайлов = МассивДоступныхТиповФайлов.slice(1);
		}
	}
	for(var Счетчик = 0; Счетчик < МассивФайлов.length; Счетчик++){
		var Файл = МассивФайлов[Счетчик];
		var ФайлДобавлен = Истина;
		// Проверка ограничения по типам файлов
		if(ЭтаФорма.ЭлементHTMLВыборФайла.accept && МассивДоступныхТиповФайлов.indexOf(РасширениеФайла(Файл).toLowerCase()) === -1){
			ФайлДобавлен = Ложь;
			ЭтаФорма.ОтказПриДобавленииФайла(Файл);
		}		
		// Проверки на возможность добавления файла в список загрузки
		for(var j = 0; j < ЭтаФорма.ДанныеОтправки.length; j++){
			// Проверяем, не помещен ли уже файл в список загрузки
			if((Файл.name === ЭтаФорма.ДанныеОтправки[j].file.name) && (Файл.size === ЭтаФорма.ДанныеОтправки[j].file.size)){
				ФайлДобавлен = Ложь;
				break;
			}
		}
		if(ФайлДобавлен){
			var ДанныеОтправкиФайла = {};
			ДанныеОтправкиФайла.Идентификатор = СлучайныйИдентификатор();
			ДанныеОтправкиФайла.parent = ЭтаФорма;
			ДанныеОтправкиФайла.file	= Файл;
			if(Файл.name === ''){
				if(Файл.type === 'image/png'){
					ДанныеОтправкиФайла.fileName = 'clipboard_' + СлучайныйИдентификатор() + '.png';
				}
			}else{
				ДанныеОтправкиФайла.fileName = Файл.name;
			}
			ДанныеОтправкиФайла.fileSize		= Файл.size;
			ДанныеОтправкиФайла.fileType		= Файл.type;
			ДанныеОтправкиФайла.progress		= '';
			ДанныеОтправкиФайла.transportType	= '';
			ДанныеОтправкиФайла.Отправляется	= Ложь;
			ДанныеОтправкиФайла.Отправлено		= Ложь;
			ДанныеОтправкиФайла.transport		= null;
			ЭтаФорма.ДанныеОтправки.push(ДанныеОтправкиФайла);
		}
	}
	ЭтаФорма.ЭлементHTMLВыборФайла.value = null;
	ЭтаФорма.РасчетОбъемаОтправки();
	ЭтаФорма.ОбновитьСписокФайлов();
	ЭтаФорма.ПриДобавленииФайлов();
}

// Удаление файла из массива передаваемых файлов
ФормаОтправкиФайлов.prototype.УдалитьФайл = function(ИдентификаторФайла){
	var ЭтаФорма = this;
	for (var Счетчик = 0; Счетчик < ЭтаФорма.ДанныеОтправки.length; Счетчик++) {
		var ДанныеОтправкиФайла = ЭтаФорма.ДанныеОтправки[Счетчик];
		if(ДанныеОтправкиФайла.Идентификатор === ИдентификаторФайла){
			ЭтаФорма.ДанныеОтправки.splice(Счетчик, 1);
			ЭтаФорма.ОбновитьСписокФайлов();
			break;
		}
	}
	ЭтаФорма.РасчетОбъемаОтправки();
}

// Удаление всех файлов из массива передаваемых файлов
ФормаОтправкиФайлов.prototype.ОчиститьСписокФайлов = function(){
	var ЭтаФорма = this;
	while(ЭтаФорма.ДанныеОтправки.length > 0){
		ЭтаФорма.ДанныеОтправки.pop();
	}
	ЭтаФорма.ОбновитьСписокФайлов();
	ЭтаФорма.РасчетОбъемаОтправки();	
}

// Отображение списка файлов к загрузке
/* Новый дизайн
ФормаОтправкиФайлов.prototype.ОбновитьСписокФайлов = function(){
	var o = this;
	var FileTransferFileListElem = o.КорневойЭлемент.getElementsByClassName("FileTransferFileList")[0];
	var FileTransferFileDataTemplate = o.КорневойЭлемент.getElementsByClassName("FileTransferFileDataTemplate")[0].tBodies[0].innerHTML;
	var newHTML = "";
	o.ДанныеОтправки.forEach(function(ДанныеОтправкиФайла, i, arr) {
		var ДанныеОтправкиТекст = FileTransferFileDataTemplate;
		ДанныеОтправкиТекст = ДанныеОтправкиТекст.replace("#id#",		ДанныеОтправкиФайла.Идентификатор);
		ДанныеОтправкиТекст = ДанныеОтправкиТекст.replace("#ftdid#",	ДанныеОтправкиФайла.Идентификатор);
		ДанныеОтправкиТекст = ДанныеОтправкиТекст.replace("#fileName#",	ДанныеОтправкиФайла.fileName);
		ДанныеОтправкиТекст = ДанныеОтправкиТекст.replace("#fileSize#",	Math.floor(ДанныеОтправкиФайла.fileSize / 1024) + " кб");
		ДанныеОтправкиТекст = ДанныеОтправкиТекст.replace("#progress#",	(ДанныеОтправкиФайла.transport === null) ? "0%" : ДанныеОтправкиФайла.progress); // !!!!! ДанныеОтправкиФайла.progress - что это?
		newHTML = newHTML + ДанныеОтправкиТекст;
	})
	FileTransferFileListElem.innerHTML = newHTML;
}
*/
ФормаОтправкиФайлов.prototype.ОбновитьСписокФайлов = function(){
	var o = this;
	var FileTransferFileListElem = o.КорневойЭлемент.getElementsByClassName("FileTransferFileList")[0];
	var FileTransferFileDataTemplate = o.КорневойЭлемент.getElementsByClassName("FileTransferFileDataTemplate")[0].innerHTML;
	var newHTML = "";
	o.ДанныеОтправки.forEach(function(ДанныеОтправкиФайла, i, arr) {
		var ДанныеОтправкиТекст = FileTransferFileDataTemplate;
		ДанныеОтправкиТекст = ДанныеОтправкиТекст.replace("#id#",		ДанныеОтправкиФайла.Идентификатор);
		ДанныеОтправкиТекст = ДанныеОтправкиТекст.replace("#ftdid#",	ДанныеОтправкиФайла.Идентификатор);
		ДанныеОтправкиТекст = ДанныеОтправкиТекст.replace("#fileName#",	ДанныеОтправкиФайла.fileName);
		ДанныеОтправкиТекст = ДанныеОтправкиТекст.replace("#fileSize#",	Math.floor(ДанныеОтправкиФайла.fileSize / 1024) + " кб");
		ДанныеОтправкиТекст = ДанныеОтправкиТекст.replace("#progress#",	(ДанныеОтправкиФайла.transport === null) ? "0%" : ДанныеОтправкиФайла.progress); // !!!!! ДанныеОтправкиФайла.progress - что это?
		newHTML = newHTML + ДанныеОтправкиТекст;
	})
	FileTransferFileListElem.innerHTML = newHTML;
}

// Обновление информации о прогрессе загрузки файла
ФормаОтправкиФайлов.prototype.СостояниеОтправки = function(ИдентификаторОтправки, Событие){
	try {
		var ЭтаФорма = this;
		if(Событие === Неопределено){return};
		// Поиск ДанныеОтправки по идентификатору
		var ДанныеОтправкиФайла = Неопределено;
		ЭтаФорма.ДанныеОтправки.forEach(function(ДанныеОтправкиФайлаПоиск, i, arr) {
			if(ДанныеОтправкиФайлаПоиск.Идентификатор === ИдентификаторОтправки){
				ДанныеОтправкиФайла = ДанныеОтправкиФайлаПоиск;
			}
		})
		if(ДанныеОтправкиФайла){
			if(ДанныеОтправкиФайла.transportType === 'fetch'){
				// У fetch нет события прогресса, значит файл уже загружен полностью
				ДанныеОтправкиФайла.progress = '100 %';
			}
			if(ДанныеОтправкиФайла.transportType === 'xhr'){
				ДанныеОтправкиФайла.progress = Math.floor(Событие.loaded / Событие.total * 100)  + ' %';
			}
			ДанныеОтправкиФайла.progress = ДанныеОтправкиФайла.progress.replace('Infinity', '100');
			var progressElemArr = ЭтаФорма.КорневойЭлемент.querySelectorAll('tr[ftdid="' + ИдентификаторОтправки + '"] > td[class="FileTransferTable_Progress"]');
			progressElemArr[0].innerHTML = ДанныеОтправкиФайла.progress;
			if((ДанныеОтправкиФайла.transportType === 'xhr' && Событие.loaded === Событие.total) || (ДанныеОтправкиФайла.transportType === 'fetch')){
				ДанныеОтправкиФайла.Отправлено = Истина;
				ЭтаФорма.РасчетОбъемаОтправки();
				if(ЭтаФорма.ОтправлятьПоследовательно === Истина){
					// Отправляем следующий файл
					for (var i = 0; i < ЭтаФорма.ДанныеОтправки.length; i++) {
						if(ЭтаФорма.ДанныеОтправки[i].Отправлено != Истина){
							ЭтаФорма.ОтправитьФайл(i, ЭтаФорма.ПараметрыОтправки);
							break;
						}
					}
				}
			}
		}
	} catch (e) {
		console.warn(e);
	}
}

// Начало передачи файла
ФормаОтправкиФайлов.prototype.ОтправитьФайл = function(ДанныеОтправкиПараметр, ПараметрыОтправки, transportType){
	var ЭтаФорма = this;
	var ПараметрыПроверки = {};
	ЭтаФорма.ПередОтправкой(ПараметрыПроверки);
	if(ПараметрыПроверки.Отказ){
		return;
	}
	ЭтаФорма.ПараметрыОтправки = ПараметрыОтправки;
	if(typeof ДанныеОтправкиПараметр === 'number'){
		ДанныеОтправкиФайла = ЭтаФорма.ДанныеОтправки[ДанныеОтправкиПараметр];
	}else{
		ДанныеОтправкиФайла = ДанныеОтправкиПараметр;
	}
	if(ДанныеОтправкиФайла.Отправлено){
		// Файл уже был передан на сервер раньше
		return;
	}
	var АдресОтправки = ЭтаФорма.АдресОтправки;
	paramsArr = ОбязательныеПараметрыЗапросаК1С();
	if(typeof ЭтаФорма.ПараметрыОтправки === 'string'){
		var trParam = ЭтаФорма.ПараметрыОтправки.split("&").map(function (kv){
			return kv.split("=", 2);
		});
		for(ИмяПараметра in trParam){
			paramsArr[ИмяПараметра] = ДополнительныеПараметры[ИмяПараметра];
		};			
	}else if(typeof ЭтаФорма.ПараметрыОтправки === 'object'){
		for(ИмяПараметра in ЭтаФорма.ПараметрыОтправки){
			paramsArr[ИмяПараметра] = ЭтаФорма.ПараметрыОтправки[ИмяПараметра];
		};					
	}

	// Создание объекта транспорта файлов
	if(transportType === 'fetch'){
		try{
			ДанныеОтправкиФайла.transport = new Request(АдресОтправки);
			ДанныеОтправкиФайла.transportType = 'fetch';
			ДанныеОтправкиФайла.ОтправлятьКакСтроку = ЭтаФорма.ОтправлятьКакСтроку;
		}catch(e){
			// Транспорт через xhr, но без повторной отправки при ошибке
			// Вариант для админов-параноиков, когда первая отправка через xhr не проходит авторизацию, а fetch в браузере не поддерживается
			ДанныеОтправкиФайла.transport = new XMLHttpRequest();
			ДанныеОтправкиФайла.transport.Идентификатор = ДанныеОтправкиФайла.Идентификатор;
			ДанныеОтправкиФайла.transport.upload.Идентификатор = ДанныеОтправкиФайла.Идентификатор;
			ДанныеОтправкиФайла.transport.open('post', АдресОтправки, Истина);	
			ДанныеОтправкиФайла.transport.withCredentials = Истина;
			ДанныеОтправкиФайла.ОтправлятьКакСтроку = ЭтаФорма.ОтправлятьКакСтроку;
			ДанныеОтправкиФайла.transportType = 'xhr';
			ДанныеОтправкиФайла.transport.onload = function(e) {
				ЭтаФорма.СостояниеОтправки(e.srcElement.Идентификатор. e);
			};
			ДанныеОтправкиФайла.transport.upload.onprogress = function(e) {
				ЭтаФорма.СостояниеОтправки(e.srcElement.Идентификатор, e);
			};
		}
	}else{
		// По умолчанию отправка через xhr
		ДанныеОтправкиФайла.transport = new XMLHttpRequest();
		ДанныеОтправкиФайла.transport.Идентификатор = ДанныеОтправкиФайла.Идентификатор;
		ДанныеОтправкиФайла.transport.upload.Идентификатор = ДанныеОтправкиФайла.Идентификатор;
		ДанныеОтправкиФайла.transport.open('post', АдресОтправки, Истина);	
		ДанныеОтправкиФайла.transport.withCredentials = Истина;
		ДанныеОтправкиФайла.ОтправлятьКакСтроку = ЭтаФорма.ОтправлятьКакСтроку;
		ДанныеОтправкиФайла.transportType = 'xhr';
		ДанныеОтправкиФайла.transport.onload = function(e) {
			ЭтаФорма.СостояниеОтправки(e.srcElement.Идентификатор, e);
		};
		ДанныеОтправкиФайла.transport.upload.onprogress = function(e) {
			ЭтаФорма.СостояниеОтправки(e.srcElement.Идентификатор, e);
		};
		ДанныеОтправкиФайла.transport.onerror = function(e) {
			// Повторная отправка посредством fetch
			ДанныеОтправкиФайла.Отправлено = Ложь;
			ДанныеОтправкиФайла.parent.ОтправитьФайл(ДанныеОтправкиФайла, ДанныеОтправкиФайла.parent.ПараметрыОтправки, 'fetch');
		};
	}
	
	var ДанныеHTMLФормы = new FormData();
	if(ДанныеОтправкиФайла.ОтправлятьКакСтроку){
		var fReader = new FileReader();

		// Данная изолирующая функция решает проблему отправки файлов. Раньше в объекте "ДанныеОтправкиФайла" оставались данные
		// последней итерации цикла (т.е. объект хранил в себе информацию последнего файла в методе "ОтправитьВсе")
		var callbackFnIsolate = function (cfi_fReader, cfi_ДанныеОтправкиФайла, cfi_paramsArr, cfi_ДанныеHTMLФормы, cfi_ЭтаФорма, cfi_АдресОтправки) {
			return function (e) {
				ДанныеHTMLФормы.append('vcanupfile', encodeURIComponent(cfi_fReader.result));
				ДанныеHTMLФормы.append('vcanupfileasstring', 'true');
				ДанныеHTMLФормы.append('vcanupfilename', cfi_ДанныеОтправкиФайла.fileName);
				ДанныеHTMLФормы.append('vcanupfileid', cfi_ДанныеОтправкиФайла.Идентификатор);
				// Добавление параметров запроса в данные формы
				//paramsArr.forEach(function(item, i, arr) {
				for(var param in cfi_paramsArr){
					ДанныеHTMLФормы.append(param, cfi_paramsArr[param]);
				};
				// Отправка файла
				ОтправитьФайлВыполнить(cfi_ЭтаФорма, cfi_ДанныеОтправкиФайла, cfi_ДанныеHTMLФормы, cfi_АдресОтправки);
				/*
				if(ДанныеОтправкиФайла.transportType === 'xhr'){
					ДанныеОтправкиФайла.transport.send(ДанныеHTMLФормы);
				}
				if(ДанныеОтправкиФайла.transportType === 'fetch'){
					var transportHeaders = new Headers();
					var transportInit = {method: 'POST',
						headers: transportHeaders,
						body: ДанныеHTMLФормы,
						mode: 'no-cors',
						cache: 'no-cache'};
					ДанныеОтправкиФайла.transport = new Request(АдресОтправки, transportInit);				
					fetch(ДанныеОтправкиФайла.transport).then(function(response){
						return response;
					}).then(function(response){
						ЭтаФорма.СостояниеОтправки(ДанныеОтправкиФайла.Идентификатор, response);
					});
				}
				*/
			};
		};

		fReader.onloadend = callbackFnIsolate(fReader, ДанныеОтправкиФайла, paramsArr, ДанныеHTMLФормы, ЭтаФорма, АдресОтправки);
		fReader.readAsText(ДанныеОтправкиФайла.file, 'windows-1251', 'yes'); // !!!!! Кодировку передавать в параметрах объекта
	}else{
		ДанныеHTMLФормы.append('vcanupfile', ДанныеОтправкиФайла.file);
		ДанныеHTMLФормы.append('vcanupfilename', ДанныеОтправкиФайла.fileName);
		ДанныеHTMLФормы.append('vcanupfileid', ДанныеОтправкиФайла.Идентификатор);
		// Добавление параметров запроса в данные формы
		for(param in paramsArr){
			ДанныеHTMLФормы.append(param, paramsArr[param]);
		};
		ОтправитьФайлВыполнить(ЭтаФорма, ДанныеОтправкиФайла, ДанныеHTMLФормы, АдресОтправки);
		/*
		if(ДанныеОтправкиФайла.transportType === 'xhr'){
			ДанныеОтправкиФайла.transport.send(ДанныеHTMLФормы);
		}
		if(ДанныеОтправкиФайла.transportType === 'fetch'){
			var transportHeaders = new Headers();
			var transportInit = {method: 'POST',
				headers: transportHeaders,
				body: ДанныеHTMLФормы,
				mode: 'no-cors',
				cache: 'no-cache'};
			ДанныеОтправкиФайла.transport = new Request(АдресОтправки, transportInit);				
			fetch(ДанныеОтправкиФайла.transport).then(function(response){
				return response;
			}).then(function(response){
				o.СостояниеОтправки(ДанныеОтправкиФайла.Идентификатор, response);
			});
		}
		*/
	}
}

function ОтправитьФайлВыполнить(ЭтаФорма, ДанныеОтправкиФайла, ДанныеHTMLФормы, АдресОтправки){
	if(ДанныеОтправкиФайла.Отправляется){
		return;
	}
	ДанныеОтправкиФайла.Отправляется = Истина;
	if(ДанныеОтправкиФайла.transportType === 'xhr'){
		ДанныеОтправкиФайла.transport.send(ДанныеHTMLФормы);
	}
	if(ДанныеОтправкиФайла.transportType === 'fetch'){
		var transportHeaders = new Headers();
		var transportInit = {method: 'POST',
			headers: transportHeaders,
			body: ДанныеHTMLФормы,
			mode: 'no-cors',
			cache: 'no-cache'};
		ДанныеОтправкиФайла.transport = new Request(АдресОтправки, transportInit);				
		fetch(ДанныеОтправкиФайла.transport).then(function(response){
			return response;
		}).then(function(response){
			ЭтаФорма.СостояниеОтправки(ДанныеОтправкиФайла.Идентификатор, response);
		});
	}	
}

// Начало передачи всех файлов
ФормаОтправкиФайлов.prototype.ОтправитьВсе = function(ПараметрыОтправки, transportType){
	var ЭтаФорма = this;
	var ПараметрыПроверки = {};
	if(ЭтаФорма.ВыполняетсяОтправкаВсехФайлов){
		// Отправка всех файлов уже выполняется. Возможно, кнопка отправки нажата повторно.
		return;
	}
	ЭтаФорма.ПередОтправкой(ПараметрыПроверки);
	if(ПараметрыПроверки.Отказ){
		return;
	}
	ЭтаФорма.ОтправлятьПоследовательно = Истина;
	ЭтаФорма.ПараметрыОтправки = ПараметрыОтправки;
	if(ЭтаФорма.ДанныеОтправки.length > 0){
		for(var Счетчик = 0; Счетчик < ЭтаФорма.ДанныеОтправки.length; Счетчик++){
			if(ЭтаФорма.ДанныеОтправки[Счетчик].Отправлено != Истина && ЭтаФорма.ДанныеОтправки[Счетчик].Отправляется != Истина){
				ЭтаФорма.ВыполняетсяОтправкаВсехФайлов = Истина;
				ЭтаФорма.ОтправитьФайл(Счетчик, ПараметрыОтправки, transportType);
				// break;
			}
		}
	}
}

// Расчет количества переданных файлов и флага "Отправлено" формы
ФормаОтправкиФайлов.prototype.РасчетОбъемаОтправки = function(){
	var ЭтаФорма = this;
	var КоличествоОтправленных = 0;
	ЭтаФорма.ДанныеОтправки.forEach(function(ДанныеОтправкиФайлаПоиск, Счетчик, Массив) {
		if(ДанныеОтправкиФайлаПоиск.Отправлено){
			КоличествоОтправленных = КоличествоОтправленных + 1;
		}
	})
	if(КоличествоОтправленных >= ЭтаФорма.ДанныеОтправки.length && ЭтаФорма.ДанныеОтправки.length > 0){
		ЭтаФорма.Отправлено = Истина;
		ЭтаФорма.ВыполняетсяОтправкаВсехФайлов = Ложь;
		ЭтаФорма.ПослеОтправки();
	}else{
		ЭтаФорма.Отправлено = Ложь;
	}
}

// Событие перед добавлением файлов
ФормаОтправкиФайлов.prototype.ПриНачалеДобавления = function(ПараметрыПроверки){
}

// Событие добавления файлов в список
ФормаОтправкиФайлов.prototype.ПриДобавленииФайлов = function(){
}

// Событие отказа при добавлении файла в список
ФормаОтправкиФайлов.prototype.ОтказПриДобавленииФайла = function(Файл){
}

// Событие перед отправкой
ФормаОтправкиФайлов.prototype.ПередОтправкой = function(ПараметрыПроверки){
}

// Событие окончания отправки
ФормаОтправкиФайлов.prototype.ПослеОтправки = function(){
}

// Событие закрытия формы
ФормаОтправкиФайлов.prototype.ПриЗакрытии = function(){
}


//////////////////////////////////////////
// Система взаимодействия			    //
//////////////////////////////////////////

function ПолучитьНовыеСообщенияКонтекстногоОбсуждения(ЭлементСообщенияСистемыВзаимодействия, КонтекстОбсужденияПараметр, ПослеПараметр){
	if(!ЭлементСообщенияСистемыВзаимодействия){
		// Некуда помещать текст сообщений
		var Ответ = {};
		Ответ.МассивСообщений = [];
		Ответ.ТекстСообщений = '';
		return Ответ;
	}
	// Если  контекст обсуждения и "После" указаны в параметрах, то используем их.
	// Иначе получаем конеткст и "После" из ЭлементСообщенияСистемыВзаимодействия
	var КонтекстОбсуждения = '';
	var После = '';
	if(КонтекстОбсужденияПараметр){
		КонтекстОбсуждения = КонтекстОбсужденияПараметр;
	}else{
		// Контекст обсуждения указан в атрибуте ЭлементСообщенияСистемыВзаимодействия
		if(ЭлементСообщенияСистемыВзаимодействия && АтрибутЭлементаHTML(ЭлементСообщенияСистемыВзаимодействия, 'contextid')){
			КонтекстОбсуждения = АтрибутЭлементаHTML(ЭлементСообщенияСистемыВзаимодействия, 'contextid');
		}
	}
	if(ПослеПараметр){
		После = ПослеПараметр;
	}else{
		// В содержимом выбирается поседний элемент сообщения, берется его идентификатор
		var ПоследнееСообщениеЭлемент = ПоследнийЭлементКоллекции(ЭлементСообщенияСистемыВзаимодействия, 'CollaborationSystemMessage');
		if(ПоследнееСообщениеЭлемент){
			После = АтрибутЭлементаHTML(ПоследнееСообщениеЭлемент, 'messageid');
		}
	}
	// Параметры запроса к 1С
	var Параметры = {
		КонтекстОбсуждения: КонтекстОбсуждения
	};
	if(После){
		Параметры.После = После;
	}
	var ОтветHttp = ВыполнитьФункцию1С('КэнСайтСообщения.СообщенияКонтекстногоОбсуждения(ПараметрыЗапроса)', Параметры, Ложь);
	return JSON.parse(ОтветHttp);
}

function ОтправитьНовоеСообщениеКонтекстногоОбсуждения(ЭлементКнопка, Параметры){
	var КорневойЭлемент = ЭлементКнопка.parentNode;
	while(Истина){
		if(СодержитКласс(КорневойЭлемент, 'CollaborationSystemBlock')){
			break;
		}
	}
	var ЭлементСообщенияСистемыВзаимодействия = НулевойЭлементКоллекции(КорневойЭлемент, 'CollaborationSystemMessages');
	var НовоеСообщениеПолеВвода = НулевойЭлементКоллекции(КорневойЭлемент, 'CollaborationSystemNewMessage');
	Параметры.ТекстСообщения = НовоеСообщениеПолеВвода.innerText.trim();
	if(Параметры.ТекстСообщения){
		var ОтветHttp = ВыполнитьФункцию1С('КэнСайтСообщения.ОтправитьНовоеСообщениеКонтекстногоОбсуждения(ПараметрыЗапроса)', Параметры, Ложь);
		try{
			var СтруктураОтвета = JSON.parse(ОтветHttp);
			if(!СтруктураОтвета.БылиОшибки){
				// Сообщение отправлено успешно, обновим поле сообщений
				НовоеСообщениеПолеВвода.innerHTML = '';
				ПолучитьНовыеСообщенияКонтекстногоОбсуждения(ЭлементСообщенияСистемыВзаимодействия);
			}else{
				var ТекстОшибки = 'Сообщение не отправлено<br>';
				for(var Индекс=0; Индекс < СтруктураОтвета.МассивСообщений.length; Индекс++){
					ТекстОшибки = ТекстОшибки + СтруктураОтвета.МассивСообщений[Индекс] + '<br>'
				}
				Состояние(ТекстОшибки, СтатусСообщения.Важное);
			}
		}catch(err){
			Состояние('Ошибка при отправке сообщения<br>' + ОтветHttp, СтатусСообщения.Важное);
		}
	}else{
		Состояние('Текст сообщения не указан', СтатусСообщения.Внимание, 3);
	}
}


//////////////////////////////////////////
// Общие функции форм                   //
//////////////////////////////////////////

// Получить элемент формы по имени реквизита данных формы
function ЭлементПоИмениДанныхФормы(Форма, КорневойЭлемент, ИмяЭлемента){
	var НайденныйЭлемент = Неопределено;
	var МассивЭлементов = КорневойЭлемент.querySelectorAll('[formdataname="' + ИмяЭлемента + '"]');
	if(МассивЭлементов.length === 1){
		НайденныйЭлемент = МассивЭлементов[0];
	}else{
		// Попробуем найти по formelemname
		МассивЭлементов = КорневойЭлемент.querySelectorAll('[formelemname="' + ИмяЭлемента + '"]');
		if(МассивЭлементов.length === 1){
			НайденныйЭлемент = МассивЭлементов[0];
		}
	}
	if(НайденныйЭлемент && Форма.hasOwnProperty("ПодчиненныеФормы")){
		// Проверим, не принадлежит ли найденный элемент подчиненной форме
		if(ЭлементHTMLПринадлежитПодчиненнойФорме(Форма, НайденныйЭлемент)){
			НайденныйЭлемент = Неопределено;
		}
		/*
		for(ИндексФормы in Форма.ПодчиненныеФормы){
			var ПодчиненнаяФорма = Форма.ПодчиненныеФормы[ИндексФормы];
			if(ПодчиненнаяФорма.КорневойЭлемент){
				if(ПодчиненнаяФорма.КорневойЭлемент.contains(НайденныйЭлемент)){
					// Элемент принадлежит подчиненной форме
					НайденныйЭлемент = Неопределено;
				}
			}
		}
		*/
	}
	return НайденныйЭлемент;
}

// Для указанного элемента находит родителя-оболочку - элемент, у которого есть атрибут elemroot="true"
// Ищем родителя до определенного уровня.
// Если среди родителей таковых не найдено, то возвращается сам элемент.
function ОболочкаЭлементаHTML(Элемент){
	var НайденныйЭлемент = Элемент;
	var Счетчик = 1;
	while(Истина && Элемент && Счетчик <= 3){
		if(АтрибутЭлементаHTML(Элемент, 'elemroot') === 'true'){
			НайденныйЭлемент = Элемент;
			break;
		}else{
			Элемент = Элемент.parentElement;
		}
		Счетчик = Счетчик + 1;
	}
	return НайденныйЭлемент;
}

function СвойстваЭлементаHTML(Элемент){
	var СвойстваЭлемента = {
		ЭлементHTML: Неопределено,
		Заголовок: Неопределено,
		Видимость: Неопределено,
		Доступность: Неопределено,
		ТолькоПросмотр: Неопределено,
		ВидимостьСтиль: Неопределено
	};
	СвойстваЭлемента.ЭлементHTML = Элемент;
	СвойстваЭлемента.Заголовок = ЗаголовокЭлементаHTML(Элемент);
	СвойстваЭлемента.ВидимостьСтиль = window.getComputedStyle(Элемент).display;
	if(СвойстваЭлемента.ВидимостьСтиль === 'none'){
		СвойстваЭлемента.Видимость = Ложь;
	}else{
		СвойстваЭлемента.Видимость = Истина;
	}
	if(АтрибутЭлементаHTML.disabled){
		СвойстваЭлемента.ТолькоПросмотр = Истина;
		СвойстваЭлемента.Доступность = Ложь;
	}else{
		СвойстваЭлемента.ТолькоПросмотр = Ложь;
		СвойстваЭлемента.Доступность = Истина;
	}
	return СвойстваЭлемента;
}

function ЗаголовокЭлементаHTML(Элемент){
	var ОболочкаЭлемента = ОболочкаЭлементаHTML(Элемент);
	var ЗаголовокЭлемент = Неопределено;
	// Возможно, заголовок - это оболочка элемента (обычно это сам элемент)
	if(АтрибутЭлементаHTML(ОболочкаЭлемента, 'elemtitle') === 'true'){
		ЗаголовокЭлемент = ОболочкаЭлемента;
	}else{
		// Ищем подчиненный элемент с elemtitle="true"
		ЗаголовокЭлемент = ОболочкаЭлемента.querySelector('[elemtitle="true"]');
	}
	var Заголовок = "";
	if(ЗаголовокЭлемент){
		var ИмяТэга = ЗаголовокЭлемент.tagName.toLowerCase();
		if(ИмяТэга === 'label'){
			Заголовок = ЗаголовокЭлемент.innerHTML;
		}
	}
	return Заголовок;
}

function УстановитьЗаголовокЭлементаHTML(Элемент, ОболочкаЭлемента, Заголовок){
	if(Элемент){
		if(ОболочкаЭлемента === Неопределено){
			ОболочкаЭлемента = ОболочкаЭлементаHTML(Элемент);
		}
		var ЗаголовокЭлемент = Неопределено;
		// Возможно, заголовок - это оболочка элемента (обычно это сам элемент)
		if(АтрибутЭлементаHTML(ОболочкаЭлемента, 'elemtitle') === 'true'){
			ЗаголовокЭлемент = ОболочкаЭлемента;
		}else{
			// Ищем подчиненный элемент с elemtitle="true"
			ЗаголовокЭлемент = ОболочкаЭлемента.querySelector('[elemtitle="true"]');
		}
		if(ЗаголовокЭлемент){
			switch(ЗаголовокЭлемент.tagName.toLowerCase()){
			case 'label':
				ЗаголовокЭлемент.innerHTML = Заголовок;
				break;
			case 'div':
				ЗаголовокЭлемент.innerHTML = Заголовок;
				break;
			default:
			}	
		}	
	}
}

function ИзменитьСвойстваЭлементовФормы(Форма, ИзмененныеЭлементы){
	for(ИмяЭлемента in ИзмененныеЭлементы){
		var ДанныеЭлемента = ИзмененныеЭлементы[ИмяЭлемента];
		var Элемент = ЭлементПоИмениДанныхФормы(Форма, Форма.КорневойЭлемент, ИмяЭлемента);
		if(Элемент){// Проверяем наличие элемента на форме. Он мог быть скрыт и, соответственно, удален.
			var ОболочкаЭлемента = ОболочкаЭлементаHTML(Элемент);
			for(ИмяСвойства in ДанныеЭлемента){
				var Значение = ДанныеЭлемента[ИмяСвойства];
				УстановитьСвойствоЭлементаHTML(Элемент, ОболочкаЭлемента, ИмяСвойства, Значение, ДанныеЭлемента)
			}
		}
	}	
}

function УстановитьСвойствоЭлементаHTML(Элемент, ОболочкаЭлемента, ИмяСвойства, Значение, ДанныеЭлемента){
	if(ОболочкаЭлемента === Неопределено){
		ОболочкаЭлемента = ОболочкаЭлементаHTML(Элемент);
	}
	switch(ИмяСвойства.toLowerCase()){
	case 'заголовок':
		УстановитьЗаголовокЭлементаHTML(Элемент, ОболочкаЭлемента, Значение);
		break;
	case 'видимость':
		if(Значение){
			if(ДанныеЭлемента && ДанныеЭлемента.ВидимостьСтиль){
				ОболочкаЭлемента.style.display = ДанныеЭлемента.ВидимостьСтиль;
			}else{
				ОболочкаЭлемента.style.display = 'block';
			}
		}else{
			ОболочкаЭлемента.style.display = 'none';
		}
		break;
	default:
	}
}

function ЭлементHTMLПринадлежитПодчиненнойФорме(Форма, Элемент){
	var ПринадлежитПодчиненнойФорме = Ложь;
	if(Форма.ПодчиненныеФормы){
		for(ИндексФормы in Форма.ПодчиненныеФормы){
			var ПодчиненнаяФорма = Форма.ПодчиненныеФормы[ИндексФормы];
			if(ПодчиненнаяФорма.КорневойЭлемент){
				if(ПодчиненнаяФорма.КорневойЭлемент.contains(Элемент)){
					// Элемент принадлежит подчиненной форме
					ПринадлежитПодчиненнойФорме = Истина;
					break;
				}
			}
		}	
	}	
	return ПринадлежитПодчиненнойФорме;
}

// Назначение полям ввода события изменения реквизита формы
function НазначитьЭлементамФормыСобытия(ЭтаФорма, КорневойЭлемент, БезусловноеНазначение){
	ПодключениеОбработкиСобытияПриИзмененииДляЭлементовContenteditable(КорневойЭлемент);
	НазначитьЭлементамФормыСобытиеОкончанияВводаТекста(ЭтаФорма, КорневойЭлемент, БезусловноеНазначение);
	НазначитьЭлементамФормыСобытиеИзменения(ЭтаФорма, КорневойЭлемент, БезусловноеНазначение);
	НазначитьЭлементамФормыСобытиеНажатия(ЭтаФорма, КорневойЭлемент, БезусловноеНазначение);
	НазначитьЭлементамФормыСобытиеОчисткиСвязаннныхЭлементов(ЭтаФорма, КорневойЭлемент, БезусловноеНазначение);
	НазначитьЭлементамФормыСобытиеФокуса(ЭтаФорма, КорневойЭлемент, БезусловноеНазначение);
	НазначитьЭлементамФормыОбработчикИзмененияПоМаске(ЭтаФорма, КорневойЭлемент, БезусловноеНазначение);
}

// Назначение полям ввода события изменения реквизита формы
function НазначитьЭлементамФормыСобытиеИзменения(ЭтаФорма, КорневойЭлемент, БезусловноеНазначение){
	var ТолькоЧтение = Ложь;
	if(ЭтаФорма.Тип === 'ФормаОбъекта'){
		ТолькоЧтение = ЭтаФорма.ТолькоПросмотр();
	}else if(ЭтаФорма.Тип === 'ТабличнаяЧасть' && ЭтаФорма.РодительскаяФорма){
		if(ЭтаФорма.РодительскаяФорма.Тип === 'ФормаОбъекта'){
			ТолькоЧтение = ЭтаФорма.РодительскаяФорма.ТолькоПросмотр();
		}else if(ЭтаФорма.РодительскаяФорма.Тип === 'ПроизвольнаяФорма'){
			ТолькоЧтение = Ложь; // !!!!! Пока прозвольная форма всегда считается доступной для изменения. В будущем надо добавить ей свойство "Только чтение".
		} 
	}else if(ЭтаФорма.Тип === 'ПроизвольнаяФорма'){
		ТолькоЧтение = Ложь; // !!!!! Пока прозвольная форма всегда считается доступной для изменения. В будущем надо добавить ей свойство "Только чтение".
	}
	var ЭлементыФормы = КорневойЭлемент.querySelectorAll('input[formdataname],textarea[formdataname],select[formdataname]');
	for(var i = 0, len = ЭлементыФормы.length; i < len; i++){
		if(ТолькоЧтение){
			ЭлементыФормы[i].disabled = Истина;
		}
		if(!АтрибутЭлементаHTML(ЭлементыФормы[i], 'disabled') && !ЭлементыФормы[i].disabled){
			if(АтрибутЭлементаHTML(ЭлементыФормы[i], 'el_change') === null || БезусловноеНазначение){
				ЭлементыФормы[i].addEventListener('change', function(Событие){
					ЭтаФорма.ПриИзменении(Событие); // !!!!! Здесь происходит лишний вызов события при потере элементом фокуса. Важно при открытой форме выпадающего списка, выполняется его повторная загрузка. // Исправлено ниже путем инициации потери фокуса с целевого элемента. Предупреждение пока оставим, последим, все ли корректно работает.
				}, Ложь);
				//ЭлементыФормы[i].addEventListener('blur', function(Событие){
				//	Событие.stopPropagation();
				//	Событие.preventDefault();					
				//}, Ложь);
				ЭлементыФормы[i].addEventListener('paste', function(Событие){
					if(this && this.type === 'text' && АтрибутЭлементаHTML(this, 'maintable')){
						this.setAttribute('keydown', 'true');
					}
					ЭтаФорма.ПриИзменении(Событие);
				}, Ложь);
				if(ЭлементыФормы[i].type.toLowerCase() === 'text' || ЭлементыФормы[i].type.toLowerCase() === 'textarea'){
					ЭлементыФормы[i].addEventListener('keydown', function(Событие){
						if(typeof (ЭтаФорма.ТолькоПросмотр) === 'function' && ЭтаФорма.ТолькоПросмотр()){
							// Форма открыта только для просмотра
							return false;
						}			
						if(Событие.keyCode === 13 && (ГлобальныйКонтекст.АктивнаяФорма.Тип === 'ФормаСписка' || ГлобальныйКонтекст.АктивнаяФорма.Тип === 'ВыпадающийСписок')){
							// Нажатие Enter, при этом открыта форма выбора. Запуск процедуры обработки выбора в форме списка.
							// Перед этим необходимо убрать фокус с целевого элемента, чтобы сработало холостое событие onchange
							// и выбор не был выполнен дважды
							Событие.srcElement.blur();
							Событие.stopPropagation();
							Событие.preventDefault();
							setTimeout(АктивнаяФормаОбработкаВыбора, 100);
						}else{					
							ЭтаФорма.ИзменениеТекстаРедактирования(Событие);
						}
					}, Ложь);
					if(АтрибутЭлементаHTML(ЭлементыФормы[i], 'ref') != null){
						// Эмуляция события "Окончание ввода текста"
						// Отложенное удаление фокуса ввода с элемента. При этом срабатывает
						// событие "change" и, соответственно, открытие формы выбора для элемента.
						ЭлементыФормы[i].addEventListener('input', ВызватьСобытиеТекущегоЭлемента_ПриИзменении.debounce(300));
					}
				}
				ЭлементыФормы[i].setAttribute('el_change', 'true');
			}
		}
	}
	// Обработка изменения элементов типа div, span с атрибутом "contenteditable"
	var ЭлементыФормы = КорневойЭлемент.querySelectorAll('div[contenteditable=true],span[contenteditable=true]');
	for (var i = 0, len = ЭлементыФормы.length; i < len; i++) {
		if(ТолькоЧтение){
			УстановитьАтрибутЭлементаHTML(ЭлементыФормы[i], 'contenteditable', 'false');
		}
		if(!АтрибутЭлементаHTML(ЭлементыФормы[i], 'disabled') && !ЭлементыФормы[i].disabled){
			if(АтрибутЭлементаHTML(ЭлементыФормы[i], 'el_change') === null || БезусловноеНазначение){
				if(!ЭлементыФормы[i].onchange){
					// Данным элементам событие изменения можно назначить только напрямую, а не через EventListener.
					// Поэтому перед назначением необходимо проверить, не назначено ли оно уже ранее.
					ЭлементыФормы[i].onchange = function(){
						ЭтаФорма.ПриИзменении(this);
					};
					ЭлементыФормы[i].setAttribute('el_change', 'true');
				}
			}
		}
	}
}

// Назначение полям ввода события окончания ввода текста
function НазначитьЭлементамФормыСобытиеОкончанияВводаТекста(ЭтаФорма, КорневойЭлемент, БезусловноеНазначение){
	var ЭлементыФормы = КорневойЭлемент.querySelectorAll('input');
	for (var Счетчик = 0, Количество = ЭлементыФормы.length; Счетчик < Количество; Счетчик++) {
		ЭлементыФормы[Счетчик].addEventListener('input', ОбработкаСобытияТекущегоЭлемента_ОкончаниеВводаТекста);
	}
}

// Назначение полям ввода событий нажатие на кнопку выбора, открытия и прочие кнопки
function НазначитьЭлементамФормыСобытиеНажатия(ЭтаФорма, КорневойЭлемент, БезусловноеНазначение){
	var ТолькоЧтение = Ложь;
	if(ЭтаФорма.Тип === 'ФормаОбъекта'){
		ТолькоЧтение = ЭтаФорма.ТолькоПросмотр();
	}else if(ЭтаФорма.Тип === 'ТабличнаяЧасть' && ЭтаФорма.РодительскаяФорма){
		if(ЭтаФорма.РодительскаяФорма.Тип === 'ФормаОбъекта'){
			ТолькоЧтение = ЭтаФорма.РодительскаяФорма.ТолькоПросмотр();
		}else if(ЭтаФорма.РодительскаяФорма.Тип === 'ПроизвольнаяФорма'){
			ТолькоЧтение = Ложь; // !!!!! Пока прозвольная форма всегда считается доступной для изменения. В будущем надо добавить ей свойство "Только чтение".
		} 
	}else if(ЭтаФорма.Тип === 'ПроизвольнаяФорма'){
		ТолькоЧтение = Ложь; // !!!!! Пока прозвольная форма всегда считается доступной для изменения. В будущем надо добавить ей свойство "Только чтение".
	}
	// Открытие формы выбора
	var ЭлементыФормы = КорневойЭлемент.querySelectorAll('input[class=itemSelectBtn]');
	for (var i = 0, len = ЭлементыФормы.length; i < len; i++) {
		if(ТолькоЧтение){
			// Удаляем кнопку
			ЭлементыФормы[i].parentNode.removeChild(ЭлементыФормы[i]);
		}else{
			// Назначение события открытия формы выбора
			if(АтрибутЭлементаHTML(ЭлементыФормы[i], 'el_click') === null || БезусловноеНазначение){
				ЭлементыФормы[i].addEventListener('click', function(){
					if(typeof (ЭтаФорма.ТолькоПросмотр) === 'function' && ЭтаФорма.ТолькоПросмотр()){
						// Форма открыта только для просмотра
						return false;
					}
					var ЭлементКнопка = this;
					if(ЭлементКнопка.toString() === '[object HTMLInputElement]' && ЭлементКнопка.type.toLowerCase() === 'button'){
						var ЭлементПолеВвода = ЭлементКнопка.parentElement.previousElementSibling;
						if(ЭлементПолеВвода.toString() === '[object HTMLInputElement]' && АтрибутЭлементаHTML(ЭлементПолеВвода, 'ref') != null && АтрибутЭлементаHTML(ЭлементПолеВвода, "keydown") === "true"){
							// Если у поля ввода установлен флаг изменения содержимого, то сбрасываем его, чтобы не сработал отбор списка по значению поля ввода.
							ЭлементПолеВвода.setAttribute('keydown', '');
						}
					}
					ОткрытьФормуСписка(ЭлементКнопка, {Владелец:ЭтаФорма, РежимОткрытияОкна: РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс});
				}, Ложь);
				ЭлементыФормы[i].setAttribute('el_click', 'true');
			}
		}
	}
	// Открытие формы объекта
	var ЭлементыФормы = КорневойЭлемент.querySelectorAll('input[class=itemOpenBtn]');
	for (var i = 0, len = ЭлементыФормы.length; i < len; i++) {
		if(АтрибутЭлементаHTML(ЭлементыФормы[i], 'el_click') === null || БезусловноеНазначение){
			ЭлементыФормы[i].addEventListener('click', function(){
				ОткрытьФормуОбъекта(this, {Владелец:ЭтаФорма});
			}, Ложь);
			ЭлементыФормы[i].setAttribute('el_click', 'true');
		}
	}
}

// Назначение полям ввода очистки связанных элементов при изменения реквизита формы
function НазначитьЭлементамФормыСобытиеОчисткиСвязаннныхЭлементов(ЭтаФорма, КорневойЭлемент, БезусловноеНазначение){
	if(ЭтаФорма.Тип === "ТабличнаяЧасть" && КорневойЭлемент.tagName.toLowerCase() != "tr"){
		// Для табличной части вызовем функцию рекурсивно для каждой строки отдельно
		if(ЭтаФорма.КорневойЭлементHTMLТаблицы.tBodies.length > 0){
			var Строки = ЭтаФорма.КорневойЭлементHTMLТаблицы.tBodies[0].rows;
			for (var Счетчик = 0, Количество = Строки.length; Счетчик < Количество; Счетчик++){
				НазначитьЭлементамФормыСобытиеОчисткиСвязаннныхЭлементов(ЭтаФорма, Строки[Счетчик], БезусловноеНазначение);
			}
		}
		return;
	}
	var ЭлементыФормы = КорневойЭлемент.querySelectorAll('input[filter],textarea[filter]');
	ЭтаФорма.ДополнительныеСвойства.linkedElems = {};
	for (var Счетчик = 0, Количество = ЭлементыФормы.length; Счетчик < Количество; Счетчик++){
		if(АтрибутЭлементаHTML(ЭлементыФормы[Счетчик], 'el_filter') === null || БезусловноеНазначение){
			// Элемент связан с другими
			var ИдентификаторСвязи = АтрибутЭлементаHTML(ЭлементыФормы[Счетчик], "filterid");
			if(!ИдентификаторСвязи || БезусловноеНазначение){
				ИдентификаторСвязи = СлучайныйИдентификатор();
				ЭлементыФормы[Счетчик].setAttribute("filterid", ИдентификаторСвязи);
			}
			var Отбор = АтрибутЭлементаHTML(ЭлементыФормы[Счетчик], "filter");
			var МассивДанных = Отбор.split(",");
			for (var Ключ in МассивДанных) {
				var Значение = МассивДанных[Ключ].split(":")[1].trim();
				var ОтборСтрока = null;
				if(Значение.indexOf("formdataname=") === 0){
					// Значение указано в данных формы
					Значение = Значение.replace("formdataname=", "");
					var ОтборСтрока = КорневойЭлемент.querySelector('[formdataname="' + Значение + '"]');
				}else if(Значение.indexOf("1ccode=") === 0){
					// Значение будет вычислено на стороне 1С, игнорируем эту связь
				}else if(Значение.indexOf("elemid=") === 0){
					// Указан id элемента, в котором хранится значение связи
					ОтборСтрока = ЭлементHTMLДокумента(Значение.replace("elemid=", ""));
				}
				if(ОтборСтрока){
					var ИдентификаторЭлемента = АтрибутЭлементаHTML(ОтборСтрока, "masterfilterid");
					if(!ИдентификаторЭлемента){
						ИдентификаторЭлемента = "";
					}					
					ИдентификаторЭлемента = ИдентификаторЭлемента + "," + ИдентификаторСвязи;
					ОтборСтрока.setAttribute('masterfilterid', ИдентификаторЭлемента);
				}
			}
			ЭлементыФормы[Счетчик].setAttribute('el_filter', 'true');
		}
	}
}

// Назначение полям ввода событий нажатие на кнопку выбора, открытия и прочие кнопки
function НазначитьЭлементамФормыСобытиеФокуса(ЭтаФорма, КорневойЭлемент, БезусловноеНазначение){
	var ЭлементыФормы = КорневойЭлемент.querySelectorAll('input');
	for (var Счетчик = 0, Количество = ЭлементыФормы.length; Счетчик < Количество; Счетчик++) {
		if(АтрибутЭлементаHTML(ЭлементыФормы[Счетчик], 'el_focus') === null || БезусловноеНазначение){
			ЭлементыФормы[Счетчик].addEventListener('focus', function(Событие){
				ОбработкаСобытияКликаПоСтрокеТаблицы(Событие, ЭтаФорма);
			}, Ложь);
			ЭлементыФормы[Счетчик].setAttribute('el_focus', 'true');
		}
	}
}

function НазначитьЭлементамФормыОбработчикИзмененияПоМаске(ЭтаФорма, КорневойЭлемент, БезусловноеНазначение){
	var ЭлементыФормы = КорневойЭлемент.querySelectorAll('input[editmask]');
	for (var Счетчик = 0, Количество = ЭлементыФормы.length; Счетчик < Количество; Счетчик++) {
		if(АтрибутЭлементаHTML(ЭлементыФормы[Счетчик], 'el_editmask') === null || БезусловноеНазначение){
			ИзменениеЭлементаПоМаске(ЭлементыФормы[Счетчик], АтрибутЭлементаHTML(ЭлементыФормы[Счетчик], 'editmask'));
			ЭлементыФормы[Счетчик].setAttribute('el_editmask', 'true');
		}
	}
}

// Обработчик нажатия клавиш на форме с таблицей
function ОбработкаСобытийКлавиатурыНаТаблице(Событие){
	var Событие = Событие || window.event;
	if(Событие.keyCode === 38 || Событие.keyCode === 40 || Событие.keyCode === 13){
		// Нажаты стрелки вверх/вниз или энтер
		if(ГлобальныйКонтекст.АктивнаяФорма){
			if(ГлобальныйКонтекст.АктивнаяФорма.Тип === "ФормаСписка" || ГлобальныйКонтекст.АктивнаяФорма.Тип === "ТабличнаяЧасть" || ГлобальныйКонтекст.АктивнаяФорма.Тип === "ВыпадающийСписок"){
				if(ГлобальныйКонтекст.АктивнаяФорма.КорневойЭлемент.contains(document.activeElement) || document.activeElement === document.body || ГлобальныйКонтекст.АктивнаяФорма.Тип === "ВыпадающийСписок"){
					if(ГлобальныйКонтекст.АктивнаяФорма.КорневойЭлемент.contains(document.activeElement) && !ГлобальныйКонтекст.АктивнаяФорма.КорневойЭлементHTMLТаблицы.contains(document.activeElement)){
						// Активный элемент находится на форме, но не на ее таблице с данными. Пропускаем.
					}else{
						var СобытиеОбработано = Ложь;
						// Обрабатываем событие
						if(Событие.keyCode === 38){ // Стрелка вверх
							ГлобальныйКонтекст.АктивнаяФорма.ТекущаяСтрокаВверх();
							СобытиеОбработано = Истина;
						}
						if(Событие.keyCode === 40){ // Стрелка вниз
							ГлобальныйКонтекст.АктивнаяФорма.ТекущаяСтрокаВниз();
							СобытиеОбработано = Истина;
						}
						if(Событие.keyCode === 13 && (ГлобальныйКонтекст.АктивнаяФорма.Тип === 'ФормаСписка' || ГлобальныйКонтекст.АктивнаяФорма.Тип === 'ВыпадающийСписок')){ // Энтер
							ГлобальныйКонтекст.АктивнаяФорма.ОбработкаВыбора();
							СобытиеОбработано = Истина;
						}
						if(СобытиеОбработано){
							// Запрещаем всплытие события и отменяем действие по умолчанию
							Событие.stopPropagation();
							Событие.preventDefault();
						}
					}
				}
			}
		}
	}
}


function ИзменениеТекстаРедактирования(Форма, Событие){
	var Событие = Событие || window.event;
	var ИсточникСобытия = Событие.srcElement || Событие.target;	
	if(Событие.keyCode === 37 || Событие.keyCode === 39 || Событие.keyCode === 9){
		// Стрелки влево/вправо, Tab
		return;
	}
	if(Событие.keyCode === 115){
		// F4
		if(АтрибутЭлементаHTML(ИсточникСобытия, 'ref') != null){
			// Открываем форму выбора
			Событие.stopPropagation();
			ОткрытьФормуСписка(ИсточникСобытия, {Владелец:Форма, РежимОткрытияОкна: РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс});
			return;
		}
	}
	if(Событие.keyCode === 27){
		ОбработкаНажатияEsc(Событие);
	}
	if(!АтрибутЭлементаHTML(ИсточникСобытия, 'keydown')){
		// Пометим элемент как измененный вручную
		ИсточникСобытия.setAttribute('keydown', 'true');
		Событие.stopPropagation();
	}
}

function ОбработкаНажатияEsc(Событие){
	// Esc. Если сейчас открыта форма, то закроем ее
	var ДействиеВыполнено = Ложь;
	var АктивнаяФорма = ГлобальныйКонтекст.АктивнаяФорма;
	if(АктивнаяФорма){
		if(АктивнаяФорма.Тип === ТипФормы.ТабличнаяЧасть || АктивнаяФорма.Тип === ТипФормы.ДеревоЗначений){
			if(АктивнаяФорма.РодительскаяФорма){
				// У встроенных табличной части и дерева значений вызывем событие для ее формы-родителя
				АктивнаяФорма = АктивнаяФорма.РодительскаяФорма;
			}
		}
		if(АктивнаяФорма.Элементы && АктивнаяФорма.Элементы.Кнопки && АктивнаяФорма.Элементы.Кнопки.Закрыть){
			// Есть активная форма, у нее есть кнопка "Закрыть". Выполняем нажатие на нее.
			ВызватьСобытиеЭлемента(АктивнаяФорма.Элементы.Кнопки.Закрыть, 'click');
			ДействиеВыполнено = Истина;
		}else{
			if(АктивнаяФорма.Тип === ТипФормы.ФормаСписка){
				if(АктивнаяФорма.Владелец){
					// У встроенных форм списка вызывается событие для ее владельца
					АктивнаяФорма = АктивнаяФорма.Владелец;
				}
			}
			if(АктивнаяФорма.Элементы && АктивнаяФорма.Элементы.Кнопки && АктивнаяФорма.Элементы.Кнопки.Закрыть){
				// Есть активная форма, у нее есть кнопка "Закрыть". Выполняем нажатие на нее.
				ВызватьСобытиеЭлемента(АктивнаяФорма.Элементы.Кнопки.Закрыть, 'click');
				ДействиеВыполнено = Истина;
			}
		}
	}	
	if(ДействиеВыполнено){
		Событие.stopPropagation();
		Событие.preventDefault();
	}
}

Форма_ПриИзменении = function(ЭтаФорма, СобытиеИлиЭлемент){
	if(СобытиеИлиЭлемент){
		if(СобытиеИлиЭлемент.toString() === '[object Event]'){
			// Функция вызывается событием. Получим ссылку на элемент - источник события.
			var СобытиеИлиЭлемент = СобытиеИлиЭлемент || window.event;
			// Вызываенм обработку для установки текущей строки, если измененный элемент не находится на текущей строке.
			// Это возможно в случаях, если изменяется значение input путем клика по его предопределенным кнопкам.
			ОбработкаСобытияКликаПоСтрокеТаблицы(СобытиеИлиЭлемент, ЭтаФорма);
			var Элемент = СобытиеИлиЭлемент.srcElement || СобытиеИлиЭлемент.target;	
			if(Элемент.type === 'text' && АтрибутЭлементаHTML(Элемент, 'keydown') === 'true' && Элемент.value && АтрибутЭлементаHTML(Элемент, 'maintable')){
				// Обработка события ручного изменения текстового реквизита.
				// Используется как запуск процедуры автоподбора
				ОткрытьФормуВыпадающегоСписка(Элемент, {Владелец: ЭтаФорма});
				return;
			}
		}else{
			// Функция вызывается программно, ссылка на элемент уже есть
			var Элемент = ЭлементHTMLДокумента(СобытиеИлиЭлемент);
		}
	}else{
		return;
	}
	if(Элемент.type === 'text' && АтрибутЭлементаHTML(Элемент, 'keydown') === 'true' && Элемент.value && АтрибутЭлементаHTML(Элемент, 'maintable')){
		// Обработка события ручного изменения текстового реквизита.
		// Используется как запуск процедуры автоподбора
		ОткрытьФормуВыпадающегоСписка(Элемент, {Владелец: ЭтаФорма});
		return;
	}
	var ИмяРеквизита = АтрибутЭлементаHTML(Элемент, 'formdataname');
	if(ИмяРеквизита){
		if(УстановкаДанныхФормыИзЗначенияЭлемента(ЭтаФорма.Объект, Элемент, ИмяРеквизита)){
			if(АтрибутЭлементаHTML(Элемент, 'masterfilterid')){
				// Обработка изменения реквизита, связанного с другими
				ОбработкаИзмененияСвязанныхРеквизитов(ЭтаФорма, Элемент);
			}
			// Устанавливаем для формы флаг модифицированности
			ЭтаФорма.УстановитьМодифицированность(Истина);
			// Запуск событий элемента
			var АтрибутПриИзменении = АтрибутЭлементаHTML(Элемент, '_onchange');
			if(АтрибутПриИзменении){
				eval(АтрибутПриИзменении);
			}
			// Вызов события окончания редактирования элемента
			ЭтаФорма.ПриИзмененииРеквизита(Элемент, ИмяРеквизита);
		}
	}
}

ФормаСписка_ПриИзменении = function(ЭтаФорма, СобытиеИлиЭлемент){
	if(СобытиеИлиЭлемент){
		if(СобытиеИлиЭлемент.toString() === '[object Event]'){
			// Функция вызывается событием. Получим ссылку на элемент - источник события.
			var СобытиеИлиЭлемент = СобытиеИлиЭлемент || window.event;
			// Вызываенм обработку для установки текущей строки, если измененный элемент не находится на текущей строке.
			// Это возможно в случаях, если изменяется значение input путем клика по его предопределенным кнопкам.
			ОбработкаСобытияКликаПоСтрокеТаблицы(СобытиеИлиЭлемент, ЭтаФорма);
			var Элемент = СобытиеИлиЭлемент.srcElement || СобытиеИлиЭлемент.target;	
			if(Элемент.type === 'text' && АтрибутЭлементаHTML(Элемент, 'keydown') === 'true' && Элемент.value && АтрибутЭлементаHTML(Элемент, 'maintable')){
				// Обработка события ручного изменения текстового реквизита.
				// Используется как запуск процедуры автоподбора
				ОткрытьФормуВыпадающегоСписка(Элемент, {Владелец: ЭтаФорма});
				return;
			}
		}else{
			// Функция вызывается программно, ссылка на элемент уже есть
			var Элемент = ЭлементHTMLДокумента(СобытиеИлиЭлемент);
		}
	}else{
		return;
	}
	var ИмяРеквизита = АтрибутЭлементаHTML(Элемент, 'formdataname');
	if(ИмяРеквизита){
		// Получим данные текущей строки
		if(ЭтаФорма.ТекущаяСтрока){
			var СтрокаЭлементHTML = ЭтаФорма.ТекущаяСтрока;
			var ИндексСтроки = СтрокаЭлементHTML.rowIndex;
			var ДанныеСтроки = ЭтаФорма.Строки[ИндексСтроки - 1]; // -1, так как первая строка - это заголовок
			if(ДанныеСтроки){
				// Установка значения данных формы
				if(УстановкаДанныхФормыИзЗначенияЭлемента(ДанныеСтроки, Элемент, ИмяРеквизита)){
					if(АтрибутЭлементаHTML(Элемент, 'masterfilterid')){
						// Обработка изменения реквизита, связанного с другими
						ОбработкаИзмененияСвязанныхРеквизитов(ЭтаФорма, Элемент);
					}				
					// Запуск событий элемента
					var АтрибутПриИзменении = АтрибутЭлементаHTML(Элемент, '_onchange');
					if(АтрибутПриИзменении){
						eval(АтрибутПриИзменении);
					}
					if(ЭтаФорма.РодительскаяФорма && (ЭтаФорма.РодительскаяФорма.Тип === 'ФормаОбъекта' || ЭтаФорма.РодительскаяФорма.Тип === 'ПроизвольнаяФорма')){
						// Если ТЧ размещена на форме объекта, то устанавливаем для нее флаг модифицированности
						ЭтаФорма.РодительскаяФорма.УстановитьМодифицированность(Истина);
					}
					// Вызов событий окончания редактирования элемента и строки
					ЭтаФорма.ПриИзмененииРеквизита(Элемент, ИмяРеквизита, ДанныеСтроки);
					ЭтаФорма.ПриИзмененииСтроки(СтрокаЭлементHTML);
				}
			}
		}
	}
}

//////////////////////////////////////////
// Программный интерфейс форм           //
//////////////////////////////////////////

// Открывает форму списка
function ОткрытьФормуСписка(ЦелевойЭлемент, Параметры){

	if(Параметры === Неопределено){Параметры = {}}
	if(Параметры.Идентификатор === Неопределено){Параметры.Идентификатор = СлучайныйИдентификатор()}
	if(Параметры.ДополнительныеПараметры === Неопределено){Параметры.ДополнительныеПараметры = {}}

	// Проверим, передан ли в качестве целевого элемента его id (или он сам) или это элемент-кнопка открытия формы списка
	if(ЦелевойЭлемент.toString() === "[object HTMLInputElement]" && ЦелевойЭлемент.type.toLowerCase() === "button"){
		var ЦелевойЭлементВрем = ЦелевойЭлемент.parentElement.previousElementSibling;
		if(ЦелевойЭлементВрем.toString() === "[object HTMLInputElement]" && АтрибутЭлементаHTML(ЦелевойЭлементВрем, "ref") != null){
			// Передаем сразу ссылку на целевой элемент
			ЦелевойЭлемент = ЦелевойЭлементВрем;
		}
	}
	// То же самое для кнопки в виде span input-addon-btn
	if(ЦелевойЭлемент.toString() === "[object HTMLSpanElement]" && СодержитКласс(ЦелевойЭлемент, "input-addon-btn")){
		var ЦелевойЭлементВрем = ЦелевойЭлемент.previousElementSibling;
		if(ЦелевойЭлементВрем.toString() === "[object HTMLInputElement]" && АтрибутЭлементаHTML(ЦелевойЭлементВрем, "ref") != null){
			// Передаем сразу ссылку на целевой элемент
			ЦелевойЭлемент = ЦелевойЭлементВрем;
		}
	}
	
	// Получаем ссылку на поле ввода
	ЦелевойЭлемент = ЭлементHTMLДокумента(ЦелевойЭлемент);
	
	// Если основная таблица поля ввода это перечисление, то открываем форму автоподбора
	if(АтрибутЭлементаHTML(ЦелевойЭлемент, "maintable")){
		var ОсновнаяТаблица = АтрибутЭлементаHTML(ЦелевойЭлемент, "maintable");
		if(ОсновнаяТаблица.indexOf("ПеречислениеСсылка.") === 0 || ОсновнаяТаблица.indexOf("Перечисление.") === 0){
			ОткрытьФормуВыпадающегоСписка(ЦелевойЭлемент, Параметры);
			return;
		}
	}
	
	if(АтрибутЭлементаHTML(ЦелевойЭлемент, "keydown") === "true"){
		// Необходимо использовать отбор формы списка
		if(Параметры.ДополнительныеПараметры === Неопределено){
			Параметры.ДополнительныеПараметры = {};
		}
		Параметры.ДополнительныеПараметры.ПоискПоСтроке_Значение = ЦелевойЭлемент.value;
		if(АтрибутЭлементаHTML(ЦелевойЭлемент, 'search_attrs')){
			Параметры.ДополнительныеПараметры.ПоискПоСтроке_Поля = АтрибутЭлементаHTML(ЦелевойЭлемент, 'search_attrs');
		}
	}
	
	// Возможно, форма уже была открыта для этого элемента. Если так, то просто обновим ее.
	var ОткрытаяФормаСписка = ПолучитьФормуСписка({ЦелевойЭлемент: ЦелевойЭлемент});
	if(ОткрытаяФормаСписка){
		ОткрытаяФормаСписка.ДополнительныеСвойства.УстановитьТекущуюСтроку = 0;
		ОткрытаяФормаСписка.Загрузить(Параметры.ДополнительныеПараметры);
		return ОткрытаяФормаСписка;
	}
		
	// Открытие формы
	Параметры.ЦелевойЭлемент = ЦелевойЭлемент;
	Параметры.КорневойЭлемент = 'ListFormTemplate';
	var НоваяФормаСписка = new ФормаСписка(Параметры);
	НоваяФормаСписка.Инициализировать();
	НоваяФормаСписка.ДополнительныеСвойства.УстановитьТекущуюСтроку = 0; // Сразу активируем первую строку списка
	НоваяФормаСписка.Загрузить(Параметры.ДополнительныеПараметры);
	/*
	if(НоваяФормаСписка.РежимВыбора){
		// Форма открывается для выбора, делаем ее активной
		ГлобальныйКонтекст.УстановитьАктивнуюФорму(НоваяФормаСписка);
	}
	*/
	return НоваяФормаСписка;
}

// Открывает форму в виде выпадающего списка
function ОткрытьФормуВыпадающегоСписка(ЦелевойЭлемент, Параметры){

	/*
	// Закрываем уже открытые формы выбора из выпадающего списка, такая форма может быть только одна
	for(ИдентификаторФормы in ГлобальныйКонтекст.Формы){
		var ТекущаяФорма = ГлобальныйКонтекст.Формы[ИдентификаторФормы];
		if(ТекущаяФорма.Тип === "ВыпадающийСписок"){
			ТекущаяФорма.ЗакрытьФорму();
		}
	}		
	*/

	if(АтрибутЭлементаHTML(ЦелевойЭлемент, 'nodropdown')){
		// Запрещено открытие формы выпадающего списка у данного элемента
		// Восстанавливаем значение элемента из данных формы, содержащей поле ввода
		if(Параметры.Владелец && Параметры.Владелец.ЗначениеДанныхФормыЭлементаHTML){
			Параметры.Владелец.УстановитьЗначениеЭлементаHTMLИзДанныхФормы(ЦелевойЭлемент);
		}
		return;
	}

	if(Параметры === Неопределено){Параметры = {}}
	if(Параметры.Идентификатор === Неопределено){Параметры.Идентификатор = СлучайныйИдентификатор()}
	if(Параметры.ДополнительныеПараметры === Неопределено){Параметры.ДополнительныеПараметры = {}}
	Параметры.Тип = 'ВыпадающийСписок';
	Параметры.ДополнительныеПараметры.ВыпадающийСписок = Истина; // Признак открытия формы выпадающего списка выбора

	// Проверим, передан ли в качестве целевого элемента его id (или он сам) или это элемент-кнопка открытия формы списка
	if(ЦелевойЭлемент.toString() === '[object HTMLInputElement]' && ЦелевойЭлемент.type.toLowerCase() === 'button'){
		var ЦелевойЭлементВрем = ЦелевойЭлемент.parentElement.previousElementSibling;
		if(ЦелевойЭлементВрем.toString() === '[object HTMLInputElement]' && АтрибутЭлементаHTML(ЦелевойЭлементВрем, 'ref') != null){
			// Передаем сразу ссылку на целевой элемент
			ЦелевойЭлемент = ЦелевойЭлементВрем;
		}
	}
	
	ЦелевойЭлемент = ЭлементHTMLДокумента(ЦелевойЭлемент);
	if(АтрибутЭлементаHTML(ЦелевойЭлемент, 'keydown') === 'true'){
		// Необходимо использовать отбор формы списка
		if(Параметры.ДополнительныеПараметры === Неопределено){
			Параметры.ДополнительныеПараметры = {};
		}
		Параметры.ДополнительныеПараметры.ПоискПоСтроке_Значение = ЦелевойЭлемент.value;
		if(АтрибутЭлементаHTML(ЦелевойЭлемент, 'search_attrs')){
			Параметры.ДополнительныеПараметры.ПоискПоСтроке_Поля = АтрибутЭлементаHTML(ЦелевойЭлемент, 'search_attrs');
		}
	}
	
	// Возможно, форма уже была открыта для этого элемента. Если так, то просто обновим ее.
	var ОткрытаяФормаСписка = ПолучитьФормуСписка({ЦелевойЭлемент: ЦелевойЭлемент});
	if(ОткрытаяФормаСписка){
		ОткрытаяФормаСписка.ДополнительныеСвойства.УстановитьТекущуюСтроку = 0;
		if(ОткрытаяФормаСписка.ДополнительныеСвойства.ПоискПоСтроке_Значение != Параметры.ДополнительныеПараметры.ПоискПоСтроке_Значение){
			// Загружаем, только если текст поиска по строке изменился.
			// Он мог не меняться, например, если событие onchange произошло из-за потери фокуса
			ОткрытаяФормаСписка.ДополнительныеСвойства.ПоискПоСтроке_Значение = Параметры.ДополнительныеПараметры.ПоискПоСтроке_Значение;
			ОткрытаяФормаСписка.Загрузить(Параметры.ДополнительныеПараметры);
		}
		return ОткрытаяФормаСписка;
	}

	// Открытие формы
	Параметры.ЦелевойЭлемент = ЦелевойЭлемент;
	Параметры.КорневойЭлемент = 'ListDropdownTemplate';
	var ГраницыЭлемента = ЦелевойЭлемент.getBoundingClientRect();
	Параметры.СтильКорневогоЭлемента = {	
		width: (ГраницыЭлемента.width).toString() + 'px',
		top:   (ГраницыЭлемента.bottom + pageYOffset).toString() + 'px',
		left:  (ГраницыЭлемента.left + pageXOffset).toString() + 'px'
	}
	var НоваяФормаСписка = new ФормаСписка(Параметры);
	НоваяФормаСписка.Инициализировать();
	НоваяФормаСписка.ДополнительныеСвойства.УстановитьТекущуюСтроку = 0; // Сразу активируем первую строку списка
	НоваяФормаСписка.ДополнительныеСвойства.ПоискПоСтроке_Значение = Параметры.ДополнительныеПараметры.ПоискПоСтроке_Значение;
	НоваяФормаСписка.Загрузить(Параметры.ДополнительныеПараметры);
	//ГлобальныйКонтекст.УстановитьАктивнуюФорму(НоваяФормаСписка);
	return НоваяФормаСписка;
}

// Возвращает форму списка с отбором по параметрам
function ПолучитьФормуСписка(Отбор){
	for(ИдентификаторФормы in ГлобальныйКонтекст.Формы){
		var ТекущаяФорма = ГлобальныйКонтекст.Формы[ИдентификаторФормы];
		if(ТекущаяФорма.Тип === "ФормаСписка" || ТекущаяФорма.Тип === "ВыпадающийСписок"){
			var Совпадение = Истина;
			for(Ключ in Отбор){
				if(!ТекущаяФорма.hasOwnProperty(Ключ) || ТекущаяФорма[Ключ] != Отбор[Ключ]){
					// Свойство формы отсутствует или его значение не равно значению в параметрах отбора
					Совпадение = Ложь;
					break;
				}
			}
			if(Совпадение){
				// Форма найдена
				return ТекущаяФорма;
			}
		}
	};
	// Нет подходящей формы
	return null;
}

// Создание и открытие формы объекта
function ОткрытьФормуОбъекта(targetElem, p){
	if(typeof p === "undefined"){p = {}}
	if(typeof p.Идентификатор === "undefined"){p.Идентификатор = СлучайныйИдентификатор()}
	if(typeof p.ДополнительныеПараметры === "undefined"){p.ДополнительныеПараметры = {}}

	// Проверим, передан ли в качестве целевого элемента его id (или он сам) или это элемент-кнопка открытия формы списка
	if(targetElem.toString() === "[object HTMLInputElement]" && targetElem.type.toLowerCase() === "button"){
		var targetElemTemp = targetElem.parentElement.previousElementSibling;
		if(targetElemTemp.toString() === "[object HTMLInputElement]" && АтрибутЭлементаHTML(targetElemTemp, "ref") != null){
			// Передаем сразу ссылку на целевой элемент
			targetElem = targetElemTemp;
		}
	}
	p.ШаблонФормы = "mdname";
	p.ОсновнаяТаблица = АтрибутЭлементаHTML(targetElem, "maintable");
	p.ОбъектСсылка = АтрибутЭлементаHTML(targetElem, "ref");
	if(!СсылкаПустая(p.ОбъектСсылка)){
		var newObject_Form = new ФормаОбъекта(p);
		newObject_Form.Инициализировать(p.ДополнительныеПараметры);
	}
	return newObject_Form;
}

//////////////////////////////////////////
// Состояние()                          //
//////////////////////////////////////////

function Состояние(Текст, Статус, Таймаут, УИД, Параметры){
	var СтатусЛатинница;
	switch(Статус){
	case 'Обычное':
		СтатусЛатинница = 'ordinary';
		break;
	case 'Информация':
		СтатусЛатинница = 'info';
		break;
	case 'Успех':
		СтатусЛатинница = 'success';
		break;
	case 'Внимание':
		СтатусЛатинница = 'warn';
		break;
	case 'Важное':
		СтатусЛатинница = 'error';
		break;
	default:
		СтатусЛатинница = 'ordinary';
	}	
	note({
		content:	Текст,
		type:		СтатусЛатинница,
		time:		Таймаут,
		uid:		УИД,
		Параметры:	Параметры
	});
}

function СостояниеПриЗакрытииСообщения(Элемент, Параметры){
	if(Параметры.uid){
		// Отметка прочтения сообщения
		ВыполнитьФункцию1С('КэнСайтСервер.ОтметкаПрочтенияСообщенияПосетителюСайта(ПараметрыЗапроса)', {УИД: Параметры.uid}, Истина);
	}
}

/**
 * Анонимная самовызывающаяся функция-обертка
 * @param {document} d - получает документ
 */
!function(d){

	"use strict";

	/**
	* Полифилл для Object.assign()
	*/
	Object.assign||Object.defineProperty(Object,"assign",{enumerable:!1,configurable:!0,writable:!0,value:function(e,r){"use strict";if(null==e)throw new TypeError("Cannot convert first argument to object");for(var t=Object(e),n=1;n<arguments.length;n++){var o=arguments[n];if(null!=o)for(var a=Object.keys(Object(o)),c=0,b=a.length;c<b;c++){var i=a[c],l=Object.getOwnPropertyDescriptor(o,i);void 0!==l&&l.enumerable&&(t[i]=o[i])}}return t}});

	/**
	* Полифилл для Element.remove()
	*/
	"remove" in Element.prototype||(Element.prototype.remove=function(){this.parentNode&&this.parentNode.removeChild(this)});

	/**
	* Основная функция.
	* @param {Object} [settings] - предварительные настройки
	*/
	window.note = function(settings) {

		/**
		* Настройки по умолчанию
		*/
		settings = Object.assign({},{
		callback:    false,
		content:     "",
		time:        4.5,
		type:        "info",
		uid:         ""
		}, settings);

		if(!settings.content.length) return;

		// Если УИД указан, то проверим на наличие сообщения с таким УИД, чтобы не генерить дубли
		if(settings.uid && ЭлементHTMLДокумента('БлокСостояние') && ЭлементHTMLДокумента('БлокСостояние').querySelector('div[uid="' + settings.uid + '"]')){
			return;
		}
		if(!settings.Параметры){
			settings.Параметры = {};
		}

		/**
		* Функция создания элементов
		* @param {String} name - название DOM-элемента
		* @param {Object} attr - объект с атрибутами
		* @param {Object} append - DOM-элемент, в который будет добавлен новый узел
		* @param {String} [content] - контент DOM-элемента
		*/
		var create = function(name, attr, append, content){
		var node = d.createElement(name);
		for(var val in attr) { if(attr.hasOwnProperty(val)) node.setAttribute(val, attr[val]); }
		if(content) node.insertAdjacentHTML("afterbegin", content);
		append.appendChild(node);
		if(node.classList.contains("note-item-hidden")) node.classList.remove("note-item-hidden");
			return node;
		};

		/**
		* Генерация элементов
		*/
		var noteBox = d.getElementById("БлокСостояние") || create("div", { "id": "БлокСостояние" }, d.body);
		var noteItem = create("div", {
			"class": "note-item",
			"data-show": "false",
			"role": "alert",
			"data-type": settings.type,
			"uid": settings.uid,
		}, noteBox),
		noteItemText = create("div", { "class": "note-item-text" }, noteItem, settings.content),
		noteItemBtn = create("button", {
			"class": "note-item-btn",
			"type": "button",
			"aria-label": "Скрыть"
		}, noteItem);
		if(settings.Параметры.ДополнительныеСтили){
			noteItem.style.cssText = settings.Параметры.ДополнительныеСтили;
		}
		if(settings.Параметры.ЦветФона){
			noteItem.style.backgroundColor = settings.Параметры.ЦветФона;
		}
		if(settings.Параметры.ЦветТекста){
			noteItem.style.color = settings.Параметры.ЦветТекста;
		}
		if(settings.Параметры.Прозрачность){
			noteItem.style.opacity = settings.Параметры.Прозрачность;
		}

		/**
		* Функция проверки видимости алерта во viewport
		* @returns {boolean}
		*/
		var isVisible = function(){
			var coords = noteItem.getBoundingClientRect();
			return (
				coords.top >= 0 &&
				coords.left >= 0 &&
				coords.bottom <= (window.innerHeight || d.documentElement.clientHeight) && 
				coords.right <= (window.innerWidth || d.documentElement.clientWidth) 
			);
		};

		/**
		* Функция удаления алертов
		* @param {Object} [el] - удаляемый алерт
		*/
		var remove = function(el){
			el = el || noteItem;
			el.setAttribute("data-show","false");
			window.setTimeout(function(){
			el.remove();
			}, 250);
			if(settings.callback){
				settings.callback(); // Кастомный обработчик закрытия сообщения
			}else{
				СостояниеПриЗакрытииСообщения(el, settings); // Стандартный обработчик закрытия сообщения
			}
		};

		/**
		* Удаление алерта по клику на кнопку
		*/
		noteItemBtn.addEventListener("click", function() { remove(); });

		/**
		* Визуальный вывод алерта
		*/
		window.setTimeout(function(){
			noteItem.setAttribute("data-show","true");
		}, 250);


		/**
		* Проверка видимости алерта и очистка места при необходимости
		*/
		if(!isVisible()) remove(noteBox.firstChild);

		/**
		* Автоматическое удаление алерта спустя заданное время
		*/
		if(settings.time){
			window.setTimeout(remove, settings.time * 1000);
		}
	};

}(document);

// Получает и отображает новые сообщения посетителю сайта. Выполняется асинхронно.
function ПолучитьНовыеСообщенияПосетителюСайта(){
	var ЗапросHttp = НовыйЗапросHttp();
	ЗапросHttp.onreadystatechange = function (){
		if(ЗапросHttp.readyState === 4){
			var ТелоОтветаHttp = ЗапросHttp.responseText.trim();
			if(ГлобальныйКонтекст.ИспользуетсяВИнтрасети){
				ТелоОтветаHttp = ТелоОтветаHttp.replace('<!--v-can.Status: OK-->', '').trim();
			}
			var МассивСообщений = JSON.parse(ТелоОтветаHttp);
			for(var Индекс=0; Индекс < МассивСообщений.length; Индекс++){
				Состояние(МассивСообщений[Индекс].Текст, МассивСообщений[Индекс].СтатусСообщения, Неопределено, МассивСообщений[Индекс].УИД, МассивСообщений[Индекс]);
			}
		}
	} 
	ВыполнитьФункцию1С('КэнСайтСервер.НовыеСообщенияПосетителюСайта(ПараметрыЗапроса)', {}, Истина, ЗапросHttp);
}


//////////////////////////////////////////
// Функции общего назначения            //
//////////////////////////////////////////

function ЗапросК1С(ТекстЗапроса, ДополнительныеПараметры, ЭлементКонтейнер, ОчищатьСодержимое, СтруктураПараметров){
	ДополнительныеПараметры = (ДополнительныеПараметры === Неопределено) ? {} : ДополнительныеПараметры;	
	ДополнительныеПараметры.exec = КодироватьКомпонентыURI(ТекстЗапроса);
	if(ГлобальныйКонтекст.ИспользуетсяВИнтрасети){
		ЗагрузитьСодержимоеЗапросомHttp(ГлобальныйКонтекст.Коннектор1С.ПутьКБазе1С + 'v-can.site/execute', ДополнительныеПараметры, ЭлементКонтейнер, ОчищатьСодержимое, СтруктураПараметров);	
	}else{
		ЗагрузитьСодержимоеЗапросомHttp('ajax/req1c.php', ДополнительныеПараметры, ЭлементКонтейнер, ОчищатьСодержимое, СтруктураПараметров);
	}
}

function ЗагрузитьСодержимоеЗапросомHttp(ИмяСкрипта, ДополнительныеПараметры, ЭлементКонтейнер, ОчищатьСодержимое, СтруктураПараметров) { 
	ДополнительныеПараметры = (ДополнительныеПараметры === Неопределено) ? {} : ДополнительныеПараметры;
	var ЭлементКонтейнер = (typeof ЭлементКонтейнер === 'string') ? document.getElementById(ЭлементКонтейнер) : ЭлементКонтейнер;
	if(ЭлементКонтейнер === Неопределено){
		return;
	}
	if(ОчищатьСодержимое){
		if(СтруктураПараметров.Прозрачность){
			ЭлементКонтейнер.style.opacity = СтруктураПараметров.Прозрачность;
		}
	}
	var link = ИмяСкрипта; 
	АдресВПараметрыURL(ДополнительныеПараметры);
	var ДанныеHTMLФормы = new FormData();
	ПараметрыURLВДанныеHTMLФормы(ДанныеHTMLФормы, ДополнительныеПараметры);
	var ЗапросHttp = НовыйЗапросHttp(); 
	if(ЗапросHttp){
		ЗапросHttp.open('post', link, Истина); 
		ЗапросHttp.withCredentials = Истина;
		ЗапросHttp.onreadystatechange = function (){
			if(ЗапросHttp.readyState === 4){
				var ТелоОтветаHttp = ЗапросHttp.responseText;
				ТелоОтветаHttp = ТелоОтветаHttp.trim();
				if(ГлобальныйКонтекст.ИспользуетсяВИнтрасети){
					// !!!!! Добавить проверки на корректный ответ, сделать в виде отдельной функции, так как вызываться  будет из нескольких мест
					ТелоОтветаHttp = ТелоОтветаHttp.replace('<!--v-can.Status: OK-->', '');
					ТелоОтветаHttp = ТелоОтветаHttp.trim();					
				}
				if(СтруктураПараметров.isJSON){
					// Необходимо заполнить значение нескольких элементов страницы. ID элементов переданы в JSON.
					var МассивДанных = JSON.parse(ТелоОтветаHttp);
					for (var parseElemID in МассивДанных) {
						parseElem = document.getElementById(parseElemID);
						if(ОчищатьСодержимое){
							parseElem.innerHTML = '';
						}
						parseElem.innerHTML = parseElem.innerHTML + МассивДанных[parseElemID];
					}
				}else if(СтруктураПараметров.isJSONArray){
					// Необходимо заполнить значение нескольких элементов страницы. ID элементов (или сами элементы) переданы в параметре elemArray.
					var МассивДанных = JSON.parse(ТелоОтветаHttp);
					for(var i=0; i < МассивДанных.length; i++) {
						parseElem = ЭлементHTMLДокумента(СтруктураПараметров.elemArray[i]);
						if(parseElem){
							if(parseElem.nodeName.toLowerCase() === 'input'){
								parseElem.value = МассивДанных[i];
							}else{
								if(ОчищатьСодержимое){
									parseElem.innerHTML = '';
								}
								parseElem.innerHTML = parseElem.innerHTML + МассивДанных[i];
							}
						}
					}
				}else{
					if(СтруктураПараметров.insertAdjacentHTML){
						// Добавить результат после целевого элемента
						if(ТелоОтветаHttp){
							ЭлементКонтейнер.insertAdjacentHTML(СтруктураПараметров.insertAdjacentHTML, ТелоОтветаHttp);
						}
					}else{
						// Поместить результат в целевой элемент
						if(ОчищатьСодержимое){
							ЭлементКонтейнер.innerHTML = '';
						}
						if(ТелоОтветаHttp){
							ЭлементКонтейнер.innerHTML = ЭлементКонтейнер.innerHTML + ТелоОтветаHttp;
						}
					}
				}
				if(СтруктураПараметров.Прозрачность){
					ЭлементКонтейнер.style.opacity = 1;
				}
				if(СтруктураПараметров.ПриЗагрузке){
					eval(СтруктураПараметров.ПриЗагрузке);
				}
		}
        } 
		ЗапросHttp.send(ДанныеHTMLФормы);
	}else{  
		{ document.location = link; }
	} 
} 

function ПолучитьДанныеИз1С(ИмяСкрипта, Параметры, АсинхронныйВызов, ЗапросHttp){
	if(АсинхронныйВызов === Неопределено){
		АсинхронныйВызов = Истина;
	}
	if(ЗапросHttp === Неопределено){
		ЗапросHttp = НовыйЗапросHttp();
	}
	var link = ''; 
	link = ИмяСкрипта;
	var ДанныеHTMLФормы = new FormData();
	ПараметрыURLВДанныеHTMLФормы(ДанныеHTMLФормы, Параметры)
	if(ЗапросHttp){
		ЗапросHttp.open('post', link, АсинхронныйВызов); 
		ЗапросHttp.withCredentials = Истина;
		if(ЗапросHttp.onreadystatechange === null){
			ЗапросHttp.onreadystatechange = function (){
				if(ЗапросHttp.readyState === 4){
					var ТелоОтветаHttp = ЗапросHttp.responseText;
					ТелоОтветаHttp = ТелоОтветаHttp.trim();
					if(ГлобальныйКонтекст.ИспользуетсяВИнтрасети){
						// !!!!! Добавить проверки на корректный ответ, сделать в виде отдельной функции, так как вызываться  будет из нескольких мест
						ТелоОтветаHttp = ТелоОтветаHttp.replace('<!--v-can.Status: OK-->', '');
						ТелоОтветаHttp = ТелоОтветаHttp.trim();					
					}
					return ТелоОтветаHttp;
				}
			} 
		} 
		ЗапросHttp.send(ДанныеHTMLФормы);
	}else{  
		{return null;}
	} 
	return ЗапросHttp.onreadystatechange();
} 

// Контекстный серверный запрос к 1С
function ВыполнитьФункцию1С(ИмяФункции, Параметры, АсинхронныйВызов, ЗапросHttp){
	Параметры.exec = ИмяФункции;
	if(ГлобальныйКонтекст.ИспользуетсяВИнтрасети){
		return ПолучитьДанныеИз1С(ГлобальныйКонтекст.Коннектор1С.ПутьКБазе1С + 'v-can.site/execute', Параметры, АсинхронныйВызов, ЗапросHttp);
	}else{
		return ПолучитьДанныеИз1С('ajax/req1c.php', Параметры, АсинхронныйВызов, ЗапросHttp);
	}
}

// ajax объект
function НовыйЗапросHttp(){
	try { return new XMLHttpRequest() } 
        catch(e){
		try { return new ActiveXObject('Msxml2.XMLHTTP') } 
		catch(e){
			try { return new ActiveXObject('Microsoft.XMLHTTP') } 
			catch(e) { return null; }
		}
	}
}

// Добавляет к данным формы обязательные параметры URL (запроса к 1С) и дополнительные параметры запроса
function ПараметрыURLВДанныеHTMLФормы(ДанныеHTMLФормы, ДополнительныеПараметры){
	var МассивПараметров = ОбязательныеПараметрыЗапросаК1С();
	for(Параметр in МассивПараметров){
		ДанныеHTMLФормы.append(Параметр, МассивПараметров[Параметр]);
	};
	for(Параметр in ДополнительныеПараметры){
		ДанныеHTMLФормы.append(Параметр, ДополнительныеПараметры[Параметр]);
	};	
}

function ПараметрыURLВМассив(){
	var ДанныеURL = window.location.search || document.location.search || location.search;
    var МассивВрем = [];
    var КлючИЗначение = [];
    var Результат = [];
    МассивВрем = (ДанныеURL.substr(1)).split('&');
    if(МассивВрем[0]=="") return false;
    for(Счетчик = 0; Счетчик < МассивВрем.length; Счетчик ++){
        КлючИЗначение = МассивВрем[Счетчик].split('=');
        Результат[КлючИЗначение[0]] = КлючИЗначение[1];
    }
    return Результат;
}

// Возвращает обязательные параметры URL - запроса к 1С
function ОбязательныеПараметрыЗапросаК1С(){
	requiredParams = {};
	// Обязательные параметры
	var vcanSessionID = ЗначениеCookie('vcanSessionID');
	if(!vcanSessionID){
		if(ЭлементHTMLДокумента('vcan_sessionid')){
			if(ЭлементHTMLДокумента('vcan_sessionid').value){
				vcanSessionID = ЭлементHTMLДокумента('vcan_sessionid').value;
			}
		}		
	}
	requiredParams.vcan_sessionid = vcanSessionID;
	requiredParams.t = Math.random();
	// Параметры объекта для доступа к базе 1С
	if(ГлобальныйКонтекст.ИспользуетсяВИнтрасети){
		requiredParams.siteID = ГлобальныйКонтекст.Коннектор1С.ИдентификаторСайта;
	}
	// Дополнительные общие для всех запросов параметры
	for(ИдентификаторПараметра in ГлобальныйКонтекст.ДополнительныеПараметрыЗапросов){
		requiredParams[ИдентификаторПараметра] = ГлобальныйКонтекст.ДополнительныеПараметрыЗапросов[ИдентификаторПараметра];
	}
	return requiredParams;
}

// Добавляет новый или обновляет значение старого дополнительного параметра запросов
function ДополнительныеПараметрыЗапросовУстановить(ИдентификаторПараметра, paramValue){
	ГлобальныйКонтекст.ДополнительныеПараметрыЗапросов[ИдентификаторПараметра] = paramValue;
}

// Удаляет значение дополнительного параметра запросов
function ДополнительныеПараметрыЗапросовУдалить(ИдентификаторПараметра){	
	delete ГлобальныйКонтекст.ДополнительныеПараметрыЗапросов[ИдентификаторПараметра];
}

// Возвращает значение дополнительного параметра запроса по его имени.
// Если параметр с таким именем не найден, то возвращается undefined.
function URLAdditionalParam(ИдентификаторПараметра){
	return ГлобальныйКонтекст.ДополнительныеПараметрыЗапросов[ИдентификаторПараметра];
}

// Установка значения куки
function УстановитьCookie(name, value, days) {
	var nf = new Date();
	nf.setDate(days + nf.getDate());
	document.cookie = name + '=' + value + '; path=/; expires=' + nf.toGMTString();
}

// Получение значения куки
function ЗначениеCookie(name) {
  var cookie = " " + document.cookie;
  var search = " " + name + "=";
  var setStr = null;
  var offset = 0;
  var end = 0;
  if (cookie.length > 0) {
    offset = cookie.indexOf(search);
    if (offset != -1) {
      offset += search.length;
      end = cookie.indexOf(";", offset)
      if (end === -1) {
        end = cookie.length;
      }
      setStr = unescape(cookie.substring(offset, end));
    }
  }
  return(setStr);
}

// Возвращает массив всех форм, у которых в качестве Владелец указана форма-параметр 
function getDependentForms(ФормаВладелец){
	var dfArr = [];
	for(ИдентификаторФормы in ГлобальныйКонтекст.Формы){
		if(ГлобальныйКонтекст.Формы[ИдентификаторФормы].Владелец === ФормаВладелец){
			dfArr.push(ГлобальныйКонтекст.Формы[ИдентификаторФормы]);
		}
	}
	return dfArr;
}

// Закрывает все зависимые формы
function ЗакрытьЗависимыеФормы(ФормаВладелец){
	// !!!!! Добавить сквозную переменную для отмены закрытия форм?
	var dfArr = getDependentForms(ФормаВладелец);
	while(dfArr.length > 0){
		if(dfArr[0].ЗакрытьФорму){
			dfArr[0].ЗакрытьФорму();
		}
		dfArr.splice(0, 1);
	}	
}

// Функция по событию клика определяет, был ли это клик по строке списка, и если да, то выполняет соответствующие действия
function ОбработкаСобытияКликаПоСтрокеТаблицы(Событие, Форма){
	//СнятьВыделение();
	var ИсточникСобытия = Событие.srcElement || Событие.target;
	// Проверим, не принадлежит ли найденный элемент подчиненной форме
	if(ЭлементHTMLПринадлежитПодчиненнойФорме(Форма, ИсточникСобытия)){
		return;
	}
	/*
	for(ИндексФормы in Форма.ПодчиненныеФормы){
		var ПодчиненнаяФорма = Форма.ПодчиненныеФормы[ИндексФормы];
		if(ПодчиненнаяФорма.КорневойЭлемент){
			if(ПодчиненнаяФорма.КорневойЭлемент.contains(ИсточникСобытия)){
				// Элемент принадлежит подчиненной форме
				return;
			}
		}
	}
	*/
	var ЭлементСтрока = Событие.target;
	while(ЭлементСтрока){
		if(ЭлементСтрока === Форма.КорневойЭлемент){
			// Это корневой элемент формы, выше искать смысла нет - это клик за пределами таблицы
			return;
		}
		if(ЭлементСтрока.classList.contains('ListFormRow')){
			var СтрокаИдентификаторФормы = АтрибутЭлементаHTML(ЭлементСтрока, 'formid');
			if(!СтрокаИдентификаторФормы){
				if(Событие.type === 'click' || Событие.type === 'change' || Событие.type === 'focus'){
					// Клик по строке списка
					Форма.УстановитьТекущуюСтроку(ЭлементСтрока, Неопределено, ИсточникСобытия);
					Форма.ПриНажатии(ЭлементСтрока, ИсточникСобытия, Событие);
				}else if(Событие.type === 'dblclick'){
					// Двойной клик по строке списка. Расценивается как событие выбора строки.
					СнятьВыделение();
					Форма.ОбработкаВыбора();
				}
			}else{
				if(СтрокаИдентификаторФормы === Форма.Идентификатор){
					if(Событие.type === 'click' || Событие.type === 'change' || Событие.type === 'focus'){
						// Клик по строке списка
						Форма.УстановитьТекущуюСтроку(ЭлементСтрока, Неопределено, ИсточникСобытия);
						Форма.ПриНажатии(ЭлементСтрока, ИсточникСобытия, Событие);
					}else if(Событие.type === 'dblclick'){
						// Двойной клик по строке списка. Расценивается как событие выбора строки.
						СнятьВыделение();
						Форма.ОбработкаВыбора();
					}
				}else{
					if(Событие.type === 'click' || Событие.type === 'change' || Событие.type === 'focus'){
						// Клик по строке списка вложенной формы
						ГлобальныйКонтекст.Формы[СтрокаИдентификаторФормы].УстановитьТекущуюСтроку(ЭлементСтрока, Неопределено, ИсточникСобытия);
						ГлобальныйКонтекст.Формы[СтрокаИдентификаторФормы].ПриНажатии(ЭлементСтрока, ИсточникСобытия, Событие);
					}else if(Событие.type === 'dblclick'){
						// Двойной клик по строке списка вложенной формы. Расценивается как событие выбора строки.
						СнятьВыделение();
						ГлобальныйКонтекст.Формы[СтрокаИдентификаторФормы].ОбработкаВыбора();
					}
				}
			}
			Событие.stopPropagation();
			break;
		}
		ЭлементСтрока = ЭлементСтрока.parentElement;	
	}
}

// Возврат значения атрибута элемента
function АтрибутЭлементаHTML(ЭлементПараметр, ИмяАтрибута){
	var Элемент = ЭлементHTMLДокумента(ЭлементПараметр);	
	if(Элемент === null || Элемент === Неопределено){
		return null;
	}else{
		if(Элемент.toString() === "[object Event]" || Элемент.toString() === "[object ClipboardEvent]"){
			// Это событие. Берем элемент из него.
			Элемент = Элемент.srcElement;
		}
		var Атрибут = Элемент.getAttribute(ИмяАтрибута);
		if(Атрибут === null){
			return null;
		}else{
			return Атрибут;
		}
	}
}

function УстановитьАтрибутЭлементаHTML(Элемент, ИмяАтрибута, Значение){
	Элемент.setAttribute(ИмяАтрибута, Значение);
}

function УдалитьАтрибутЭлементаHTML(Элемент, ИмяАтрибута){
	Элемент.removeAttribute(ИмяАтрибута);
}

// Проверят является ли значение ссылкой
function ЭтоСсылка(Значение){
	if(Значение && Значение.hasOwnProperty('Ссылка') && Значение.hasOwnProperty('Представление')){	
		return Истина;
	}else{
		return Ложь;
	}
}

// Проверят является ли значение ссылкой и если это так, то возвращает значение ссылки
function ЗначениеСсылки(Значение){
	if(ЭтоСсылка(Значение)){
		return Значение.Ссылка;
	}else{
		return Значение;
	}
}

// Проверяет, является ли ссылка пустой
function СсылкаПустая(Значение){
	СсылкаЗначение = Неопределено;
	if(ЭтоСсылка(Значение)){
		СсылкаЗначение = ЗначениеСсылки(Значение);
	}else if(typeof(Значение) === "string"){
		СсылкаЗначение = Значение;
	}
	if(СсылкаЗначение){
		if(СсылкаЗначение.indexOf('00000000000000000000000000000000%7D') > -1
		|| СсылкаЗначение.indexOf('00000000-0000-0000-0000-000000000000%7D') > -1
		|| СсылкаЗначение === '%7B%22%23%22%2C7db9b17a-7558-4fbb-8fe3-1799c9e3057b%7D'
		|| СсылкаЗначение === '%7B%22S%22%2C%22%22%7D'	// {"S",""}
		|| СсылкаЗначение === '%7B%22U%22%7D'			// {"U"}
		|| СсылкаЗначение === '%7B%22L%22%7D'){			// {"L"}
			// Ссылка пустая
			return Истина;
		}else{
			// Ссылка не пустая
			return Ложь;
		}
	}
	// Проверка на заполнение не пройдена, возвращаем Истина
	return Истина;
}

function ПодключениеОбработкиСобытияПриИзмененииДляЭлементовContenteditable(КорневойЭлемент){
	var РедактируемыеЭлементы = КорневойЭлемент.querySelectorAll('[contenteditable=true]');
	for(var Счетчик = РедактируемыеЭлементы.length - 1; Счетчик >= 0; Счетчик --) if(typeof(РедактируемыеЭлементы[Счетчик].onblur) != 'function'){
		РедактируемыеЭлементы[Счетчик].onfocus = function(){
			this.СодержимоеПередИзменением = this.innerHTML;
		};
		РедактируемыеЭлементы[Счетчик].onblur = function(){
			if(this.innerHTML != this.СодержимоеПередИзменением){
				if(typeof(this.onchange) === 'function'){
					this.onchange();
				}
				if(typeof(this.oninput) === 'function'){
					this.oninput();
				}
				delete this.СодержимоеПередИзменением;
			}
		};
	}
}

// Значение элемента для данных формы
function ЗначениеЭлементаДляДанныхФормы(Элемент){
	if(Элемент){
		if(Элемент.toString() === "[object Event]" || Элемент.toString() === "[object ClipboardEvent]"){
			// Это событие. Берем элемент из него.
			Элемент = Элемент.srcElement;
		}		
		var СсылкаТекст = АтрибутЭлементаHTML(Элемент, 'ref');
		if(Элемент.tagName.toLowerCase() === 'div' || Элемент.tagName.toLowerCase() === 'span'){
			var ТипЭлемента = Элемент.tagName.toLowerCase();
		}else{
			var ТипЭлемента = Элемент.type.toLowerCase();
		}
		if(СсылкаТекст != null){
			if(ТипЭлемента === 'div' || ТипЭлемента === 'span'){
				var ЗначениеЭлемента = Элемент.innerHTML;
			}else{
				var ЗначениеЭлемента = Элемент.value;
			}
			// Это ссылочное значение, возвращаем ссылку и ее представление
			if(!ЗначениеЭлемента){
				// Значение элемента было очищено, ссылку также необходимо очистить
				СсылкаТекст = "";
				Элемент.setAttribute("ref", СсылкаТекст);
			}
			var fdValue = {"Ссылка": СсылкаТекст, "Представление": ЗначениеЭлемента};
			return fdValue;
		}else if(ТипЭлемента === "checkbox"){
			return Элемент.checked;
		}else{
			// Возвращаем просто значение
			return Элемент.value;
		}
	}else{
		return null;
	}
}

function УстановитьЗначениеЭлементаHTMLТаблицы(Форма, ИмяРеквизита, ЗначениеРеквизита, ЭлементИлиИндекс){
	var ИндексСтроки = Неопределено;
	if(ЭлементИлиИндекс === Неопределено){
		// Индекс строки ТЧ не указан, используем текущую строку
		if(Форма.ТекущаяСтрока){
			ИндексСтроки = Форма.ТекущаяСтрока.rowIndex - 1; // Минус 1, так как первая строка - это заголовок таблицы
		}
	}else{
		if(typeof ЭлементИлиИндекс === 'object'){
			// Передана строка ТЧ
			ИндексСтроки = ЭлементИлиИндекс.rowIndex - 1;
		}else if(typeof ЭлементИлиИндекс === 'number'){
			// Передан индекс строки
			ИндексСтроки = ЭлементИлиИндекс;
		}		
	}
	if(ИндексСтроки != Неопределено){
		var СтрокаТЧ = Форма.КорневойЭлементHTMLТаблицы.tBodies[0].rows[ИндексСтроки];
		if(СтрокаТЧ){
			var Элемент = СтрокаТЧ.querySelectorAll('[formdataname="' + ИмяРеквизита + '"]')[0];
			УстановитьЗначениеЭлементаHTML(Элемент, ЗначениеРеквизита);
		}
	}
}

function УстановитьЗначениеЭлементаHTML(Элемент, ЗначениеРеквизита){
	if(Элемент){
		// !!!!! Добавить возможность выборки значения элемента из данных формы в случае, если ЗначениеРеквизита не задан
		if(ЭтоСсылка(ЗначениеРеквизита)){
			if(АтрибутЭлементаHTML(Элемент, 'ref') != null){
				Элемент.setAttribute('ref', ЗначениеРеквизита.Ссылка);
			}					
			var ЗначениеЭлемента = ЗначениеРеквизита.Представление;
		}else{
			var ЗначениеЭлемента = ЗначениеРеквизита;
		}
		if(Элемент.tagName.toLowerCase() === 'input'){
			if(Элемент.type.toLowerCase() === 'checkbox'){
				Элемент.checked = ЗначениеЭлемента;
			}else{
				Элемент.value = ЗначениеЭлемента;
			}
		}else if(Элемент.tagName.toLowerCase() === 'div' || Элемент.tagName.toLowerCase() === 'span'){
			Элемент.innerHTML = ЗначениеЭлемента;
		}
	}	
}

// Очистка поля ввода
function ОчиститьПолеВвода(ЭлементСсылкаУИД){
	var Элемент = ЭлементHTMLДокумента(ЭлементСсылкаУИД);
	if(Элемент){
		var АтрибутСсылка = АтрибутЭлементаHTML(Элемент, 'ref');
		if(АтрибутСсылка != null){
			// Это ссылочный реквизит
			Элемент.value = '';
			Элемент.setAttribute('ref', '');
		}else{
			// Сохраняем в данных формы значение поля ввода
			// !!!!! Добавить обработку для textarea
			switch(Элемент.type){
			case 'checkbox':
				// Флажок
				Элемент.checked = Ложь;
				break;
			case 'number':
				Элемент.value = 0;
				break;
			case 'text':
				Элемент.value = '';
				break;
			default:
				switch(Элемент.tagName.toLowerCase()){
				case 'div':
					Элемент.innerHTML = '';
					break;
				case 'span':
					Элемент.innerHTML = '';
					break;
				default:
					Элемент.value = Неопределено;
				}
			}						
		}		
	}		
}

function УстановкаДанныхФормыИзЗначенияЭлемента(ДанныеФормы, Элемент, ИмяРеквизита){
	var ЗначениеБылоИзменено = Ложь;
	var АтрибутСсылка = АтрибутЭлементаHTML(Элемент, 'ref');
	if(АтрибутСсылка != null){
		// Это ссылочный реквизит, сохраняем в данных формы ссылку и представление
		if(Элемент.tagName.toLowerCase() === 'select'){
			// Это список выбора. Перенесем в select ссылку из выбранного option
			if(Элемент.selectedOptions.length > 0){
				var СсылкаВыбранногоЭлемента = АтрибутЭлементаHTML(Элемент.selectedOptions[0], 'ref');
			}else{
				var СсылкаВыбранногоЭлемента = '';
			}
			УстановитьАтрибутЭлементаHTML(Элемент, 'ref', СсылкаВыбранногоЭлемента);
		}
		// Сохранение ссылки в данных формы
		var НовоеЗначение = ЗначениеЭлементаДляДанныхФормы(Элемент);
		if(ДанныеФормы[ИмяРеквизита] != Неопределено && ДанныеФормы[ИмяРеквизита].Ссылка != НовоеЗначение.Ссылка){
			if(СсылкаПустая(ДанныеФормы[ИмяРеквизита].Ссылка) === Истина && СсылкаПустая(НовоеЗначение.Ссылка) === Истина){
			}else{
				ЗначениеБылоИзменено = Истина;
			}
		}else{
			if(ДанныеФормы[ИмяРеквизита] === Неопределено && НовоеЗначение.Ссылка != Неопределено){
				ЗначениеБылоИзменено = Истина;
			}
		}
		if(ЗначениеБылоИзменено){
			ДанныеФормы[ИмяРеквизита] = ЗначениеЭлементаДляДанныхФормы(Элемент);
		}
	}else{
		// Сохраняем в данных формы значение поля ввода
		switch(Элемент.type){
		case 'checkbox':
			// Флажок
			if(ДанныеФормы[ИмяРеквизита] != Элемент.checked){
				ЗначениеБылоИзменено = Истина;
			}
			ДанныеФормы[ИмяРеквизита] = Элемент.checked;
			break;
		case 'number':
			if(ДанныеФормы[ИмяРеквизита] != СтрокуВЧисло(Элемент.value)){
				ЗначениеБылоИзменено = Истина;
			}
			ДанныеФормы[ИмяРеквизита] = СтрокуВЧисло(Элемент.value);
			break;
		case 'text':
			if(СодержитКласс(Элемент, 'digit-content')){
				// Элемент типа текст, но содержит числовое значение
				if(ДанныеФормы[ИмяРеквизита] !== СтрокуВЧисло(Элемент.value)){
					ЗначениеБылоИзменено = Истина;
				}
				ДанныеФормы[ИмяРеквизита] = СтрокуВЧисло(Элемент.value);
			}else{
				if(ДанныеФормы[ИмяРеквизита] !== Элемент.value){
					ЗначениеБылоИзменено = Истина;
				}
				ДанныеФормы[ИмяРеквизита] = Элемент.value;
			}
			break;
		default:
			//if(Элемент.hasOwnProperty('value') || Элемент.type === 'textarea'){
				// Для остальных типов просто берем значение элемента
				// Если у элемента нет значения, то ничего не делаем - этот элемент не мог быть изменен интерактивно, значит его значение уже было установлено ранее программно.
				if(Элемент.tagName.toLowerCase() === 'input' || Элемент.tagName.toLowerCase() === 'textarea'){
					if(ДанныеФормы[ИмяРеквизита] != Элемент.value){
						ЗначениеБылоИзменено = Истина;
					}
					ДанныеФормы[ИмяРеквизита] = Элемент.value;
				}else if(Элемент.tagName.toLowerCase() === 'span' || Элемент.tagName.toLowerCase() === 'div'){
					if(ДанныеФормы[ИмяРеквизита] != Элемент.innerHTML){
						ЗначениеБылоИзменено = Истина;
					}
					ДанныеФормы[ИмяРеквизита] = Элемент.innerHTML;
				}
				// !!!!! Добавить получение значения для select
			//}
		}						
	}
	if(ЗначениеБылоИзменено && АтрибутЭлементаHTML(Элемент, 'keydown') === 'true'){
		Элемент.setAttribute('keydown', '');
	}
	return ЗначениеБылоИзменено;
}

УстановитьЗначениеРеквизитаФормы = function(Форма, ИмяРеквизита, ЗначениеРеквизита, НеИнициироватьСобытиеПриИзменении){
	var ДанныеФормы = Форма.Объект;
	if(!ДанныеФормы){
		return Неопределено;
	}
	if(ДанныеФормы[ИмяРеквизита] != ЗначениеРеквизита){ // !!!!! Добавить сравнение ссылки
		// Установка данных формы
		ДанныеФормы[ИмяРеквизита] = ЗначениеРеквизита;
		// Обновление отображения
		Форма.УстановитьЗначениеДанныхФормы(ИмяРеквизита, ЗначениеРеквизита, НеИнициироватьСобытиеПриИзменении);
	}
}

УстановитьЗначениеДанныхФормы = function(Форма, ИмяРеквизита, ЗначениеРеквизита, НеИнициироватьСобытиеПриИзменении){
	var ЭлементHTMLКонтейнер = Форма.КорневойЭлемент;
	var ЭлементыФормы = ЭлементHTMLКонтейнер.querySelectorAll('[formdataname="' + ИмяРеквизита + '"]');
	if(ЭлементыФормы.length > 0){
		var Элемент = ЭлементыФормы[0];
		Форма.УстановитьЗначениеЭлементаHTML(ИмяРеквизита, ЗначениеРеквизита);
		if(НеИнициироватьСобытиеПриИзменении === Неопределено){
			Форма.ПриИзменении(Элемент);
		}
	}	
}

УстановитьЗначениеРеквизитаТаблицы = function(Форма, ИмяРеквизита, ЗначениеРеквизита, ДанныеФормыИлиИндекс, НеИнициироватьСобытиеПриИзменении){
	var ДанныеФормы = Неопределено;
	if(typeof ДанныеФормыИлиИндекс === 'object'){
		// Передана строка данных ТЧ
		ДанныеФормы = ДанныеФормыИлиИндекс;
	}else if(typeof ДанныеФормыИлиИндекс === 'number'){
		// Передан индекс строки
		ДанныеФормы = Форма.Строки[ДанныеФормыИлиИндекс];
	}
	if(!ДанныеФормы){
		return Неопределено;
	}
	if(ДанныеФормы[ИмяРеквизита] != ЗначениеРеквизита){ // !!!!! Добавить сравнение ссылки
		// Установка данных формы
		ДанныеФормы[ИмяРеквизита] = ЗначениеРеквизита;
		// Обновление отображения
		Форма.УстановитьЗначениеДанныхФормы(Форма.Строки.indexOf(ДанныеФормы), ИмяРеквизита, ЗначениеРеквизита, НеИнициироватьСобытиеПриИзменении);
	}
}

УстановитьЗначениеДанныхТаблицы = function(Форма, ЭлементИлиИндекс, ИмяРеквизита, ЗначениеРеквизита, НеИнициироватьСобытиеПриИзменении){
	if(typeof ЭлементИлиИндекс === 'object'){
		// Передана строка ТЧ
		ЭлементHTMLКонтейнер = ЭлементИлиИндекс;
	}else if(typeof ЭлементИлиИндекс === 'number'){
		// Передан индекс строки
		var ЭлементHTMLКонтейнер = Форма.КорневойЭлементHTMLТаблицы.tBodies[0].rows[ЭлементИлиИндекс];
	}
	var ЭлементыФормы = ЭлементHTMLКонтейнер.querySelectorAll('[formdataname="' + ИмяРеквизита + '"]');
	if(ЭлементыФормы.length > 0){
		var Элемент = ЭлементыФормы[0];
		Форма.УстановитьЗначениеЭлементаHTML(ИмяРеквизита, ЗначениеРеквизита, ЭлементИлиИндекс);
		if(НеИнициироватьСобытиеПриИзменении === Неопределено){
			Форма.ПриИзменении(Элемент);
		}
	}	
}

// Изменение поля ввода, с которым связаны другие
function ОбработкаИзмененияСвязанныхРеквизитов(ЭтаФорма, Элемент){
	var ИдентификаторыСвязей = АтрибутЭлементаHTML(Элемент, "masterfilterid");
	var Структура = ИдентификаторыСвязей.split(",");
	for (var Ключ in Структура){
		var Значение = Структура[Ключ].trim();
		if(Значение){
			if(ЭтаФорма.Тип === 'ТабличнаяЧасть'){
				// Для ТЧ областью поиска будет строка, которой принадлежит измененный главный реквизит
				var ОбластьПоиска = Элемент;
				var ОбластьПоиска = Элемент.parentElement;
				while(Истина){
					if(ОбластьПоиска.tagName.toLowerCase() === "tr"){
						break;
					}else{
						ОбластьПоиска = ОбластьПоиска.parentElement;
					}
				}				
			}else{
				// Для остальных форм - корневой элемент
				var ОбластьПоиска = ЭтаФорма.КорневойЭлемент;
			}
			var ЭлементыФормы = ОбластьПоиска.querySelectorAll('input[filterid="' + Значение + '"]');
			for (var Счетчик = 0, Количество = ЭлементыФормы.length; Счетчик < Количество; Счетчик++) {
				ЭтаФорма.ОчиститьПолеВвода(ЭлементыФормы[Счетчик]);
			}
		}
	}
}

function ИзменениеЭлементаПоМаске(I, M){
	// I - Элемент
	// M - массив, содержащий символы value элемента
	function R(s){return new RegExp('('+s.replace(/\(/g,'\\(').replace(/\)/g,'\\)').replace(/\//g,'\\/').replace(/9/g,'\\d').replace(/a/g,'[a-zа-яё]').replace(/\*/g,'[a-zа-яё0-9]')+')','gi')}
	function N(c,j,x){
		// Помещает значение массива М в value элемента I
		for(var k=0,s='';k<L;k++)s+=$[k]||c||'_';
		I.value=s;
		x?0:I.sC(!j?i:0)
	}
	function D(e,p,i){
		p=I.gC();
		if (p[0]==p[1]) {
			if(e)p[1]++;
			else p[0]--
		}
		for(i=p[0];i<p[1];i++)
			if(!S[i]&&$[i]){
				$[i]=0;
				j--
			}
		return p
	}
	function V(){
		// Если value элемента I соответствует маске, то помещает его в массив М.
		// Иначе выполняется обратное действие: значение массива М конвертируется в строку и помещается в value элемента I.
		setTimeout(function(k){
				I.value = I.value.replace(/[^\x20-\x7E]/g, ''); // Удаляем из строки служебные символы
				if (R(M).test(I.value)) {
					I.value=RegExp.$1;
					$=I.value.split('');
					for(k=j=0;k<L;k++)if(!S[k])j++
				}
				else N()
			},0)
	}
	function P(c){
		// Обработка события нажатия клавиши (onkeydown и onkeypress)
		if (c<35&&c!=8||c==45) return 1;
		switch(c){
			case 8:		i=D()[0]; return 0;
			case 46:	i=D(1)[1]; return 0;
			case 35:	i = L; return 1;
			case 36:	i = 1;
			case 37:	if (i-=2<-1) i=-1;
			case 39:	if (++i>L) i=L; return 1;
			default:	i=I.gC()[0];
						while(i<L&&S[i]){i++}
						if (i==L) return 0;
						
						c = String.fromCharCode(c)
						if (R(M.charAt(i)).test(c)) {
							D(1);
							$[i++] = c;
							j++;
							while(i<L&&S[i]){i++}
						}
						return 0
		}
	}
	
	var d=document, c='character', y=-100000, L=M.length, G=!c, i=0, j=0, $=M.split(''), S=M.split('');
	
	for (var k=0;k<L;k++) if (/a|9|\*/.test($[k])) $[k]=S[k]=0;
	I = typeof I=='string' ? d.getElementById(I) : I;
	
	I.sC = function(l,g){
		if(this.setSelectionRange) this.setSelectionRange(l,l);
		else {
			g = this.createTextRange();
			g.collapse(true);
			g.moveStart(c,y);
			g.move(c,l);
			g.select();
		}
	}
	I.gC = function(r,b){
		if (this.setSelectionRange) return [this.selectionStart,this.selectionEnd];
		else {
			r = d['selection'].createRange();
			b = 0-r.duplicate().moveStart(c,y)
			return [b,b+r.text.length]
		}
	}
	I.onfocus = function(){
		V();
		setTimeout(function(){N(0,!j)},0);
	}
	I.onblur = function(){
		j ? N(' ',0,1) : this.value='';
		ВызватьСобытиеЭлемента(this, 'change');
	}
	I.onkeydown = function(e,c){
		e = e||event;
		c = e.keyCode||e.charCode;
		
		if (c==8||c==46) {
			G = true;
			P(c);
			N();
			return !G
		}
		else if (!window.netscape&&(c>34&&c<38||c==39)) P(c)
	}
	I.onkeypress = function(e){
		if (G) return G=!G;
		e = e||event;
		if (P(e.keyCode||e.charCode)) return !G;
		N();
		return G
	}
	if (d.all&&!window.opera) I.onpaste=V;
	else I.addEventListener('input',V,false)
}

// У формы перебирает все input'ы и их имена и значения переводит в пары "Ключ-Значение" для передачи их в параметрах запроса
function ЭлементыФормыВПараметрыURL(ДополнительныеПараметры, ЭлементСсылкаУИД){	
	var Элемент = ЭлементHTMLДокумента(ЭлементСсылкаУИД);
	if(Элемент === null || Элемент === Неопределено) return null;

	var МассивЭлементов = Элемент.getElementsByTagName("input");
	for (var Счетчик = 0; Счетчик < МассивЭлементов.length; Счетчик++) {
		var ПолеВвода = МассивЭлементов[Счетчик];
		if(ПолеВвода.name){
			if(ПолеВвода.type ===  "checkbox"){
				ДополнительныеПараметры[ПолеВвода.name] = КодироватьКомпонентыURI(ПолеВвода.checked);
			}else{
				ДополнительныеПараметры[ПолеВвода.name] = КодироватьКомпонентыURI(ПолеВвода.value);
			}
		}
	}	

	var МассивЭлементов = Элемент.getElementsByTagName("textarea");
	for (var Счетчик = 0; Счетчик < МассивЭлементов.length; Счетчик++) {
		var ПолеВвода = МассивЭлементов[Счетчик];
		if(ПолеВвода.name){
        	ДополнительныеПараметры[ПолеВвода.name] = КодироватьКомпонентыURI(ПолеВвода.value);
		}
	}	
}

function АдресТекущейСтраницы(){
	if(!window.location.origin){
		window.location.origin = window.location.protocol + "//" 
		+ window.location.hostname 
		+ (window.location.port ? ':' + window.location.port : '');
	}
	var Адрес = location.origin + location.pathname;
	return Адрес;
}

// Параметры текущего адреса страницы переводит в структуру
function АдресВПараметрыURL(ДополнительныеПараметры, Адрес){
	if(Адрес){
		var ПараметрыАдреса = Адрес;
	}else{
		var ПараметрыАдреса = document.location.search;
	}
	if(ПараметрыАдреса){
		if(ПараметрыАдреса.length > 0){
			if(ПараметрыАдреса.charAt(0) === '?'){
				ПараметрыАдреса = ПараметрыАдреса.slice(1);
			}
			var МассивПараметров = ПараметрыАдреса.split("&").map(function(kv){
					   return kv.split("=", 2);
				   });
			МассивПараметров.forEach(function(КлючИЗначение, Счетчик, Массив) {
				ДополнительныеПараметры[КлючИЗначение[0]] = КлючИЗначение[1];
			});
		}
	}
}

function ДобавитьПараметрыURLВАдрес(Адрес, ПараметрыURL){
	var АдресСПараметрами = Адрес;
	if(АдресСПараметрами.indexOf('?') === -1){
		// В адресе нет параметров, первый разделитель должен быть знаком вопроса
		var Разделитель = '?';
	}else{
		// В адресе уже есть параметры
		var Разделитель = '&';
	}
	// Перебираем параметры
	for(ИмяПараметра in ПараметрыURL){
		// Добавляем параметр к адресу
		АдресСПараметрами = АдресСПараметрами + Разделитель + ИмяПараметра + '=' + ПараметрыURL[ИмяПараметра];
		// Меняем разделитель на '&' - дальше могут быть только такие разделители
		Разделитель = '&';
	}
	return АдресСПараметрами;
}

// Переводит значения атрибутов элемента в пары "Ключ-Значение" для передачи их в параметрах запроса
function АтрибутыЭлементаHTMLВПараметрыURL(Параметры, ЭлементСсылкаУИД, Префикс){
	var Элемент = ЭлементHTMLДокумента(ЭлементСсылкаУИД);
	if(Элемент){
		var Атрибуты = Элемент.attributes;
		for(var Счетчик = 0; Счетчик < Атрибуты.length; Счетчик++){
			Параметры[Префикс + Атрибуты[Счетчик].name] = КодироватьКомпонентыURI(Атрибуты[Счетчик].value);
		}
	}else{
		return '';
	}
}

// Переводит значения ассоциативного массива в пары "Ключ-Значение" для передачи их в параметрах запроса
function СтруктуруВПараметрыURL(Массив){ // !!!!! Устарела
	var Результат = '';
	for(Элемент in Массив){
       	Результат = Результат + "&" + Элемент + "=" + КодироватьКомпонентыURI(Массив[Элемент]);
	}
	return Результат;
}

// Если значение переменной "Значение" заполнено, то оно преобразуется в строку "Ключ-Значение" для передачи ее в параметрах запроса
function varToURLParam(Параметры, Ключ, Значение){ // !!!!! Устарела
	if(Значение){
       	Параметры[Ключ] = КодироватьКомпонентыURI(Значение);
	}
}

// Если значение переменной "Значение" заполнено, то оно помещается в ассоциативный	массив
// иначе если УдалятьЕслиНеЗаполнено = Истина, то ключ удаляется
function ПеременнуюВКлючСтруктуры(Структура, Ключ, Значение, УдалятьЕслиНеЗаполнено){
	if(Значение){
       	Структура[Ключ] = Значение;
	}else if(УдалятьЕслиНеЗаполнено){
		delete Структура[Ключ];
	}
}

// Если в качестве параметра передана строка, то ищет элемент по идентификатору, равному этой строке и возвращает его. Иначе считает, что передан элемент DOM и просто возвращает его.
function ЭлементHTMLДокумента(ЭлементСсылкаУИД){
	if(typeof ЭлементСсылкаУИД === 'string'){
		return document.getElementById(ЭлементСсылкаУИД)
	}else{
		if(ЭлементСсылкаУИД && ЭлементСсылкаУИД.toString() === "[object Event]"){
			// Это событие. Берем элемент из него.
			ЭлементСсылкаУИД = ЭлементСсылкаУИД.srcElement;
		}		
		return ЭлементСсылкаУИД;
	}
}

function СлучайныйИдентификатор(){
	return Math.random().toString(36).substr(2, 9);
}

// Получает из 1С новый уникальный идентификатор
function НовыйУникальныйИдентификатор(){
	var link = ''; 
	var ДанныеHTMLФормы = new FormData();
	ДанныеHTMLФормы.append("exec", КодироватьКомпонентыURI("КэнСайтСервер.НовыйУникальныйИдентификатор(ПараметрыЗапроса)"));
	ПараметрыURLВДанныеHTMLФормы(ДанныеHTMLФормы, {});
	var ЗапросHttp = НовыйЗапросHttp(); 
	if(ЗапросHttp){
		ЗапросHttp.open('post', "ajax/req1c.php", Ложь); 
		ЗапросHttp.withCredentials = Истина;
		ЗапросHttp.send(ДанныеHTMLФормы);
		var ТелоОтветаHttp = ЗапросHttp.responseText;
		if(ГлобальныйКонтекст.ИспользуетсяВИнтрасети){
			// !!!!! Добавить проверки на корректный ответ, сделать в виде отдельной функции, так как вызываться  будет из нескольких мест
			ТелоОтветаHttp = ТелоОтветаHttp.replace('<!--v-can.Status: OK-->', '');
		}
		ТелоОтветаHttp = ТелоОтветаHttp.trim();
		return JSON.parse(ТелоОтветаHttp);
	}else{  
		{return null;}
	} 
}

// Если у коллекции есть хотя бы один элемент, то возвращается первый из них, иначе возвращается Неопределено
function НулевойЭлементКоллекции(КорневойЭлемент, ИмяЭлемента, ВыбиратьПоИмениТега){
	if(КорневойЭлемент){
		if(ВыбиратьПоИмениТега){
			var Коллекция = КорневойЭлемент.getElementsByTagName(ИмяЭлемента);
		}else{
			var Коллекция = КорневойЭлемент.getElementsByClassName(ИмяЭлемента);
		}
		if(Коллекция.length > 0){
			return Коллекция[0];
		}else{
			return Неопределено;
		}
	}
	return Неопределено;
}

// Если у коллекции есть хотя бы один элемент, то возвращается последний из них, иначе возвращается Неопределено
function ПоследнийЭлементКоллекции(КорневойЭлемент, ИмяЭлемента, ВыбиратьПоИмениТега){
	if(КорневойЭлемент){
		if(ВыбиратьПоИмениТега){
			var Коллекция = КорневойЭлемент.getElementsByTagName(ИмяЭлемента);
		}else{
			var Коллекция = КорневойЭлемент.getElementsByClassName(ИмяЭлемента);
		}
		if(Коллекция.length > 0){
			return Коллекция[Коллекция.length - 1];
		}else{
			return Неопределено;
		}
	}
	return Неопределено;
}

// Отображение подложки модального окна
function ПодложкаМодальногоОкнаПоказать(ИдентификаторФормы, Порядок, НеЗакрыватьПриКлике){
	if(ЭлементHTMLДокумента(ИдентификаторФормы + "_shadow")){
		// Подложка уже была создана ранее
		return;
	}
	var Подложка = document.createElement('div');
	Подложка.id = ИдентификаторФормы + "_shadow";
	ДобавитьКлассHTMLЭлементу(Подложка, "modalwinshadow");
	ДобавитьКлассHTMLЭлементу(Подложка, "loading");
	if(Порядок){
		Подложка.style.zIndex = Порядок;
	}
	if(НеЗакрыватьПриКлике != Истина){
		Подложка.onclick = function(){
			ПодложкаМодальногоОкнаЗакрытьФорму(this);
		}
	}
	document.body.appendChild(Подложка);
}

// Модификация подложки после загрузки модальной формы
function ПодложкаМодальногоОкнаЗагружено(ИдентификаторФормы){
	if(ЭлементHTMLДокумента(ИдентификаторФормы + "_shadow")){
		УдалитьКлассHTMLЭлемента(ЭлементHTMLДокумента(ИдентификаторФормы + "_shadow"), "loading");
	}
}

// Скрытие подложки модального окна
function ПодложкаМодальногоОкнаСкрыть(ИдентификаторФормы){
	if(ЭлементHTMLДокумента(ИдентификаторФормы + "_shadow")){
		var Подложка = ЭлементHTMLДокумента(ИдентификаторФормы + "_shadow");
		Подложка.parentNode.removeChild(Подложка);
	}
}

// Закрытие формы, для которой создана подложка
function ПодложкаМодальногоОкнаЗакрытьФорму(ПодложкаЭлемент){
	var Форма = ГлобальныйКонтекст.Формы[ПодложкаЭлемент.id.replace("_shadow", "")];
	if(Форма){
		// Форма уже открыта, подложка будет убрана при ее закрытии
		if(Форма.ЗакрыватьПриНажатииНаПодложку){
			Форма.ЗакрытьФорму();
		}
	}else{
		// Формы еще нет, но подложку просят убрать. Пока будем убирать.
		// Правда, при этом есть вероятность, что форма рано или поздно откроется и будет без подложки.
		// Пока пусть будет так, понаблюдаем и решим, оставить так или изменить алгоритм.
		ПодложкаМодальногоОкнаСкрыть(ПодложкаЭлемент.id.replace("_shadow", ""));
	}
}

/*
function СнятьВыделение(){
    if(document.selection && document.selection.empty){
        document.selection.empty();
    }else if(window.getSelection){
        var Выделение = window.getSelection();
        Выделение.removeAllRanges();
    }
}
*/

function СнятьВыделение(){
	if(window.getSelection){
		if(window.getSelection().empty){
			// Chrome
			window.getSelection().empty();
		}else if (window.getSelection().removeAllRanges){
			// Firefox
			window.getSelection().removeAllRanges();
		}
	}else if(document.selection){
		// IE?
		document.selection.empty();
	}
}

// Переключение вкладок формы
function ПереключитьВкладкуФормы(Элемент){
	if(Элемент.parentNode.classList.contains('active')){
		// Это активная вкладка, ничего не делаем
		return;
	}
	// Переключение активной вкладки
	// Смена класса "active" у закладки
	var МассивЭлементов = Элемент.parentNode.parentNode.querySelectorAll('ul > li[class="active"]');
	МассивЭлементов = Array.prototype.slice.call(МассивЭлементов, 0);
	var МассивЭлементовВкладок = Элемент.parentNode.parentNode.parentNode.querySelectorAll('div[class="tab-content"]');
	МассивЭлементов.forEach(function(ЭлементМассива, Счетчик, Массив) {
		УдалитьКлассHTMLЭлемента(ЭлементМассива, 'active');
		if(МассивЭлементовВкладок.length > 0){
			var МассивСкрываемыхПанелей = МассивЭлементовВкладок[0].querySelectorAll('div[tabid="' + АтрибутЭлементаHTML(ЭлементМассива, "tabid") + '"]');
			if(МассивСкрываемыхПанелей.length > 0){
				var СкрываемаяПанель = МассивСкрываемыхПанелей[0];
				СкрываемаяПанель.style.display = "none";
				СкрываемаяПанель.style.opacity = 0;
			}
		}
	})
	ДобавитьКлассHTMLЭлементу(Элемент.parentNode, 'active');
	if(МассивЭлементовВкладок.length > 0){
		var МассивОтображаемыхПанелей = МассивЭлементовВкладок[0].querySelectorAll('div[tabid="' + АтрибутЭлементаHTML(Элемент.parentNode, "tabid") + '"]');
		if(МассивОтображаемыхПанелей.length > 0){
			var ОтображаемаяПанель = МассивОтображаемыхПанелей[0];
			ОтображаемаяПанель.style.display = "block";
			ОтображаемаяПанель.style.opacity = 1;
		}
	}
}

// Возвращает идентификатор активной вкладки панели вкладок
function ИдентификаторАктивнойВкладкиФормы(КорневойЭлемент){
	var МассивАктивныхВкладок = КорневойЭлемент.querySelectorAll('ul > li[class="active"]');
	if(МассивАктивныхВкладок.length > 0){
		return АтрибутЭлементаHTML(МассивАктивныхВкладок[0], 'tabid');
	}
	return null;
}

// Добавление класса элементу
function ДобавитьКлассHTMLЭлементу(o, c){
    var re = new RegExp("(^|\\s)" + c + "(\\s|$)", "g")
    if (re.test(o.className)) return
    o.className = (o.className + " " + c).replace(/\s+/g, " ").replace(/(^ | $)/g, "")
}
 
// Удаление класса у элемента
function УдалитьКлассHTMLЭлемента(o, c){
    var re = new RegExp("(^|\\s)" + c + "(\\s|$)", "g")
    o.className = o.className.replace(re, "$1").replace(/\s+/g, " ").replace(/(^ | $)/g, "")
}

function getScrollTop(){
	return scrollTop = window.pageYOffset || document.documentElement.scrollTop;
}

function КодироватьКомпонентыURI (str) {
  return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
    return '%' + c.charCodeAt(0).toString(16);
  });
}

// Начать/завершить редактирование элемента страницы
function elemEdit(elemID, startEdit){
	// Поиск элементов страницы
	var elemText = ЭлементHTMLДокумента(elemID + "_text");
	var elemInput = ЭлементHTMLДокумента(elemID + "_input");
	if(!elemText){
		return;
	}
	if(!elemInput){
		return;
	}
	if(startEdit){
		elemText.style.display = "none";
		elemInput.style.display = "";
	}else{
		elemText.style.display = "";
		elemInput.style.display = "none";
	}
}

function СодержитКласс(ЭлементHTML, ИмяКласса) {
    if(!ЭлементHTML || typeof ИмяКласса != 'string') {
        return Ложь;
    } else if(ЭлементHTML.className && ЭлементHTML.className.trim().split(/\s+/gi).indexOf(ИмяКласса) > -1) {
        return Истина;
    } else {
        return Ложь;
    }
}

function URLToFormData(URL){ // !!!!! Устарела?
	var result = {};
	var arrURL = URL.split("?");
	result['URL'] = arrURL[0];
	var paramsArr = arrURL[1].split("&").map(function (kv) {
						return kv.split("=", 2);
					});
	var ДанныеHTMLФормы = new FormData();
	// Добавление параметров запроса в данные формы
	paramsArr.forEach(function(item, i, arr) {
		ДанныеHTMLФормы.append(item[0], item[1]);
	});
	result['fData'] = ДанныеHTMLФормы;
	return result;
}

function СтрокуВЧисло(ИсходнаяСтрока){
	var Строка = ИсходнаяСтрока.replace(' ', '');
	Строка = Строка.replace(',', '.');
	var Число = 0;
	if(Строка){
		Число = Number(Строка);
		if(isNaN(Число)){
			Число = 0;
		}
	}
	return Число;
}

function ПолеВводаПриНажатииКнопки(Элемент){
	var Значение = Элемент.value;
	if(СодержитКласс(Элемент, 'digit-content')){
		// Оставляем только цифры и разделители
		Значение = Значение.replace(/[^\d,.]/g, '');
		// Заменяем запятые на точки
		Значение = Значение.replaceAll(',', '.');
		// Добавляем разделители разрядов
		if(Значение.indexOf('.') > -1){
			// Дробное число
			var СоставляющиеЧисла = Значение.toString().split('.');
			// Удаляем лишние точки
			while(СоставляющиеЧисла.length > 2){
				СоставляющиеЧисла.pop();
			}
			СоставляющиеЧисла[0] = СоставляющиеЧисла[0].replace(/\B(?=(\d{3})+(?!\d))/g, ' ');
			Значение = СоставляющиеЧисла.join('.');
		}else{
			// Целое число
			Значение = Значение.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ' ');
		}
		if(Элемент.value != Значение){
			Элемент.value = Значение;
		}
	}
}


// Проверяет корректность ввода введенного значения, выполняет предварительную обработку даты
function ПроверкаИОбработкаДаты(Элемент){
	var МассивСоставляющихДаты = Элемент.value.split('.');
	if(МассивСоставляющихДаты.length === 3){
		// Формат значения верный. Определим день, месяц и год.
		var ДеньСтрокой  = МассивСоставляющихДаты[0].trim();
		var МесяцСтрокой = МассивСоставляющихДаты[1].trim();
		var ГодСтрокой   = МассивСоставляющихДаты[2].trim();
		var День  = СтрокуВЧисло(ДеньСтрокой);
		var Месяц = СтрокуВЧисло(МесяцСтрокой);
		var Год   = СтрокуВЧисло(ГодСтрокой);
		// Проверка корректности ввода данных
		if(День > 0 && День < 32 && Месяц > 0 && Месяц < 13){
			// Данные соответствуют дате
			// Обработка даты
			if(Год === 0){
				// Год не введен, используем текущий год
				Год = new Date().getFullYear();
			}
			if(Год < 100){
				// Год введен, но не полностью
				Год = 2000 + Год;
			}
			Элемент.value = ЧислоСЛидирующимиНулями(День, 2) + '.' + ЧислоСЛидирующимиНулями(Месяц, 2) + '.' + Год;
		}
	}
}

function ЧислоСЛидирующимиНулями(Значение, КоличествоЗнаков){
    var ЧислоСтрокой = Значение + '';
    while (ЧислоСтрокой.length < КоличествоЗнаков) ЧислоСтрокой = '0' + ЧислоСтрокой;
    return ЧислоСтрокой;
}

// Отложенный вызов функции
(function(Function_prototype){
 Function_prototype.debounce = function(delay, ctx){
        var fn = this, timer;
        return function() {
            var args = arguments, that = this;
            clearTimeout(timer);
            timer = setTimeout(function() {
                fn.apply(ctx || that, args);
            }, delay);
        };
    };
})(Function.prototype);

// Убирает фокус с элемента ввода
function УбратьФокусСЭлемента(){
	if(this === window){
		var Элемент = document.activeElement;
	}else{
		var Элемент = this;
	}
	if(document.activeElement === Элемент){
		// Активный элемент сразу снова делаем активным, при этом событие "onchange" срабатывает и фокус не теряется
		Элемент.blur();
		Элемент.focus();
		fireEvent(Элемент, 'change');
	}else{
		Элемент.blur();
	}
}

function ВызватьСобытиеТекущегоЭлемента_ПриИзменении(Элемент){
	if(this === window){
		var Элемент = document.activeElement;
	}else{
		var Элемент = this;
	}	
	ВызватьСобытиеЭлемента(Элемент, 'change');
}

function ОбработкаСобытияТекущегоЭлемента_ОкончаниеВводаТекста(Событие){
	if(this === window){
		var Элемент = document.activeElement;
	}else{
		var Элемент = this;
	}	
	if(СодержитКласс(Элемент, 'digit-content')){
		// Форматирование числового значения
		var Значение = Элемент.value;
		Значение = Значение.replace(/[^\d,.]/g, '');
		if(Элемент.value != Значение){
			Элемент.value = Значение;
			if(ЭтоIE()){
				ВызватьСобытиеЭлемента(Элемент, 'change');
			}
		}
	}
}

function ВызватьСобытиеЭлемента(Элемент, ТипСобытия){
    if (document.createEventObject){
        // IE
        var Событие = document.createEventObject();
        return Элемент.fireEvent('on' + ТипСобытия, Событие)
    }
    else{
        // Firefox и другие
        var Событие = document.createEvent("HTMLEvents");
        Событие.initEvent(ТипСобытия, true, true); // Тип события, всплытие, возможность отмены
        return !Элемент.dispatchEvent(Событие);
    }
}

// Элемент видим (display != none у самого элемента или его родителей)
function ЭлементHTMLВидимость(Элемент){
	if (Элемент.offsetWidth === 0 || Элемент.offsetHeight === 0) return Ложь;
	var Высота = document.documentElement.clientHeight;
	var Границы = Элемент.getClientRects();
	if(Границы.length > 0) return Истина;
	/*
	on_top = function(r){
		var x = (r.left + r.right)/2, y = (r.top + r.bottom)/2;
		document.elementFromPoint(x, y) === Элемент;
	};
	for (var i = 0, l = Границы.length; i < l; i++){
		var r = Границы[i],
		in_viewport = r.top > 0 ? r.top <= Высота : (r.bottom > 0 && r.bottom <= Высота);
		if (in_viewport && on_top(r)) return Истина;
	}
	*/
	return Ложь;
}

// Элемент находится в видимой области окна
function ЭлементHTMLВВидимойОбластиОкна(Элемент){
	if(Элемент){
		// Все позиция элемента
		var ПозицияЭлемента = {
			Верх:  window.pageYOffset + Элемент.getBoundingClientRect().top,
			Лево:  window.pageXOffset + Элемент.getBoundingClientRect().left,
			Право: window.pageXOffset + Элемент.getBoundingClientRect().right,
			Низ:   window.pageYOffset + Элемент.getBoundingClientRect().bottom
		},
		// Позиция окна
		ПозицияОкна = {
			Верх:  window.pageYOffset,
			Лево:  window.pageXOffset,
			Право: window.pageXOffset + document.documentElement.clientWidth,
			Низ:   window.pageYOffset + document.documentElement.clientHeight
		};
		if(ПозицияЭлемента.Низ   > ПозицияОкна.Верх &&
		   ПозицияЭлемента.Верх  < ПозицияОкна.Низ &&
		   ПозицияЭлемента.Право > ПозицияОкна.Лево &&
		   ПозицияЭлемента.Лево  < ПозицияОкна.Право){
			// Элемент видим полностью
			return Истина;
		}else{
			// Элемент не видно
			return Ложь;
		}
	}else{
		return null;
	}
}

// Прокрутка страницы для позиции элемента
function ПрокруткаДоПозицииЭлемента(Элемент){
    var ПозицияX = 0;
    var ПозицияY = 0;
	var ВысотаОкна = document.documentElement.clientHeight;
	var ВысотаЭлемента = Элемент.getBoundingClientRect().bottom - Элемент.getBoundingClientRect().top;
	var ЭлементВрем = Элемент;
    while (ЭлементВрем != null) {
        ПозицияX += ЭлементВрем.offsetLeft;
        ПозицияY += ЭлементВрем.offsetTop;
        ЭлементВрем = ЭлементВрем.offsetParent;
    }     
	if(window.pageYOffset > ПозицияY){
		window.scrollTo(ПозицияX, ПозицияY);
	}else{
		window.scrollTo(ПозицияX, ПозицияY - ВысотаОкна + ВысотаЭлемента);
	}
}

function ГраницыЭлементаHTML(ЭлементИлиИдентификатор){
	var Элемент = ЭлементHTMLДокумента(ЭлементИлиИдентификатор);
	var Границы = Элемент.getClientRects();
	if(Границы.length > 0) return Границы[0];
	return Неопределено;
}

function ШиринаЭлементаHTML(Элемент){
	var Границы = ГраницыЭлементаHTML(Элемент);
	if(Границы){
		return Границы.width;
	}else{
		return Неопределено;
	}
}

////////////////////////////////////////////////////////////////////////////////////

// Возвращает индекс элемента в массиве. Если элемент не найден, возвращается -1
if([].indexOf){
	var ИндексВМассиве = function(Массив, Значение){
		return Массив.indexOf(Значение);
	}
}else{
	var ИндексВМассиве = function(Массив, Значение){
		for (var i = 0; i < Массив.length; i++){
			if (Массив[i] === Значение) return i;
		}
		return -1;
	}
}

// Обработка событий клавиатуры
window.addEventListener('keydown', function(Событие){
	var Событие = Событие || window.event;
	ОкноПриКнопкаНажата(Событие);
	if(Событие.defaultPrevented){
		// Событие было обработано и отменено в функции "ОкноПриКнопкаНажата(Событие)"
	}else{
		if(Событие.keyCode === 27){
			ОбработкаНажатияEsc(Событие);
		}else{
			ОбработкаСобытийКлавиатурыНаТаблице(Событие);
		}
	}
}, Ложь);			

// Обработка события нажатия кнопки. Может быть переопределена в пользовательских скриптах.
var ОкноПриКнопкаНажата = function(Событие){
}

// Обработка событий мыши
window.addEventListener('click', function(Событие){
	ОкноПриНажатии(Событие);
}, Ложь);			

// Обработка события мыши. Может быть переопределена в пользовательских скриптах.
var ОкноПриНажатии = function(Событие){
}

// Событие закрытия/обновления документа
window.onbeforeunload = function(){
	// Проверим наличие модифицированных форм
	var ЕстьИзмененныеФормы = Ложь;
	for(ИдентификаторФормы in ГлобальныйКонтекст.Формы){
		var ТекущаяФорма = ГлобальныйКонтекст.Формы[ИдентификаторФормы];
		if(ТекущаяФорма.hasOwnProperty("Модифицированность") && ТекущаяФорма.Модифицированность === Истина){
			// Форма модифицирована
			ЕстьИзмененныеФормы = Истина;
			break;
		}
	}
	if(ЕстьИзмененныеФормы){
		return 'Изменения данных при закрытии страницы будут потеряны. Продолжить?';
	}
	return; 
} 

window.onscroll = function(){
	if(ГлобальныйКонтекст.АктивнаяФорма && ГлобальныйКонтекст.АктивнаяФорма.Тип === "ФормаСписка"){
		var scrollTop	 = document.documentElement.scrollTop;
		var scrollHeight = document.documentElement.scrollHeight;
		var clientHeight = document.documentElement.clientHeight;
		if (scrollTop === (scrollHeight - clientHeight)){
			ГлобальныйКонтекст.АктивнаяФорма.ЗагрузитьСтраницу();
		}
	}
}

window.onload = function(){
	setTimeout(ПолучитьНовыеСообщенияПосетителюСайта, 1000);   // Получение сообщений при загрузке страницы
	setInterval(ПолучитьНовыеСообщенияПосетителюСайта, 60000); // Периодическое получение сообщений
}

function ЭтоIE(){
    var Агент = window.navigator.userAgent;
    var ПозицияПодстроки = Агент.indexOf("MSIE ");
    if (ПозицияПодстроки > 0 || !!navigator.userAgent.match(/Trident.*rv\:11\./))
    {
        return Истина;
    }
    return Ложь;
}

function ЭтоEdge(){
    if(/edge/i.test(navigator.userAgent))
    {
        return Истина;
    }
    return Ложь;
}

function ПоместитьТекстВБуферОбмена(Текст){
	var ВременныйЭлемент = document.createElement('input');
	ВременныйЭлемент.setAttribute('value', Текст);
	document.body.appendChild(ВременныйЭлемент);
	ВременныйЭлемент.select();
	document.execCommand('copy');
	document.body.removeChild(ВременныйЭлемент);
}

function СимволыСправа(Строка, КоличествоСимволов){
	if(typeof Строка != 'string'){
		if(Строка === Неопределено)
		Строка = '';
	}
	return Строка.substring(Строка.length-КоличествоСимволов, Строка.length);
}

function ПрофильПосетителяПоказатьМенюВыбораЯзыка(){
	if(ЭлементHTMLДокумента('ПрофильМенюВыбораЯзыка')){
		var Событие = window.event;
		Событие.stopPropagation();
		ЭлементHTMLДокумента('ПрофильМенюВыбораЯзыка').style.display = 'block';
	}
}

function ПрофильПосетителяСкрытьМенюВыбораЯзыка(){
	if(ЭлементHTMLДокумента('ПрофильМенюВыбораЯзыка') && ЭлементHTMLДокумента('ПрофильМенюВыбораЯзыка').style.display !== 'none'){
		ЭлементHTMLДокумента('ПрофильМенюВыбораЯзыка').style.display = 'none';
	}
}

function ПрофильПосетителяВыбратьЯзык(Элемент){
	ЭлементHTMLДокумента('ПрофильПосетителяЯзык').value = Элемент.innerHTML;
	ПрофильПосетителяСкрытьМенюВыбораЯзыка();
}

function АктивнаяФормаОбработкаВыбора(){
	ГлобальныйКонтекст.АктивнаяФорма.ОбработкаВыбора();
}

function РасширениеФайла(ФайлИлиИмя){
	if(typeof(ФайлИлиИмя) === 'string'){
		ИмяФайла = ФайлИлиИмя;
	}else{
		ИмяФайла = ФайлИлиИмя.name;
	}
	var Расширение = (/[.]/.exec(ИмяФайла)) ? /[^.]+$/.exec(ИмяФайла)[0] : '';
	return Расширение.trim();
}