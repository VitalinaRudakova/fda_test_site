// (с) Юрий Лазаренко, Севастополь
// e-mail lazarenkoyv@mail.ru
// v-can.Site Личный кабинет инициатора
// v 2.1.1.0
// 22.12.2020

var глНастройки = {};
var глТекущаяСтрокаСпискаОбращений = Неопределено;
var глТипОбращенияВТекущейСтроке = ""; // Устарела
var глВыбраннаяУслуга = Неопределено;
var глТекстНовогоОбращенияИзменен;
var глВыполняетсяОтправкаНовогоОбращения = Ложь;
var КоличествоЗапросовЗагрузкиИконокУслуг = 0;
var ОтборОтчета = {};
var глПредыдущаяСтраница = 1;

//////////////////////////////////////////////////////////////////////
// Авторизация пользователя, загрузка и инициализация главной формы //
//////////////////////////////////////////////////////////////////////

// Авторизация пользователя
function authOnLogin(){
	if(ПередЗагрузкойИнтерфейса()){
		// Отказ
		return;
	}
	if(ЭлементHTMLДокумента('authlk')){
		ЭлементHTMLДокумента('authlk').style.opacity = 0.5;
	}
	var vcan_sessionid = '';
	if(ЭлементHTMLДокумента('vcan_sessionid')){// !!!!! Это переделать! ID сессии обрабатывать в одной функции!
		vcan_sessionid = ЭлементHTMLДокумента('vcan_sessionid').value;
		vcan_sessionid = vcan_sessionid.replace('#vcan_sessionidStart#' ,'');
		vcan_sessionid = vcan_sessionid.replace('#vcan_sessionidEnd#' ,'');
		ЭлементHTMLДокумента('vcan_sessionid').value = vcan_sessionid;
	}	
	if(ЭлементHTMLДокумента('vcan_login')){
		var vcan_login = ЭлементHTMLДокумента('vcan_login').value;
	}else{
		var vcan_login = '';
	}
	if(ЭлементHTMLДокумента('vcan_password')){
		var vcan_password = ЭлементHTMLДокумента('vcan_password').value;
	}else{
		var vcan_password = '';
	}
	ЗапросК1С('КэнСайтСервер.Авторизация(ПараметрыЗапроса)', {vcan_login:vcan_login, vcan_password:vcan_password, vcan_sessionid:ЭлементHTMLДокумента('vcan_sessionid').value}, 'authForm', Истина, {ПриЗагрузке:'ЗагрузкаГлавнойСтраницы()'})
}

// Девторизация пользователя
function authOnLogout(){
	if(ЭлементHTMLДокумента('vcan_sessionid')){
		var vcan_sessionid = ЭлементHTMLДокумента('vcan_sessionid').value;
		vcan_sessionid = vcan_sessionid.replace('#vcan_sessionidStart#' ,'');
		vcan_sessionid = vcan_sessionid.replace('#vcan_sessionidEnd#' ,'');
		ЭлементHTMLДокумента('vcan_sessionid').value = vcan_sessionid;
	}
	ЗапросК1С('КэнСайтСервер.Авторизация(ПараметрыЗапроса)', {vcan_logout:ЭлементHTMLДокумента('vcan_logout').value, vcan_sessionid:vcan_sessionid}, 'authForm', Истина, {ПриЗагрузке:'ЗагрузкаГлавнойСтраницы()'})	
}

// Первоначальная загрузка главной страницы
function ЗагрузкаГлавнойСтраницы(){
	if(ПередЗагрузкойИнтерфейса()){
		// Отказ
		return;
	}
	if(typeof ПФ_ПередЗагрузкойГлавнойСтраницы === 'function'){
		// Вызов переопределяемой функции
		var ПараметрыФункции = {};
		ПФ_ПередЗагрузкойГлавнойСтраницы(ПараметрыФункции);
	}		
	if(ГлобальныйКонтекст.ИспользуетсяВИнтрасети){
		ЗапросК1С('КэнСайтСервер.Авторизация(ПараметрыЗапроса)', {}, 'authForm', Истина, {})
		//ЗапросК1С('КэнСайтСервер.Авторизация2(ПараметрыЗапроса)', {}, 'user-header-controls', Истина, {})
	}else{
		var nf = new Date();
		nf.setDate(30 + nf.getDate());
		if(ЭлементHTMLДокумента('vcan_sessionid')){
			var vcan_sessionid = ЭлементHTMLДокумента('vcan_sessionid').value;
			vcan_sessionid = vcan_sessionid.replace('#vcan_sessionidStart#' ,'');
			vcan_sessionid = vcan_sessionid.replace('#vcan_sessionidEnd#' ,'');
			ЭлементHTMLДокумента('vcan_sessionid').value = vcan_sessionid;
			document.cookie = 'vcanSessionID=' + vcan_sessionid + '; path=/; expires=' + nf.toGMTString();
		}
	}
	ЗапросК1С('ЛичныйКабинетИнициатораСайт.ФормаЛичногоКабинета(ПараметрыЗапроса)', {}, 'mainpage', Истина, {ПриЗагрузке:'ИнициализацияГлавнойСтраницы()'});
}

function ИнициализацияГлавнойСтраницы(){
	if(!ЭлементHTMLДокумента('ФормаЛичногоКабинета')){
		// Форма личного кабинета не загружена, возможно, не пройдена авторизация
		return;
	}
	if(typeof ПФ_ПередИнициализациейГлавнойСтраницы === 'function'){
		// Вызов переопределяемой функции
		var ПараметрыФункции = {};
		ПФ_ПередИнициализациейГлавнойСтраницы(ПараметрыФункции);
	}		
	//ОчиститьПолеВвода("НовоеОбращениеИнициатор");
	if(ЭлементHTMLДокумента('messageBox')){
		СкрытьОкноСообщения();
	}
	// Настройки программы и текущего пользователя
	глНастройки = JSON.parse(ЭлементHTMLДокумента('Настройки').innerHTML.trim());
	ПрименитьНастройкиИнтерфейса();
	ЭлементHTMLДокумента('Настройки').innerHTML = '';
	if(!глНастройки.ВариантИнтерфейсаВыбораУслуги){
		глНастройки.ВариантИнтерфейсаВыбораУслуги = 'Слайдер';
	}
	// ПриоритетУстановитьЗначениеПоУмолчанию();
	// Шапка мастера нового обращения
	if(ГлобальныйКонтекст.Формы.ШапкаМастераОбращения === Неопределено){
		var ШапкаМастераОбращения = new ПроизвольнаяФорма({
			Идентификатор: 'ШапкаМастераОбращения',
			КорневойЭлемент: 'ШапкаМастераОбращения',
			СоздаватьИзШаблона: Ложь,
			РежимОткрытияОкна: РежимОткрытияОкнаФормы.Независимый
		});
		ШапкаМастераОбращения.ПриИзмененииРеквизита = function(ЭлементРеквизита){
			ЭтаФорма = this;
			ЭтаФорма.УстановитьМодифицированность(Ложь);
		}	
		ШапкаМастераОбращения.Инициализировать();
		if(typeof ПФ_ПослеЗагрузкиМастераНовогоОбращения === 'function'){
			// Вызов переопределяемой функции
			var ПараметрыФункции = {};
			ПФ_ПослеЗагрузкиМастераНовогоОбращения(ПараметрыФункции);
		}
	}	
	// Загружаем меню доступных услуг.
	var ПараметрыЗагрузкиУслуг = {};
	if(глНастройки.ВариантИнтерфейсаВыбораУслуги === "Плитка"){
		var ПараметрыURL = {};
		АдресВПараметрыURL(ПараметрыURL);
		if(ПараметрыURL.serviceref){
			// В параметрах страницы указана ссылка на услугу.
			// Необходимо загрузить иконки услуг с отображением и активизацией этой услуги.
			ПараметрыЗагрузкиУслуг.servicerefpageload = ПараметрыURL.serviceref;
		}
	}	
	ЗагрузкаДоступныхУслуг(ПараметрыЗагрузкиУслуг);
	// Таблица уведомляемых
	if(ГлобальныйКонтекст.Формы.Уведомляемые === Неопределено){
		var Уведомляемые = new ТабличнаяЧасть({
			Идентификатор: 'Уведомляемые',
			КорневойЭлемент: 'Уведомляемые',
			ШаблонHTMLТаблицы: 'Уведомляемые',
			СоздаватьИзШаблона: Ложь,
			ОсновнаяТаблица: 'Документ.itilprofЗапросы.Уведомляемые',
			Колонки: 'Ссылка'
		});
		Уведомляемые.Загрузить();
		Уведомляемые.ПослеЗагрузки = function(){
			Уведомляемые.Инициализировать();
			Уведомляемые.РодительскаяФорма = ГлобальныйКонтекст.Формы.ШапкаМастераОбращения;
		}
	}
	if(ГлобальныйКонтекст.Формы.ШапкаСписка === Неопределено){
		var ШапкаСписка = new ПроизвольнаяФорма({
			Идентификатор: 'ШапкаСписка',
			КорневойЭлемент: 'ListHeaderForm',
			СоздаватьИзШаблона: Ложь,
			РежимОткрытияОкна: РежимОткрытияОкнаФормы.Независимый
		});
		ШапкаСписка.ПриИзмененииРеквизита = function(ЭлементРеквизита){
			ЭтаФорма = this;
			ЭтаФорма.УстановитьМодифицированность(Ложь);
			УстановитьОтборСпискаОбращений();
		}	
		ШапкаСписка.Инициализировать();
	}		
	
	ИнициализацияСпискаОбращений();
	ОтобразитьСтраницуМастераНовогоОбращения(2);
	if(ЭлементHTMLДокумента('messageBox')){
		ЭлементHTMLДокумента('messageBox').addEventListener('click', СкрытьОкноСообщения);
	}
	if(глТипОбращенияВТекущейСтроке != "2"){
		// Если тип отображаемых данных по обращению не равен "Комментарии", то скрываем блок комментариев
		//document.getElementById('addRequestDataComment').style.display = "none";
	}
	if(ГлобальныйКонтекст.ИспользуетсяВИнтрасети){
		ЗапускФормыОтправкиФайлов();
	}
	var ФормаСпискаОбращений = new ФормаСписка({
		Идентификатор: 'ФормаСпискаОбращений',
		КорневойЭлемент: 'СписокОбращений',
		РежимВыбора: Ложь,
		СоздаватьИзШаблона: Ложь,
		ШаблонФормы: 'customquery',
		ИмяФормы: 'ЛичныйКабинетИнициатораСайт.СписокОбращений(ПараметрыЗапроса)'
	});
	ФормаСпискаОбращений.ПослеЗагрузки = function(){
		var ЭтаФорма = this;
		ЭтаФорма.ЗагруженыВсеСтраницы = Истина;
		ЭтаФорма.УстановитьТекущуюСтроку(0);
		ИзменитьРазмерТаблицыСписка();
		КоличествоЗадачМне();
		if (глПредыдущаяСтраница > ГлобальныйКонтекст.ДополнительныеПараметрыЗапросов.ТекущаяСтраницаСписка) {
			ЭтаФорма.КорневойЭлемент.querySelector('#Пагинация a').focus();
		}
		глПредыдущаяСтраница = ГлобальныйКонтекст.ДополнительныеПараметрыЗапросов.ТекущаяСтраницаСписка;
	}
	ФормаСпискаОбращений.ПриВыборе = function(){
		if(ЭлементHTMLДокумента('requestFilterNew').classList.contains('selected') === Ложь){
			ОткрытьФормуОбращения(ГлобальныйКонтекст.Формы.ФормаСпискаОбращений.ТекущаяСтрока);
		}
	}
	ФормаСпискаОбращений.Инициализировать();
	if(ЭлементHTMLДокумента("СписокОбращений")){
		ЭлементHTMLДокумента("СписокОбращений").style.display = "none";
	}
	
	// Обработчик события вставки скриншота в поле описания обращения
	if(ЭлементHTMLДокумента('НовоеОбращениеТекст')){
		ЭлементHTMLДокумента('НовоеОбращениеТекст').addEventListener('paste', function(event){
			var БуферОбмена = event.clipboardData || window.clipboardData;
			if (БуферОбмена) {
				var items = БуферОбмена.files || БуферОбмена.items;
				if (items && items.length > 0) {
					event.preventDefault();
					// Находим изображение
					for (var i = 0; i < items.length; i++) {
						if (items[i].type.indexOf("image") !== -1) {
							if(ЭтоEdge()){
								alert('Ваш браузер не поддерживает вставку изображений');
							}else{
								// Добавляем файл к загрузке
								ГлобальныйКонтекст.Формы.newRequestFTF.ДобавитьФайлы(items);
								var fileid = ГлобальныйКонтекст.Формы.newRequestFTF.ДанныеОтправки[ГлобальныйКонтекст.Формы.newRequestFTF.ДанныеОтправки.length-1].Идентификатор;
								// Добавляем превью файла в поле ввода текста
								var URLObj = window.URL || window.webkitURL;
								var source = URLObj.createObjectURL(items[i]);
								ЭлементHTMLДокумента('НовоеОбращениеТекст').innerHTML = ЭлементHTMLДокумента('НовоеОбращениеТекст').innerHTML + ['<img class="texteditor-preview" fileid="' + fileid + '" title="', escape(items[i].name), '" src="', source, '" />'].join('');
							}
						}
					}
				}
				ГлобальныйКонтекст.Формы.newRequestFTF.ЭлементHTMLВставкаИзБуфераОбмена.InnerHTML = '';
			} else {      
				//setTimeout(checkInput, 1);
			}
		}, Ложь);
	}
		
	/*
	vcanVoice = new vcanVoice({
		varName: 'vcanVoice',
		recСontinuous: Ложь,
		recResultElem: ЭлементHTMLДокумента('vcan_recresult'),
		soundLevelMin: 10,
		soundLevelMax: 30,
		soundLevelIncStep: 5,
		soundLevelDecStep: 30,
		soundLevelElem: ЭлементHTMLДокумента('soundlevel')
	});
	vcanVoice.recognizer_onresult_final = function(){
		// При окончании распознавания речи отправить распознанный текст серверу 1С
		//sendRecognizedText();
	}
	vcanVoice.init();
	vcanVoice.startRecognition();	
	*/
	var ПараметрыURL = ПараметрыURLВМассив();
	if(ПараметрыURL.docref){
		ОткрытьФормуОбращения(ПараметрыURL.docref);
	}
	ПодключениеОбработкиСобытияПриИзмененииДляЭлементовContenteditable(ЭлементHTMLДокумента('МастерНовогоОбращения'));
	setInterval(КоличествоЗадачМне, 60000);  // Периодическое обновление количества назначенных задач
	
	// Отчеты
	// Список отчетов
	var СписокОтчетов = new ФормаСписка({
		Идентификатор: 'СписокОтчетов',
		ОсновнаяТаблица: 'Справочник.ЛКИ_Отчеты',
		КорневойЭлемент: 'СписокОтчетов',
		СоздаватьИзШаблона: Ложь,
		ШаблонHTMLТаблицы: 'Отчеты.ФормаСписка',
		ТекстЗапроса: 'ЛичныйКабинетИнициатораСайт.Отчеты_ТекстЗапроса(ПараметрыЗапроса, Параметры.Запрос, Параметры.ИсточникДанных)',
		РежимВыбора: Ложь,
		Колонки: 'Наименование, ДоступныеПоляОтбораСтрока'
	});
	СписокОтчетов.Инициализировать();
	СписокОтчетов.ПослеЗагрузки = function(){
		var ЭтаФорма = this;
		if(ЭтаФорма.КоличествоСтрок() > 0){
			if(ЭлементHTMLДокумента('requestFilterReports').style.display != 'inline-block'){
				ЭлементHTMLДокумента('requestFilterReports').style.display = 'inline-block';
			}
		}
	}
	СписокОтчетов.ПриВыборе = function(Параметры){
		var ЭтаФорма = this;
		ОтобразитьФормуОтчета();
	}
	СписокОтчетов.Загрузить();
	if(ГлобальныйКонтекст.Формы.Отчеты === Неопределено){
		var Отчеты = new ПроизвольнаяФорма({
			Идентификатор: 'Отчеты',
			КорневойЭлемент: 'Отчеты_ЭлементыОтбора',
			СоздаватьИзШаблона: Ложь,
			РежимОткрытияОкна: РежимОткрытияОкнаФормы.Независимый
		});
		Отчеты.ПриИзмененииРеквизита = function(ЭлементРеквизита){
			ЭтаФорма = this;
			ЭтаФорма.УстановитьМодифицированность(Ложь);
			Отчеты_УстановитьОтбор();
			Отчеты_ЭлементОтбораПриИзменении();
		}	
		Отчеты.Инициализировать();
	}		

	ОтборОбращенийПоСтатусу(1, this);
	if(typeof ПФ_ПослеИнициализацииГлавнойСтраницы === 'function'){
		// Вызов переопределяемой функции
		var ПараметрыФункции = {};
		ПФ_ПослеИнициализацииГлавнойСтраницы(ПараметрыФункции);
	}		
}

function ПрименитьНастройкиИнтерфейса(){
	if(Object.keys(глНастройки).length > 0){
		// Пока не используется
	}
}

function ЗагрузкаДоступныхУслуг(Параметры){
	if(typeof ПФ_ПередЗагрузкойДоступныхУслуг === 'function'){
		// Вызов переопределяемой функции
		var ПараметрыФункции = {};
		ПФ_ПередЗагрузкойДоступныхУслуг(ПараметрыФункции);
	}	
	if(Параметры){
	}else{
		Параметры = {};
	}
	if(глНастройки.ВариантИнтерфейсаВыбораУслуги === 'Плитка'){
		ЗапросК1С('ЛичныйКабинетИнициатораСайт.ДоступныеУслуги_Плитка(ПараметрыЗапроса)', Параметры, 'ДоступныеУслуги_Иконки', Истина, {Прозрачность:0.5, ПриЗагрузке:'ПослеЗагрузкиДоступныхУслуг(ДополнительныеПараметры)'});		
	}else{
		// После загрузки делаем видимыми группы, у которых не указан родитель - это группы верхнего уровня.
		ЗапросК1С('ЛичныйКабинетИнициатораСайт.ДоступныеУслуги_Слайдер(ПараметрыЗапроса)', Параметры, 'ДоступныеУслуги_Иконки', Истина, {Прозрачность:0.5, ПриЗагрузке:'ПослеЗагрузкиДоступныхУслуг(ДополнительныеПараметры)'});
	}
}

function ПослеЗагрузкиДоступныхУслуг(Параметры){
	if(typeof ПФ_ПриЗагрузкеДоступныхУслуг === 'function'){
		// Вызов переопределяемой функции
		var ПараметрыФункции = {};
		ПФ_ПриЗагрузкеДоступныхУслуг(ПараметрыФункции);
	}		
	if(Параметры){
	}else{
		Параметры = {};
	}
	if(глНастройки.ВариантИнтерфейсаВыбораУслуги === 'Слайдер'){
		// Инициализация слайдеров групп услуг
		var МассивГруппУслуг = document.querySelectorAll('.glider');
		for(var Счетчик = 0, КоличествоЭлементов = МассивГруппУслуг.length; Счетчик < КоличествоЭлементов; Счетчик++){
			new Glider(МассивГруппУслуг[Счетчик],{
				slidesToShow: 'auto',
				slidesToScroll: 'auto',
				draggable: true,
				dots: '.dots',
				arrows: {
					prev: '.glider-prev',
					next: '.glider-next'
				}
			});
		}
		// Фиксация начальной высоты каждой группы услуг
		for(var Счетчик = 0, КоличествоЭлементов = МассивГруппУслуг.length; Счетчик < КоличествоЭлементов; Счетчик++){
			var ВысотаГруппы = МассивГруппУслуг[Счетчик].getBoundingClientRect().bottom - МассивГруппУслуг[Счетчик].getBoundingClientRect().top;
			УстановитьАтрибутЭлементаHTML(МассивГруппУслуг[Счетчик], 'initheight', ВысотаГруппы + 'px');
		}
		// Скрытие групп
		for(var Счетчик = 0, КоличествоЭлементов = МассивГруппУслуг.length; Счетчик < КоличествоЭлементов; Счетчик++){
			if(АтрибутЭлементаHTML(МассивГруппУслуг[Счетчик], 'grouplevel') != '1'){
				МассивГруппУслуг[Счетчик].style.height = '0px';
			}
		}
		// Отображение услуг верхнего уровня
		ВыборДоступнойУслуги(Неопределено);
		// Активизация услуги, переданной в параметрах URL
		var ПараметрыURL = ПараметрыURLВМассив();
		if(ПараметрыURL.serviceref){
			ОтборОбращенийПоСтатусу('new', ЭлементHTMLДокумента('requestFilterNew'));
			НайтиИконкуУслуги(ПараметрыURL.serviceref);
		}
		/*
		// Отображение мастера нового обращения
		ЭлементHTMLДокумента('МастерНовогоОбращенияСтраница2').style.display = 'block';
		ЭлементHTMLДокумента('МастерНовогоОбращенияПодвал').style.display = 'block';
		ЭлементHTMLДокумента('ГруппаПоискаУслуги').style.display = 'block';
		*/

		// Если группы верхнего уровня отображаются в левом меню, то отображаем его и скрываем верхний уровень в слайдере
		/*
		ЭлементHTMLДокумента('ДоступныеУслуги_ЛевоеМеню').style.display = 'block';
		var КонтейнерРазделаУслуг = ЭлементHTMLДокумента('ДоступныеУслуги_Иконки');
		var СлайдерЭлемент = КонтейнерРазделаУслуг.querySelector('div[grouplevel="1"]');	
		СлайдерЭлемент.style.display = 'none';
		СлайдерЭлемент.parentNode.style.display = 'none';
		*/
		
		// Загрузка и замена иконок
		ЗагрузкаИконокУслуг();
	}else{
		ВыборДоступнойУслуги();
		// Активизация услуги, переданной в параметрах URL
		if(Параметры.servicerefpageload){
			НайтиИконкуУслуги(Параметры.servicerefpageload);
		}		
	}
	// Отображение мастера нового обращения
	ВидимостьСтраницы2МастераНовогоОбращения(Истина);
	ЭлементHTMLДокумента('МастерНовогоОбращенияПодвал').style.display = 'block';
	ЭлементHTMLДокумента('ГруппаПоискаУслуги').style.display = 'block';	
	if(typeof ПФ_ПослеЗагрузкиДоступныхУслуг === 'function'){
		// Вызов переопределяемой функции
		var ПараметрыФункции = {};
		ПФ_ПослеЗагрузкиДоступныхУслуг(ПараметрыФункции);
	}		
}

// Инициализация таблицы обращений
function ИнициализацияСпискаОбращений(){	
	глТекущаяСтрокаСпискаОбращений = null;
}

// Отбор обращений по по статусу
function ОтборОбращенийПоСтатусу(Статус, Элемент){
	if(ЭлементHTMLДокумента('МастерНовогоОбращения') && ЭлементHTMLДокумента('СписокОбращений')){
		ТекущаяСтраницаСписка(1);
		МассивЭлементов = document.getElementsByClassName('icon-filter');
		for (var Счетчик = 0; Счетчик < МассивЭлементов.length; Счетчик++) {
			УдалитьКлассHTMLЭлемента(МассивЭлементов[Счетчик], 'selected');
		}	
		ДобавитьКлассHTMLЭлементу(Элемент, 'selected');
		if(Статус === 'new'){
			// Открыть мастер создания нового обращения
			ЭлементHTMLДокумента('МастерНовогоОбращения').style.display = 'block';
			ЭлементHTMLДокумента('СписокОбращений').style.display = 'none';
			ЭлементHTMLДокумента('Отчеты').style.display = 'none';
			ГлобальныйКонтекст.УстановитьАктивнуюФорму(Неопределено);
			if(ЭлементHTMLДокумента('ПолеПоискаУслуги').value != ''){
				ЭлементHTMLДокумента('ПолеПоискаУслуги').value = '';
				ВыборДоступнойУслуги(Неопределено);
			}
			ОтобразитьСтраницуМастераНовогоОбращения(1);
		}else if(Статус === 'reports'){
			// Список отчетов
			ЭлементHTMLДокумента('МастерНовогоОбращения').style.display = 'none';
			ЭлементHTMLДокумента('СписокОбращений').style.display = 'none';
			ЭлементHTMLДокумента('Отчеты').style.display = 'block';
			ГлобальныйКонтекст.УстановитьАктивнуюФорму(Неопределено);
		}else{
			// Фильтр списка обращений
			ЭлементHTMLДокумента('МастерНовогоОбращения').style.display = 'none';
			ЭлементHTMLДокумента('СписокОбращений').style.display = 'block';
			ЭлементHTMLДокумента('Отчеты').style.display = 'none';
			ИнициализацияСпискаОбращений();
			ПеременнуюВКлючСтруктуры(ГлобальныйКонтекст.Формы.ФормаСпискаОбращений.Отбор, 'status', Статус);
			ЗагрузитьСписокОбращений();
		}
	}else{
		ПоказатьОкноСообщения('Страница загружается, подождите немного, пожалуйста!');
	}
}

// Отображение доступных услуг в зависимости от значения в поле поиска
function ПоискУслугиВыполнить(){
	if(typeof ПФ_ПередНачаломПоиска === 'function'){
		// Вызов переопределяемой функции
		var ПараметрыФункции = {};
		ПФ_ПередНачаломПоиска(ПараметрыФункции);
	}			
	ВыборДоступнойУслуги(Неопределено);
}

// При клике на иконку в разделе результатов поиска найти и активировать эту иконку в разделе услуг
function НайтиИконкуУслуги(ЭлементИлиСсылка){
	if(typeof ЭлементИлиСсылка === 'string'){
		// Передана ссылка на услугу
		var Ссылка = ЭлементИлиСсылка;
	}else{
		// Передан элемент-иконка
		var Ссылка = АтрибутЭлементаHTML(ЭлементИлиСсылка, 'ref');
	}
	// Найдем иконку с указанной ссылкой в разделе услуг
	КонтейнерРазделаУслуг = ЭлементHTMLДокумента('ДоступныеУслуги_Иконки');
	var НайденнаяИконка = КонтейнерРазделаУслуг.querySelector('div[ref="' + Ссылка + '"]');	
	if(НайденнаяИконка){
		ЭлементHTMLДокумента('ПолеПоискаУслуги').value = '';
		ОтобразитьВсеРодительскиеГруппыИконки(НайденнаяИконка);
	}else{
		ПоказатьОкноСообщения('Не найдена услуга с идентификатором ' + Ссылка);
	}
}

// Общая функция для выбора услуги в слайдере, плитке, при поиске
function ВыборДоступнойУслуги(Элемент, Параметры){
	if(typeof ПФ_ПередВыборомДоступнойУслуги === 'function'){
		// Вызов переопределяемой функции
		var ПараметрыФункции = {};
		ПФ_ПередВыборомДоступнойУслуги(ПараметрыФункции);
	}
	if(Параметры === Неопределено){
		Параметры = {};
	}
	var ЗначениеПоиска = ЭлементHTMLДокумента('ПолеПоискаУслуги').value.trim();
	var ДоступныеУслуги_Поиск = ЭлементHTMLДокумента('ДоступныеУслуги_Поиск');
	var ДоступныеУслуги_Поиск_Видимость = '';
	var ДоступныеУслуги_Иконки = ЭлементHTMLДокумента('ДоступныеУслуги_Иконки');
	var ДоступныеУслуги_Иконки_Видимость = '';

	if(ЗначениеПоиска){
		// Отображение результатов поиска
		ДоступныеУслуги_Поиск_Видимость = 'block';
		ДоступныеУслуги_Иконки_Видимость = 'none';
		ДоступныеУслуги_Поиск.innerHTML = ЭлементHTMLДокумента('ШаблонПрогрессаЗагрузки').innerHTML;
		ЗапросК1С('ЛичныйКабинетИнициатораСайт.ДоступныеУслуги_Поиск(ПараметрыЗапроса)', {ЗначениеПоиска: ЗначениеПоиска}, 'ДоступныеУслуги_Поиск', Истина, {});
	}else{
		// Отображение иконок услуг
		глВыбраннаяУслуга = Неопределено;
		ВидимостьСтраницы2МастераНовогоОбращения(Истина);
		ЭлементHTMLДокумента('ДополнительныеПоля').innerHTML = '';
		ДоступныеУслуги_Поиск_Видимость = 'none';
		ДоступныеУслуги_Иконки_Видимость = 'block';
		if(глНастройки.ВариантИнтерфейсаВыбораУслуги === 'Слайдер'){
			ВыборДоступнойУслуги_Слайдер(Элемент, Параметры);
		}
		if(глНастройки.ВариантИнтерфейсаВыбораУслуги === 'Плитка'){
			ВыборДоступнойУслуги_Плитка(Элемент, Параметры);
		}
	}
	if(ДоступныеУслуги_Иконки.style.display != ДоступныеУслуги_Иконки_Видимость){
		ДоступныеУслуги_Иконки.style.display = ДоступныеУслуги_Иконки_Видимость;
	}
	if(ДоступныеУслуги_Поиск.style.display != ДоступныеУслуги_Поиск_Видимость){
		ДоступныеУслуги_Поиск.style.display = ДоступныеУслуги_Поиск_Видимость;
	}
	if(typeof ПФ_ПослеВыбораДоступнойУслуги === 'function'){
		// Вызов переопределяемой функции
		var ПараметрыФункции = {};
		ПФ_ПослеВыбораДоступнойУслуги(ПараметрыФункции);
	}
}

function ВыборДоступнойУслуги_ЛевоеМеню(Элемент){
	var ЭлементСсылка = АтрибутЭлементаHTML(Элемент, 'ref');
	// Ищем элемент с такой же ссылкой в слайдере и "нажимаем" на него
	var КонтейнерРазделаУслуг = ЭлементHTMLДокумента('ДоступныеУслуги_Иконки');
	var ГруппаИконок = КонтейнерРазделаУслуг.querySelector('div[ref="' + ЭлементСсылка + '"]');	
	ВыборДоступнойУслуги(ГруппаИконок);
}

// Выбор доступной услуги в слайдере
function ВыборДоступнойУслуги_Слайдер(Элемент, Параметры){
	if(Элемент){
		var ЗаполнитьДанныеНовогоОбращения = Ложь;
		if(АтрибутЭлементаHTML(Элемент, 'isgroup') === 'true'){
			// Это нажатие на иконку группы. Отображаем подчиненные группы и услуги.
			var ЭлементСсылка = АтрибутЭлементаHTML(Элемент, 'ref');
			var КонтейнерПодчиненныхГрупп = Элемент.parentNode.parentNode.parentNode.nextElementSibling;
			if(!КонтейнерПодчиненныхГрупп){
				КонтейнерПодчиненныхГрупп = Элемент.parentNode.parentNode.nextElementSibling;
			}

			ЗаполнитьДанныеНовогоОбращения = Истина;
			глВыбраннаяУслуга = Элемент;
		}else{
			// Это нажатие на иконку услуги
			if(АтрибутЭлементаHTML(Элемент, 'extref')){
				// Открытие ссылки 
				window.open(АтрибутЭлементаHTML(Элемент, 'extref'), '_blank');
			}else{
				ЗаполнитьДанныеНовогоОбращения = Истина;
				глВыбраннаяУслуга = Элемент;
			}	
			// Необходимо найти все группы услуг, находящиеся на одном уровне с текущей услугой, и скрыть подчиненные им услуги
			МассивСоседнихГруппУслуг = Элемент.parentNode.querySelectorAll('div[isgroup="true"]');
			// Перебор соседних групп услуг
			for(var Счетчик1 = 0, КоличествоЭлементов1 = МассивСоседнихГруппУслуг.length; Счетчик1 < КоличествоЭлементов1; Счетчик1++){
				var ЭлементГруппы = МассивСоседнихГруппУслуг[Счетчик1];
				var КонтейнерПодчиненныхГрупп = ЭлементГруппы.parentNode.parentNode.parentNode.nextElementSibling;
				if(!КонтейнерПодчиненныхГрупп){
					КонтейнерПодчиненныхГрупп = ЭлементГруппы.parentNode.parentNode.nextElementSibling;
				}
				var МассивГруппУслуг = КонтейнерПодчиненныхГрупп.querySelectorAll('div[class="services-group"]');
				// Перебор и скрытие всех подчиненных групп текущей соседней группы
				for(var Счетчик2 = 0, КоличествоЭлементов2 = МассивГруппУслуг.length; Счетчик2 < КоличествоЭлементов2; Счетчик2++) {
					if(МассивГруппУслуг[Счетчик2].style.display != 'none'){
						if(Параметры.БезЗадержки){
							СкрытьГруппуУслуг(МассивГруппУслуг[Счетчик2].querySelector('div[class="glider draggable"]'), МассивГруппУслуг[Счетчик2], Истина);
						}else{
							setTimeout(СкрытьГруппуУслуг, 10, МассивГруппУслуг[Счетчик2].querySelector('div[class="glider draggable"]'), МассивГруппУслуг[Счетчик2]);
						}
					}
				}				
			}
		}
		ВыборДоступнойУслуги_ОбщиеДействия(Элемент, ЗаполнитьДанныеНовогоОбращения);
		// Установка признака активности текущему элементу
		var КонтейнерТекущейГруппы = Элемент.parentNode.parentNode.parentNode.parentNode;
		var МассивЭлементов = КонтейнерТекущейГруппы.querySelectorAll('.icon-service');
		for(var Счетчик = 0, КоличествоЭлементов = МассивЭлементов.length; Счетчик < КоличествоЭлементов; Счетчик++) {
			УдалитьКлассHTMLЭлемента(МассивЭлементов[Счетчик], 'act');
		}		
		ДобавитьКлассHTMLЭлементу(Элемент, 'act');
		if(глНастройки.ОчищатьСписокУведомляемыхПриВыбореУслуги){
			ГлобальныйКонтекст.Формы.Уведомляемые.Очистить();
		}
		// Описание услуги
		if(АтрибутЭлементаHTML(Элемент, 'servicedescr')){
			ЭлементHTMLДокумента('ОписаниеУслуги').innerHTML = АтрибутЭлементаHTML(Элемент, 'servicedescr');
		}else{
			ЭлементHTMLДокумента('ОписаниеУслуги').innerHTML = '';
		}
		ПриИзмененииОписанияУслуги();
		// Отметим текущую строку слайдера как активную
		// Сначала снимем атрибут активности у других строк
		var ТекущаяАктивнаяСтрока = ЭлементHTMLДокумента('ДоступныеУслуги').querySelector('div[class="glider-contain act"]');
		var НоваяАктивнаяСтрока = Элемент.parentNode.parentNode.parentNode;
		if(НоваяАктивнаяСтрока != ТекущаяАктивнаяСтрока){
			if(ТекущаяАктивнаяСтрока){
				УдалитьКлассHTMLЭлемента(ТекущаяАктивнаяСтрока, "act");
			}
			ДобавитьКлассHTMLЭлементу(НоваяАктивнаяСтрока, "act");
		}
	}else{
		// Текущий элемент не указан, значит это инициализация меню.
		// Скрываем все подчиненные группы, отображаем группы верхнего уровня
		var МассивГруппУслуг = ЭлементHTMLДокумента('МастерНовогоОбращенияСтраница1').querySelectorAll('div[class="services-group"]');
		for(var Счетчик = 0, КоличествоЭлементов = МассивГруппУслуг.length; Счетчик < КоличествоЭлементов; Счетчик++) {
			if(АтрибутЭлементаHTML(МассивГруппУслуг[Счетчик], 'parentref')){
				МассивГруппУслуг[Счетчик].style.display = 'none';
			}else{
				МассивГруппУслуг[Счетчик].style.display = 'block';				
			}
		}		
	}
	ВидимостьСтраницы2МастераНовогоОбращения(Истина);
	ДоступностьБыстройОтправки();
}

function ВыборДоступнойУслуги_Плитка(Элемент, Параметры){
	var МассивЭлементов = document.getElementsByClassName('icon-service');
	for (var i = 0; i < МассивЭлементов.length; i++) {
		УдалитьКлассHTMLЭлемента(МассивЭлементов[i], 'selected');
	}	
	if(Элемент){
		var ЗаполнитьДанныеНовогоОбращения = Ложь;
		if(АтрибутЭлементаHTML(Элемент, 'isgroup') === 'true'){
			// Загрузка услуг из текущей группы
			// Для нормального отображения подчиненных элементов сбрасываем отбор
			ЭлементHTMLДокумента('ПолеПоискаУслуги').value = '';
			ОтборУслуги = '';
			ЗапросК1С('ЛичныйКабинетИнициатораСайт.ДоступныеУслуги_Плитка(ПараметрыЗапроса)', {parent: АтрибутЭлементаHTML(Элемент, 'ref'), folderup: АтрибутЭлементаHTML(Элемент, 'folderup'), servicefilter: ОтборУслуги}, 'ДоступныеУслуги_Иконки', Истина, {'Прозрачность':0.5, ПриЗагрузке:'ПослеЗагрузкиДоступныхУслуг()'});
		}else{
			// Это нажатие на иконку услуги
			ДобавитьКлассHTMLЭлементу(Элемент, 'selected');
			if(АтрибутЭлементаHTML(Элемент, 'extref')){
				// Открытие ссылки 
				window.open(АтрибутЭлементаHTML(Элемент, 'extref'), '_blank');
			}else{
				ЗаполнитьДанныеНовогоОбращения = Истина;
				глВыбраннаяУслуга = Элемент;
			}			
		}
		ВыборДоступнойУслуги_ОбщиеДействия(Элемент, ЗаполнитьДанныеНовогоОбращения);
		/*
		// Установка признака активности текущему элементу
		var КонтейнерТекущейГруппы = Элемент.parentNode.parentNode.parentNode.parentNode;
		var МассивЭлементов = КонтейнерТекущейГруппы.querySelectorAll('.icon-service');
		for(var Счетчик = 0, КоличествоЭлементов = МассивЭлементов.length; Счетчик < КоличествоЭлементов; Счетчик++) {
			УдалитьКлассHTMLЭлемента(МассивЭлементов[Счетчик], 'act');
		}		
		ДобавитьКлассHTMLЭлементу(Элемент, 'act');
		if(глНастройки.ОчищатьСписокУведомляемыхПриВыбореУслуги){
			ГлобальныйКонтекст.Формы.Уведомляемые.Очистить();
		}
		*/
		// Описание услуги
		if(АтрибутЭлементаHTML(Элемент, 'servicedescr') && АтрибутЭлементаHTML(Элемент, 'folderup') == "false"){
			ЭлементHTMLДокумента('ОписаниеУслуги').innerHTML = АтрибутЭлементаHTML(Элемент, 'servicedescr');
		}else{
			ЭлементHTMLДокумента('ОписаниеУслуги').innerHTML = '';
		}
		ПриИзмененииОписанияУслуги();		
	}else{
		
		// Текущий элемент не указан, значит это инициализация меню.
		// Скрываем все подчиненные группы, отображаем группы верхнего уровня
		var МассивГруппУслуг = ЭлементHTMLДокумента('МастерНовогоОбращенияСтраница1').querySelectorAll('div[class="services-group"]');
		for(var Счетчик = 0, КоличествоЭлементов = МассивГруппУслуг.length; Счетчик < КоличествоЭлементов; Счетчик++) {
			if(АтрибутЭлементаHTML(МассивГруппУслуг[Счетчик], 'parentref')){
				МассивГруппУслуг[Счетчик].style.display = 'none';
			}else{
				МассивГруппУслуг[Счетчик].style.display = 'block';				
			}
		}
		
	}
	ВидимостьСтраницы2МастераНовогоОбращения(Истина);
	ДоступностьБыстройОтправки();
}

function ВыборДоступнойУслуги_ОбщиеДействия(Элемент, ЗаполнитьДанныеНовогоОбращения){
	if(ЗаполнитьДанныеНовогоОбращения){
		// Выбор услуги (типа обращения)
		var НовоеОбращениеУслугаЭлемент = ЭлементHTMLДокумента('НовоеОбращениеУслуга');
		НовоеОбращениеУслугаЭлемент.value = Элемент.innerText.trim();
		НовоеОбращениеУслугаЭлемент.setAttribute('ref', АтрибутЭлементаHTML(Элемент, 'serviceref'))

		// Выбор родительской услуги
		var НовоеОбращениеСервисЭлемент = ЭлементHTMLДокумента('НовоеОбращениеСервис');
		НовоеОбращениеСервисЭлемент.value = АтрибутЭлементаHTML(Элемент, 'sname');
		НовоеОбращениеСервисЭлемент.setAttribute('ref', АтрибутЭлементаHTML(Элемент, 'sname'))
		// Заполнение данных нового обращения
		НовоеОбращениеТемаУстановить(АтрибутЭлементаHTML(Элемент, 'servicename'));
		var НовоеОбращениеМаршрут = ЭлементHTMLДокумента('НовоеОбращениеМаршрут');
		НовоеОбращениеМаршрут.value = АтрибутЭлементаHTML(Элемент, 'routename');
		НовоеОбращениеМаршрут.setAttribute('ref', АтрибутЭлементаHTML(Элемент, 'routeref'));
		if(АтрибутЭлементаHTML(Элемент, 'topictemplate')){
			if(глНастройки.НеОчищатьИзмененныйВручнуюТекстОбращения && глТекстНовогоОбращенияИзменен && (ЭлементHTMLДокумента('НовоеОбращениеТекст').innerHTML.trim() != '' && ЭлементHTMLДокумента('НовоеОбращениеТекст').innerHTML.trim() != '<br>')){
				// Не очищаем введенный вручную текст обращения
			}else{
				ЭлементHTMLДокумента('НовоеОбращениеТекст').innerHTML = АтрибутЭлементаHTML(Элемент, 'topictemplate');
				глТекстНовогоОбращенияИзменен = Ложь;
			}
		}
		/* Загрузка дополнительных полей услуги
		if(глВыбраннаяУслуга){
			if(typeof ПФ_ПередЗагрузкойДополнительныхПолей === 'function'){
				// Вызов переопределяемой функции
				var ПараметрыФункции = {};
				ПФ_ПередЗагрузкойДополнительныхПолей(ПараметрыФункции);
			}			
			//ЭлементHTMLДокумента('ДополнительныеПоля').innerHTML = '';
			var ПараметрыЗапроса = {};
			ПараметрыЗапроса.ref = АтрибутЭлементаHTML(глВыбраннаяУслуга, 'ref');
			ПараметрыЗапроса.servref = АтрибутЭлементаHTML(глВыбраннаяУслуга, 'serviceref');
			ЗапросК1С('ЛичныйКабинетИнициатораСайт.ДополнительныеПоляДляЗаказаУслуги(ПараметрыЗапроса)', ПараметрыЗапроса, 'ДополнительныеПоля', Истина, {ПриЗагрузке:'ДополнительныеПоляПриЗагрузке()'});
		}
		*/
	}else{
		ОчиститьПолеВвода('НовоеОбращениеТема');
		ОчиститьПолеВвода('НовоеОбращениеМаршрут');
	}	
}

function ВидимостьСтраницы2МастераНовогоОбращения(Видимость){
	var ВидимостьЗначение = Видимость;
	if(глНастройки.НеОтображатьМастерПокаНеВыбранаУслуга){
		// Видимость зависит от того, выбрана ли услуга
		if(!глВыбраннаяУслуга){
			// Услуга не выбрана, страница не отображается в любом случае
			ВидимостьЗначение = Ложь;
		}
	}
	if(ВидимостьЗначение){
		ЭлементHTMLДокумента('МастерНовогоОбращенияСтраница2').style.display = "block";
	}else{
		ЭлементHTMLДокумента('МастерНовогоОбращенияСтраница2').style.display = 'none';
	}
}


function ВидимостьСтраницы2МастераНовогоОбращения(Видимость){
	var ВидимостьЗначение = Видимость;
	if(глНастройки.НеОтображатьМастерПокаНеВыбранаУслуга){
		// Видимость зависит от того, выбрана ли услуга
		if(!глВыбраннаяУслуга){
			// Услуга не выбрана, страница не отображается в любом случае
			ВидимостьЗначение = Ложь;
		}
	}
	if(ВидимостьЗначение){
		ЭлементHTMLДокумента('МастерНовогоОбращенияСтраница2').style.display = "block";
	}else{
		ЭлементHTMLДокумента('МастерНовогоОбращенияСтраница2').style.display = 'none';
	}
}

function ОтобразитьГруппуУслуг(Группа){
	var ВысотаГруппы = АтрибутЭлементаHTML(Группа, 'initheight');
	if(ВысотаГруппы){
		Группа.style.height = ВысотаГруппы;
	}else{
		Группа.style.height = '100%';
	}
}

function СкрытьГруппуУслуг(Элемент, Группа, БезЗадержки){
	Элемент.style.height = '0px';
	if(БезЗадержки){
		СкрытьГруппуУслугПолностью(Группа);
	}else{
		setTimeout(СкрытьГруппуУслугПолностью, 100, Группа);
	}
}

function СкрытьГруппуУслугПолностью(Группа){
	Группа.style.display = 'none';
}

function ОтобразитьВсеРодительскиеГруппыИконки(Элемент){
	var КонтейнерРазделаУслуг = ЭлементHTMLДокумента('ДоступныеУслуги_Иконки');
	var РодительСсылка = АтрибутЭлементаHTML(Элемент, 'parentgroupref');
	var МассивГруппИконок = [];
	while(РодительСсылка){
		// Найдем html-элемент родителя
		var ГруппаИконок = КонтейнерРазделаУслуг.querySelector('div[ref="' + РодительСсылка + '"]');	
		if(ГруппаИконок){
			МассивГруппИконок.unshift(ГруппаИконок);
		}
		РодительСсылка = АтрибутЭлементаHTML(ГруппаИконок, 'parentgroupref');
	}
	// Активация вышестоящих групп, сверху вниз
	МассивГруппИконок.forEach(function(РодительЭлемент, Счетчик, Массив) {
		ВыборДоступнойУслуги(РодительЭлемент, {БезЗадержки: Истина});
	});	
	// И в конце - активация самой иконки
	ВыборДоступнойУслуги(Элемент, {БезЗадержки: Истина});
}

function СортировкаДоступныхУслугПриИзменении(){
	ГлобальныйКонтекст.ДополнительныеПараметрыЗапросов.СортировкаДоступныхУслуг = ЭлементHTMLДокумента('СортировкаДоступныхУслуг').value;
	ЗагрузкаДоступныхУслуг();
}

// Инициализация формы добавления нового обращения
function ИнициализацияМастераНовогоОбращения(ПовторныйВызов){
	if(typeof ПФ_ПередИнициализациейМастераНовогоОбращения === 'function'){
		// Вызов переопределяемой функции
		var ПараметрыФункции = {};
		ПФ_ПередИнициализациейМастераНовогоОбращения(ПараметрыФункции);
	}
	ОчиститьПолеВвода("НовоеОбращениеТема");
	ОчиститьПолеВвода("НовоеОбращениеВлияние");
	ОчиститьПолеВвода("НовоеОбращениеСрочность");
	ОчиститьПолеВвода("НовоеОбращениеАктив");
	ОчиститьПолеВвода("НовоеОбращениеХарактеристика");
	ОчиститьПолеВвода("НовоеОбращениеУслуга");
	ОчиститьПолеВвода("НовоеОбращениеСервис");
	ОчиститьПолеВвода("НовоеОбращениеМаршрут");
	//ОчиститьПолеВвода("НовоеОбращениеИнициатор");
	ОчиститьПолеВвода("configurationItemType");
	ОчиститьПолеВвода("configurationItem");
	ОчиститьПолеВвода("АктивОтборРабочееМесто");
	ОчиститьПолеВвода("АктивОтборОрганизация");
	ОчиститьПолеВвода("activeSelectItem");
	ОчиститьПолеВвода("activeStructureSelectItem");
	ОчиститьПолеВвода("activeStructureSelectItemList");
	ЭлементHTMLДокумента('НовоеОбращениеТекст').innerHTML = '';
	глТекстНовогоОбращенияИзменен = Ложь;
	// ЭлементHTMLДокумента('ДополнительныеПоля').innerHTML = '';
	ЭлементHTMLДокумента('ОписаниеУслуги').innerHTML = '';
	МастерСозданияОбращенияЗаблокироватьЭлементы(Ложь);
	ДоступностьБыстройОтправки();
	ГлобальныйКонтекст.Формы['newRequestFTF'].Сброс();
	ГлобальныйКонтекст.Формы.Уведомляемые.Очистить();
	ГлобальныйКонтекст.Формы.Уведомляемые.РодительскаяФорма.Модифицированность = Ложь;
	ВыборДоступнойУслуги(Неопределено);
	// ПриоритетУстановитьЗначениеПоУмолчанию();
	if(ПовторныйВызов != Истина){
		ОтобразитьСтраницуМастераНовогоОбращения(1);
	}

	let btns = ЭлементHTMLДокумента("container-user-notify").querySelectorAll('.user-notify');
	if (btns.length) {
		btns.forEach(function(el) { return el.remove(); });
	}
	// ЭлементHTMLДокумента("configuration-unit-code").value = '';
	if(typeof ПФ_ПослеИнициализацииМастераНовогоОбращения === 'function'){
		// Вызов переопределяемой функции
		var ПараметрыФункции = {};
		ПФ_ПослеИнициализацииМастераНовогоОбращения(ПараметрыФункции);
	}
}

// Последнее обращение



// Перелистывание страниц мастера нового обращения
function ОтобразитьСтраницуМастераНовогоОбращения(ИндексСтраницы){

	/*
	var pagesCount = 2;
	for (var i = 1; i <= pagesCount; i++){
		pageElem = ЭлементHTMLДокумента('МастерНовогоОбращенияPage' + i);
		if (ИндексСтраницы == i){
			pageElem.style.display = "block";
		}else{
			pageElem.style.display = "none";
		}
	}
	*/
	if(ИндексСтраницы ==1){
		// Сброс формы
		ИнициализацияМастераНовогоОбращения(Истина);
	}else{
		if(ГлобальныйКонтекст.Формы.newRequestFTF === Неопределено){
			// Инициализация формы для передачи файлов на сервер
			if(ГлобальныйКонтекст.ИспользуетсяВИнтрасети){
				var newRequestFTF_UploadURL = ГлобальныйКонтекст.Коннектор1С.ПутьКБазе1С + '/v-can.site/execute';
			}else{
				var newRequestFTF_UploadURL = "ajax/userscripts/requestdatatransferfile.php";
			}
			newRequestFTF = new ФормаОтправкиФайлов({
				Идентификатор: "newRequestFTF",
				КорневойЭлемент: ЭлементHTMLДокумента("filesTransferDiv"),
				АдресОтправки: newRequestFTF_UploadURL,
				ОтправлятьКакСтроку: ГлобальныйКонтекст.ИспользуетсяВИнтрасети
			});
			newRequestFTF.Инициализировать();
			newRequestFTF.ПослеОтправки = function(){
				// Обращение добавлено. Скрываем окно добавления обращения, обновляем список обращений.
				ИнициализацияМастераНовогоОбращения();
				ЗагрузитьСписокОбращений();
				ПоказатьОкноСообщения("<center><b>Обращение отправлено! Через несколько минут Вам на почту придёт уведомление о регистрации с номером Вашего обращения</b></center>", 5000);
				ОтборОбращенийПоСтатусу(1, ЭлементHTMLДокумента("requestFilter1"));
			}
			try {
				ГлобальныйКонтекст.Формы.newRequestFTF.ЭлементHTMLСписокФайлов.style.width = "unset";
			} catch(e) {
				console.warn(e);
			}
		}
		if(ГлобальныйКонтекст.Формы.РедакторТекстаОбращения === Неопределено){
			// Редактор описания обращения
			if(ГлобальныйКонтекст.Формы.РедакторТекстаОбращения === Неопределено){
				ГлобальныйКонтекст.Формы.РедакторТекстаОбращения = new nicEditor({buttonList : ['fontSize','bold','italic','underline','strikeThrough','bgcolor','forecolor', 'upload']}).panelInstance('НовоеОбращениеТекст');
				var imgButtonHTML = ГлобальныйКонтекст.Формы.РедакторТекстаОбращения.nicPanel.panelButtons[6].button.parentNode.innerHTML;
				ГлобальныйКонтекст.Формы.РедакторТекстаОбращения.nicPanel.panelButtons[6].button.parentNode.innerHTML = "";
				ГлобальныйКонтекст.Формы.РедакторТекстаОбращения.nicPanel.panelButtons[6].contain.innerHTML = imgButtonHTML;
				ГлобальныйКонтекст.Формы.РедакторТекстаОбращения.nicPanel.panelButtons[6].button = ГлобальныйКонтекст.Формы.РедакторТекстаОбращения.nicPanel.panelButtons[6].contain.children[0];
				ГлобальныйКонтекст.Формы.РедакторТекстаОбращения.nicPanel.panelButtons[6].button.onclick = function(){
					ГлобальныйКонтекст.Формы.newRequestFTF.ЭлементHTMLВыборФайла.click();
				};
				ГлобальныйКонтекст.Формы.РедакторТекстаОбращения.nicPanel.panelContain.parentElement.style.width = 'unset';
				ГлобальныйКонтекст.Формы.РедакторТекстаОбращения.nicPanel.elm.style.width = '100%';
			}
		}
		/*
		if(глВыбраннаяУслуга){
			ЭлементHTMLДокумента('ДополнительныеПоля').innerHTML = '';
			ЗапросК1С('ЛичныйКабинетИнициатораСайт.ДополнительныеПоляДляЗаказаУслуги(ПараметрыЗапроса)', {serviceref: АтрибутЭлементаHTML(глВыбраннаяУслуга, 'serviceref')}, 'ДополнительныеПоля', Истина, {ПриЗагрузке:'ДополнительныеПоляПриЗагрузке()'});
		}
		*/
	}
}

function ДополнительныеПоляПриЗагрузке(){
	if(typeof ПФ_ПриЗагрузкеДополнительныхПолей === 'function'){
		// Вызов переопределяемой функции
		var ПараметрыФункции = {};
		ПФ_ПриЗагрузкеДополнительныхПолей(ПараметрыФункции);
	}
	/*
	var addServiceFields = ЭлементHTMLДокумента('additionalProperties').querySelectorAll('input[asf]');
	if(addServiceFields.length > 0){
		ЭлементHTMLДокумента('mainProperties').classList.add("col-md-8");
		ЭлементHTMLДокумента('mainProperties').classList.remove("col-md-12");
	}else{
		ЭлементHTMLДокумента('mainProperties').classList.add("col-md-12");
		ЭлементHTMLДокумента('mainProperties').classList.remove("col-md-8");		
	}
	*/
	if(typeof ПФ_ПослеЗагрузкиДополнительныхПолей === 'function'){
		// Вызов переопределяемой функции
		var ПараметрыФункции = {};
		ПФ_ПослеЗагрузкиДополнительныхПолей(ПараметрыФункции);
	}
}

function ПриИзмененииТекстаНовогоОбращения(){
	if(!глТекстНовогоОбращенияИзменен){
		глТекстНовогоОбращенияИзменен = Истина;
	}
	ДоступностьБыстройОтправки();
}

function ДанныеДляСозданияОбращенияЗаполнены(){
	var НеобходимыеДанныеЗаполнены = true;
	var НовоеОбращениеТема = НовоеОбращениеТемаПолучить();
	if(глНастройки.ОбязательноеЗаполнениеОписанияОбращения){
		// Текст обращения должен быть заполнен
		if(!ЭлементHTMLДокумента('НовоеОбращениеТекст').innerText.trim()){
			// Текста нет
			НеобходимыеДанныеЗаполнены = false;
		}
		// if(!глТекстНовогоОбращенияИзменен){
			// Текст может и есть, но он был заполнен из шаблона услуги и не изменялся вручную
			// НеобходимыеДанныеЗаполнены = false;
		// }
	}
	if(НовоеОбращениеТема && АтрибутЭлементаHTML("НовоеОбращениеМаршрут", "ref")){
	}else{
		НеобходимыеДанныеЗаполнены = false;
	}
	/*
	if(НовоеОбращениеТема && АтрибутЭлементаHTML("НовоеОбращениеИнициатор", "ref")){
	}else{
		НеобходимыеДанныеЗаполнены = false;
	}
	*/
	return НеобходимыеДанныеЗаполнены;
}

// Добавление нового обращения в 1С
function ДобавитьНовоеОбращение(){
	if(typeof ПФ_ПередДобавлениемНовогоОбращения === 'function'){
		// Вызов переопределяемой функции
		var ПараметрыФункции = {};
		ПараметрыФункции.Отказ = Ложь;
		ПФ_ПередДобавлениемНовогоОбращения(ПараметрыФункции);
		if(ПараметрыФункции.Отказ){
			// В переопределяемой функции установлен флаг отказа
			return;
		}
	}
	if(глВыполняетсяОтправкаНовогоОбращения){
		return;
	}
	ПоказатьСообщениеЗагрузки();
	setTimeout(ДобавитьНовоеОбращениеВыполнить, 10);
}

function ДобавитьНовоеОбращениеВыполнить(){
	if(typeof ПФ_ПриДобавленииНовогоОбращения === 'function'){
		// Вызов переопределяемой функции
		var ПараметрыФункции = {};
		ПараметрыФункции.Отказ = Ложь;
		ПФ_ПриДобавленииНовогоОбращения(ПараметрыФункции);
		if(ПараметрыФункции.Отказ){
			// В переопределяемой функции установлен флаг отказа
			СкрытьСообщениеЗагрузки();
			return;
		}
	}
	var НовоеОбращениеТема = НовоеОбращениеТемаПолучить();
	var НовоеОбращениеТекст = ЭлементHTMLДокумента('НовоеОбращениеТекст').innerHTML;
	if(ДанныеДляСозданияОбращенияЗаполнены()){
		НовоеОбращениеТема = КодироватьКомпонентыURI(НовоеОбращениеТема);
		НовоеОбращениеТекст = КодироватьКомпонентыURI(НовоеОбращениеТекст);
		var link = ''; 
		var Параметры = ОбязательныеПараметрыЗапросаК1С();
		ПеременнуюВКлючСтруктуры(Параметры, "ПользовательскоеМеню_Ссылка",			КодироватьКомпонентыURI(АтрибутЭлементаHTML(глВыбраннаяУслуга,				"ref")));
		ПеременнуюВКлючСтруктуры(Параметры, "НовоеОбращениеАктив_Ссылка",			КодироватьКомпонентыURI(АтрибутЭлементаHTML("НовоеОбращениеАктив",			"ref")));
		ПеременнуюВКлючСтруктуры(Параметры, "НовоеОбращениеУслуга_Ссылка",			КодироватьКомпонентыURI(АтрибутЭлементаHTML("НовоеОбращениеУслуга",			"ref")));
		ПеременнуюВКлючСтруктуры(Параметры, "НовоеОбращениеМаршрут_Ссылка",			КодироватьКомпонентыURI(АтрибутЭлементаHTML("НовоеОбращениеМаршрут",		"ref")));
		ПеременнуюВКлючСтруктуры(Параметры, "НовоеОбращениеИнициатор_Ссылка",		КодироватьКомпонентыURI(АтрибутЭлементаHTML("НовоеОбращениеИнициатор",		"ref")));
		ПеременнуюВКлючСтруктуры(Параметры, "НовоеОбращениеХарактеристика_Ссылка",	КодироватьКомпонентыURI(АтрибутЭлементаHTML("НовоеОбращениеХарактеристика",	"ref")));
		// Дополнительные поля услуг
		var addServiceFields = ЭлементHTMLДокумента('ДополнительныеПоля').querySelectorAll('input[asf]');
		if(addServiceFields.length > 0){
			var addServiceFieldsArr = [];
			for (var i = 0, len = addServiceFields.length; i < len; i++) {
				if(АтрибутЭлементаHTML(addServiceFields[i], 'ref')){
					var propvalue = АтрибутЭлементаHTML(addServiceFields[i], 'ref');
				}else{
					var propvalue = addServiceFields[i].value;
				}
				addServiceFieldsArr.push({propref:АтрибутЭлементаHTML(addServiceFields[i], 'propref'), propvalue: propvalue});
			}
			ПеременнуюВКлючСтруктуры(Параметры, "МассивДопПолейУслуг", JSON.stringify(addServiceFieldsArr));
		}
		// Уведомляемые
		if(ГлобальныйКонтекст.Формы.Уведомляемые.Строки.length > 0){
			ГлобальныйКонтекст.Формы.Уведомляемые.Строки.filter(function(el) { return el != null });

		}
		if(ГлобальныйКонтекст.Формы.Уведомляемые.Строки.length > 0){
			ПеременнуюВКлючСтруктуры(Параметры, "Уведомляемые", JSON.stringify(ГлобальныйКонтекст.Формы.Уведомляемые.Строки));
		}
		var ДанныеФормы = new FormData();
		if(ГлобальныйКонтекст.ИспользуетсяВИнтрасети){
			link = ГлобальныйКонтекст.Коннектор1С.ПутьКБазе1С + '/v-can.site/execute';
			ДанныеФормы.append('exec', КодироватьКомпонентыURI('ЛичныйКабинетИнициатораСайт.ДобавитьНовоеОбращение(ПараметрыЗапроса)'));
		}else{
			link = 'ajax/userscripts/addnewrequest.php';
		}
		ДанныеФормы.append('НовоеОбращениеТема',	  НовоеОбращениеТема);
		ДанныеФормы.append('НовоеОбращениеТекст',	  НовоеОбращениеТекст);
		ДанныеФормы.append('НовоеОбращениеПриоритет', ПриоритетТекущееЗначение());
		for(ИмяПараметра in Параметры){
			ДанныеФормы.append(ИмяПараметра, Параметры[ИмяПараметра])
		}
		МастерСозданияОбращенияЗаблокироватьЭлементы(Истина);
		var http = НовыйЗапросHttp(); 
		if(http){
			http.open('post', link); 
			http.withCredentials = Истина;
			http.onreadystatechange = function (){
				if(http.readyState == 4){
					СкрытьСообщениеЗагрузки();
					var ТелоОтвета = http.responseText.trim();
					if(ГлобальныйКонтекст.ИспользуетсяВИнтрасети){
						// !!!!! Добавить проверки на корректный ответ, сделать в виде отдельной функции, так как вызываться  будет из нескольких мест
						ТелоОтвета = ТелоОтвета.replace('<!--v-can.Status: OK-->', '');
						ТелоОтвета = ТелоОтвета.trim();					
					}					
					if(ТелоОтвета.indexOf("OK_") == 0){
						var requestRef = ТелоОтвета.substring(3);
						if(ГлобальныйКонтекст.Формы['newRequestFTF'].ДанныеОтправки.length == 0){
							// Обращение добавлено. Скрываем окно добавления обращения, обновляем список обращений.
							ИнициализацияМастераНовогоОбращения(1);
							ЗагрузитьСписокОбращений();
							ПоказатьОкноСообщения("<center><b>Обращение отправлено! Через несколько минут Вам на почту придёт уведомление о регистрации с номером Вашего обращения</b></center>", 5000);
							ОтборОбращенийПоСтатусу(1, ЭлементHTMLДокумента("requestFilter1"));
						}else{
							// Отправляем файлы и после этого обновляем форму
							if(ГлобальныйКонтекст.ИспользуетсяВИнтрасети){
								var ПараметрыОтправки = ОбязательныеПараметрыЗапросаК1С();
								ПараметрыОтправки.exec = КодироватьКомпонентыURI('ЛичныйКабинетИнициатораСайт.ДобавитьФайлКОбращению(ПараметрыЗапроса)');
							}else{
								var ПараметрыОтправки = {};
							}
							ПараметрыОтправки.requestRef = requestRef;
							ПараметрыОтправки.commentrowindex = '0'; // Поскольку это новое обращение, то строка переписки будет первая.
							ГлобальныйКонтекст.Формы['newRequestFTF'].ОтправитьВсе(ПараметрыОтправки);
							
							ЗагрузитьСписокОбращений();
							ПоказатьОкноСообщения("<center><b>Обращение отправлено! Через несколько минут Вам на почту придёт уведомление о регистрации с номером Вашего обращения</b></center>", 5000);
							ОтборОбращенийПоСтатусу(1, ЭлементHTMLДокумента("requestFilter1"));


						}
					}else{
						// Ошибка
						if(!ТелоОтвета){
							ТелоОтвета = 'Ошибка выполнения запроса';
						}
						alert(ТелоОтвета);
						МастерСозданияОбращенияЗаблокироватьЭлементы(Ложь);
					}
				}
		    } 
			http.send(ДанныеФормы);
		}else{  
			{ document.location = link; }
		} 
	}else{
		СкрытьСообщениеЗагрузки();
		setTimeout(ДобавитьНовоеОбращениеОтменить, 10);
	}
	if(typeof ПФ_ПослеДобавленияНовогоОбращения === 'function'){
		// Вызов переопределяемой функции
		var ПараметрыФункции = {};
		ПФ_ПослеДобавленияНовогоОбращения(ПараметрыФункции);
	}
}

function ОчиститьФормуНовогоОбращения() {
	ЭлементHTMLДокумента("МастерНовогоОбращения").innerHTML = мноHTML;
}

// var мноHTML = ЭлементHTMLДокумента("МастерНовогоОбращения").innerHTML;

function ДобавитьНовоеОбращениеОтменить(){
	var ТекстСообщения = '';
	/*
	if(!АтрибутЭлементаHTML('НовоеОбращениеИнициатор', 'ref')){
		ТекстСообщения = ТекстСообщения + 'Укажите инициатора обращения\n';
	}
	*/
	if(!АтрибутЭлементаHTML('НовоеОбращениеМаршрут', 'ref')){
		ТекстСообщения = ТекстСообщения + 'Выберите услугу\n';
	}
	if(!НовоеОбращениеТемаПолучить()){
		ТекстСообщения = ТекстСообщения + 'Заполните тему обращения\n';
	}
	if(глНастройки.ОбязательноеЗаполнениеОписанияОбращения){
		if(!ЭлементHTMLДокумента('НовоеОбращениеТекст').innerText.trim() || !глТекстНовогоОбращенияИзменен){
				ТекстСообщения = ТекстСообщения + 'Заполните описание обращения\n';
		}
	}
	alert(ТекстСообщения);	
}

function МастерСозданияОбращенияЗаблокироватьЭлементы(Заблокировать){
	try {
		глВыполняетсяОтправкаНовогоОбращения									= Заблокировать;
		ЭлементHTMLДокумента('НовоеОбращениеТема').disabled						= Заблокировать;
		ЭлементHTMLДокумента('НовоеОбращениеКнопкаОтправить').disabled			= Заблокировать;
		ЭлементHTMLДокумента('НовоеОбращениеКнопкаПрикрепитьФайл').disabled		= Заблокировать;
		ЭлементHTMLДокумента('НовоеОбращениеКнопкаЗакрыть').disabled			= Заблокировать;
		ЭлементHTMLДокумента('НовоеОбращениеКнопкаСсылкаНаУслугу').disabled		= Заблокировать;
		ЭлементHTMLДокумента('НовоеОбращениеИнициатор').disabled				= Заблокировать;
		ЭлементHTMLДокумента('НовоеОбращениеИнициатор_КнопкаВыбора').disabled	= Заблокировать;
		ЭлементHTMLДокумента('КнопкаФормыВыбораТипаАктива').disabled			= Заблокировать;
	} catch (e) {
		console.warn(e);
	}
	ГлобальныйКонтекст.Формы.Уведомляемые.ТолькоПросмотр(Заблокировать);
	if(Заблокировать){
		УстановитьАтрибутЭлементаHTML(ЭлементHTMLДокумента('НовоеОбращениеТекст'), 'contenteditable', 'false');
	}else{
		УстановитьАтрибутЭлементаHTML(ЭлементHTMLДокумента('НовоеОбращениеТекст'), 'contenteditable', 'true');
	}
	if(ЭлементHTMLДокумента('ПриоритетВыпадающийСписок')){
		ЭлементHTMLДокумента('ПриоритетВыпадающийСписок').disabled = Заблокировать;
	}
	МассивЭлементов = document.getElementsByName('РадиоПриоритет');
	for(var Счетчик = 0; Счетчик < МассивЭлементов.length; Счетчик++){
		МассивЭлементов[Счетчик].disabled = Заблокировать;
	}	
}

// Представляет данные текущей строки таблицы обращений в виде параметров URL
// В текущем релизе не используется
function ТекущиеДанныеСпискаОбращенийВПараметрыURL(){
	activeRequestID = КодироватьКомпонентыURI(АтрибутЭлементаHTML(глТекущаяСтрокаСпискаОбращений, 'requestid'));
	activeRequestType = КодироватьКомпонентыURI(АтрибутЭлементаHTML(глТекущаяСтрокаСпискаОбращений, 'requesttype'));
	requestRef = КодироватьКомпонентыURI(АтрибутЭлементаHTML(глТекущаяСтрокаСпискаОбращений, 'ref'));	
	return {"requestid": activeRequestID, "requesttype": activeRequestType, "requestdatatype": глТипОбращенияВТекущейСтроке, "requestRef": requestRef};
}

// Отображение данных обращения в активной строке списка
// В данном релизе не используется
function ДанныеОбращения(ТекущаяСтрока, ОбновитьПринудительно){
	if(ТекущаяСтрока === глТекущаяСтрокаСпискаОбращений) return;
	/*// Проверим, не вводился ли в момент активации строки комментарий по другой строке
	if(!addDataCommentResetConfirm()){
		return;
	}*/
	if(глТекущаяСтрокаСпискаОбращений) {
		УдалитьКлассHTMLЭлемента(глТекущаяСтрокаСпискаОбращений, ГлобальныйКонтекст.КлассАктивнойСтроки);
		УдалитьАтрибутЭлементаHTML(глТекущаяСтрокаСпискаОбращений, 'isactiverow')
	}
	ДобавитьКлассHTMLЭлементу(ТекущаяСтрока, ГлобальныйКонтекст.КлассАктивнойСтроки);
	УстановитьАтрибутЭлементаHTML(ТекущаяСтрока, 'isactiverow', true);
	глТекущаяСтрокаСпискаОбращений = ТекущаяСтрока;
	ГлобальныйКонтекст.Формы.ФормаСпискаОбращений.ТекущаяСтрока = глТекущаяСтрокаСпискаОбращений;
	$(ТекущаяСтрока).trigger('dblclick');
}



// Открытие формы обращения в активной строке списка
function ОткрытьФормуОбращения(ТекущаяСтрока){
	if(typeof ТекущаяСтрока === 'string'){
		var ОбъектСсылка = ТекущаяСтрока;
	}else{
		var ОбъектСсылка = АтрибутЭлементаHTML(ТекущаяСтрока, "ref");		
	}
	Обращение = new ФормаОбъекта({
		ОбъектСсылка: ОбъектСсылка,
		Идентификатор: "Обращение",
		ШаблонФормы: "customquery",
		ИмяФормы: "ЛичныйКабинетИнициатораСайт.ФормаОбращения(ПараметрыЗапроса)"
	});
	if(глТекущаяСтрокаСпискаОбращений && глТекущаяСтрокаСпискаОбращений.innerHTML.indexOf('messageballoon') + 1){
		Обращение.ПослеЗагрузки = function(ТекущаяСтрока){
			// После открытия сбрасываем флаг наличия непрочитанных сообщений
			глТекущаяСтрокаСпискаОбращений.innerHTML = глТекущаяСтрокаСпискаОбращений.innerHTML.replace('<img src="assets/images/messageballoon.png">', ''); 
		}
	}
	Обращение.ПослеЗагрузки = function(){
		if(ЭлементHTMLДокумента('КнопкаДобавитьКомментарий')){
			ЭлементHTMLДокумента('КнопкаДобавитьКомментарий').addEventListener('click', addDataCommentShow);
		}
		ЭлементHTMLДокумента("addDataCommentProceedButton").addEventListener("click", addDataCommentProceed);
		ЭлементHTMLДокумента("addDataCommentCancelButton").addEventListener("click", addDataCommentCancel);
		if(ЭлементHTMLДокумента("cancelTaskButton")){
			ЭлементHTMLДокумента("cancelTaskButton").addEventListener("click", cancelTask);
		}
		if(ЭлементHTMLДокумента("revisionTaskButton")){
			ЭлементHTMLДокумента("revisionTaskButton").addEventListener("click", revisionTask);
		}		
		if(ЭлементHTMLДокумента("TaskAgreementTrueButton")){
			ЭлементHTMLДокумента("TaskAgreementTrueButton").addEventListener("click", TaskAgreementTrue);
		}		
		if(ЭлементHTMLДокумента("TaskAgreementFalseButton")){
			ЭлементHTMLДокумента("TaskAgreementFalseButton").addEventListener("click", TaskAgreementFalse);
		}		
		// Инициализация формы для передачи файлов на сервер
		if(ГлобальныйКонтекст.ИспользуетсяВИнтрасети){
			var newRequestFTF_UploadURL = ГлобальныйКонтекст.Коннектор1С.ПутьКБазе1С + '/v-can.site/execute';
		}else{
			var newRequestFTF_UploadURL = "ajax/userscripts/requestdatatransferfile.php";
		}
		addCommentFTF = new ФормаОтправкиФайлов({
			Идентификатор: 'addCommentFTF',
			КорневойЭлемент: ЭлементHTMLДокумента('addCommentFilesDiv'),
			АдресОтправки: newRequestFTF_UploadURL,
			ОтправлятьКакСтроку: ГлобальныйКонтекст.ИспользуетсяВИнтрасети
		});
		addCommentFTF.Инициализировать();
		addCommentFTF.ПослеОтправки = function(){
			addDataCommentReset();
		}		
		ГлобальныйКонтекст.Формы.addCommentFTF.ЭлементHTMLСписокФайлов.style.width = 'unset';
		// Обработчик события вставки скриншота в поле комментария
		ЭлементHTMLДокумента('newCommentTextEditor').addEventListener('paste', function(event){
			var БуферОбмена = event.clipboardData || window.clipboardData;
			if (БуферОбмена) {
				var ДанныеБуфераОбмена = БуферОбмена.files || БуферОбмена.items;
				if (ДанныеБуфераОбмена && ДанныеБуфераОбмена.length > 0) {
					event.preventDefault();
					// Находим изображение
					for (var i = 0; i < ДанныеБуфераОбмена.length; i++) {
						if (ДанныеБуфераОбмена[i].type.indexOf('image') !== -1) {
							if(ЭтоEdge()){
								alert('Ваш браузер не поддерживает вставку изображений');
							}else{
								// Добавляем файл к загрузке
								ГлобальныйКонтекст.Формы.addCommentFTF.ДобавитьФайлы(ДанныеБуфераОбмена);
								var fileid = ГлобальныйКонтекст.Формы.addCommentFTF.ДанныеОтправки[ГлобальныйКонтекст.Формы.addCommentFTF.ДанныеОтправки.length-1].Идентификатор;
								// Добавляем превью файла в поле ввода текста
								var URLObj = window.URL || window.webkitURL;
								var source = URLObj.createObjectURL(ДанныеБуфераОбмена[i]);
								ЭлементHTMLДокумента('newCommentTextEditor').innerHTML = ЭлементHTMLДокумента('newCommentTextEditor').innerHTML + ['<img class="texteditor-preview" fileid="' + fileid + '" title="', escape(ДанныеБуфераОбмена[i].name), '" src="', source, '" />'].join('');
							}
						}
					}
				}
				ГлобальныйКонтекст.Формы.addCommentFTF.ЭлементHTMLВставкаИзБуфераОбмена.InnerHTML = '';
			}else{
				//setTimeout(checkInput, 1);
			}
		}, Ложь);
		// Если ранее был загружен текстовый редактор, то удалим его
		if(ГлобальныйКонтекст.Формы.РедакторТекстаКомментария != Неопределено && ГлобальныйКонтекст.Формы.РедакторТекстаКомментария.instanceById('newCommentTextEditor') != Неопределено){
			ГлобальныйКонтекст.Формы.РедакторТекстаКомментария.removeInstance('newCommentTextEditor');
		}
		// Инициализация библиотеки просмотра картинок
		// myLightbox.initialize();
		addDataCommentShow();
		$('.work-rating-list').owlCarousel({
			autoWidth: true,
			items: 10,
			responsive: {
				0:  {
					rtl: true,
				},
				730: {
					rtl: false,
				}
			}
		});
	}	
	Обращение.Инициализировать();
}

function ДолойМодалку(modal) {
	if(document.getElementById('Обращение_shadow')){
		document.getElementById('Обращение_shadow').remove();
		modal.closest('.custom-modal').remove();
	}
}

// Переключение типа отображаемых данных обращения: текст или комментарии
// В данном релизе не используется
function ТипОтображаемыхДанныхОбращения(){
	глТипОбращенияВТекущейСтроке = document.getElementById('requestDataType').innerHTML;
	if(глТипОбращенияВТекущейСтроке == "2"){
		глТипОбращенияВТекущейСтроке = "1";
		document.getElementById('requestDataTypeText').innerHTML = "Показать комментарии";
		document.getElementById('addRequestDataComment').style.display = "none";
	}else{
		глТипОбращенияВТекущейСтроке = "2";
		document.getElementById('requestDataTypeText').innerHTML = "Показать данные";
		document.getElementById('addRequestDataComment').style.display = "block";
	}
	document.getElementById('requestDataType').innerHTML = глТипОбращенияВТекущейСтроке;
	if(глТекущаяСтрокаСпискаОбращений){
		showContent('ajax/userscripts/requestdata.php', ТекущиеДанныеСпискаОбращенийВПараметрыURL(), 'requestData', Истина, {});
	}
}

//Инициализация блока добавления комментария к обращению
function addDataCommentReset(){
	//document.getElementById('newCommentText').value = '';
	document.getElementById('newCommentTextEditor').innerHTML = '';
	ЭлементHTMLДокумента('addDataCommentProceedButton').disabled = Ложь;
	if(ЭлементHTMLДокумента('СкрытьОтИнициатора')){
		ЭлементHTMLДокумента('СкрытьОтИнициатора').disabled = Ложь;
	}
	ГлобальныйКонтекст.Формы.addCommentFTF.Сброс();
	//document.getElementById('addCommentDiv').style.display = 'none';
	// if(ЭлементHTMLДокумента('КнопкаДобавитьКомментарий')){
		// ЭлементHTMLДокумента('КнопкаДобавитьКомментарий').style.display = 'block';	
	// }
}

// Запрос на подтверждение сброса блока добавления нового комментария к обращению
function addDataCommentResetConfirm(){
	if(document.getElementById('addCommentDiv').style.display != 'none'){
	 	if(document.getElementById('newCommentTextEditor').innerHTML !=''){
			if (confirm('Введенный комментарий и список присоединенных файлов будут потеряны. Продолжить?')) {
				addDataCommentReset();
				return Истина;
			}else{
				return Ложь;
			}
		}else{
			addDataCommentReset();
		}
	}
	return Истина;
}

// Отобразить блок добавления комментария к обращению
function addDataCommentShow(){	
	// document.getElementById('addCommentDiv').style.display = 'block';
	if(ЭлементHTMLДокумента('КнопкаДобавитьКомментарий')){
		ЭлементHTMLДокумента('КнопкаДобавитьКомментарий').style.display = 'none';
	}
	document.getElementById('newCommentTextEditor').focus();
	// Редактор комментария
	var НеобходимоСоздатьРедакторКомментария = Ложь;
	if(ГлобальныйКонтекст.Формы.РедакторТекстаКомментария === Неопределено){
		НеобходимоСоздатьРедакторКомментария = Истина;
	}else{
		if(ГлобальныйКонтекст.Формы.РедакторТекстаКомментария.instanceById('newCommentTextEditor') === Неопределено){
			НеобходимоСоздатьРедакторКомментария = Истина;
		}
	}
	if(НеобходимоСоздатьРедакторКомментария){
		ГлобальныйКонтекст.Формы.РедакторТекстаКомментария = new nicEditor({buttonList : ['fontSize','bold','italic','underline','strikeThrough','bgcolor','forecolor', 'upload']}).panelInstance('newCommentTextEditor');
		var imgButtonHTML = ГлобальныйКонтекст.Формы.РедакторТекстаКомментария.nicPanel.panelButtons[6].button.parentNode.innerHTML;
		ГлобальныйКонтекст.Формы.РедакторТекстаКомментария.nicPanel.panelButtons[6].button.parentNode.innerHTML = "";
		ГлобальныйКонтекст.Формы.РедакторТекстаКомментария.nicPanel.panelButtons[6].contain.innerHTML = imgButtonHTML;
		ГлобальныйКонтекст.Формы.РедакторТекстаКомментария.nicPanel.panelButtons[6].button = ГлобальныйКонтекст.Формы.РедакторТекстаКомментария.nicPanel.panelButtons[6].contain.children[0];
		ГлобальныйКонтекст.Формы.РедакторТекстаКомментария.nicPanel.panelButtons[6].button.onclick = function(){
			ГлобальныйКонтекст.Формы.addCommentFTF.ЭлементHTMLВыборФайла.click();
		}; 
		ГлобальныйКонтекст.Формы.РедакторТекстаКомментария.nicPanel.elm.style.width = '100%';		
	}
}


// Добавить новый комментарий к обращению
function addDataCommentProceed(){
	newCommentText = document.getElementById('newCommentTextEditor').innerHTML;
	//if(newCommentText != ''){
		var link = ''; 
		var ДанныеФормы = new FormData();
		if(ГлобальныйКонтекст.ИспользуетсяВИнтрасети){
			link = ГлобальныйКонтекст.Коннектор1С.ПутьКБазе1С + '/v-can.site/execute';
			ДанныеФормы.append('exec', КодироватьКомпонентыURI('ЛичныйКабинетИнициатораСайт.ДобавитьКомментарийКОбращению(ПараметрыЗапроса)'));
		}else{
			link = 'ajax/userscripts/requestdataaddcomment.php';
		}
		ДанныеФормы.append('newCommentText', КодироватьКомпонентыURI(newCommentText));
		var Параметры = {requestRef: ГлобальныйКонтекст.Формы.Обращение.ОбъектСсылка.Ссылка};
		for(ИмяПараметра in Параметры){
			ДанныеФормы.append(ИмяПараметра, Параметры[ИмяПараметра])
		}		
		var Параметры = ОбязательныеПараметрыЗапросаК1С();
		for(ИмяПараметра in Параметры){
			ДанныеФормы.append(ИмяПараметра, Параметры[ИмяПараметра])
		}		
		if(ЭлементHTMLДокумента('СкрытьОтИнициатора') && ЭлементHTMLДокумента('СкрытьОтИнициатора').checked){
			ДанныеФормы.append('СкрытьОтИнициатора', Истина)
		}
		ЭлементHTMLДокумента('addDataCommentProceedButton').disabled = Истина;
		if(ЭлементHTMLДокумента('СкрытьОтИнициатора')){
			ЭлементHTMLДокумента('СкрытьОтИнициатора').disabled = Истина;
		}
		var http = НовыйЗапросHttp(); 
		if(http){
			http.open('post', link); 
			http.withCredentials = Истина;
			http.onreadystatechange = function (){
				if(http.readyState == 4){
					// Комментарий добавлен
					var ТелоОтвета = http.responseText.trim();
					if(ГлобальныйКонтекст.ИспользуетсяВИнтрасети){
						// !!!!! Добавить проверки на корректный ответ, сделать в виде отдельной функции, так как вызываться  будет из нескольких мест
						ТелоОтвета = ТелоОтвета.replace('<!--v-can.Status: OK-->', '');
						ТелоОтвета = ТелоОтвета.trim();	
					}					
					try{
						var parse = JSON.parse(ТелоОтвета);
						ЭлементHTMLДокумента('requestData').innerHTML = parse[0];
						if(ГлобальныйКонтекст.Формы.addCommentFTF.ДанныеОтправки.length > 0){
							// Отправляем присоединенные файлы
							//var ПараметрыЗапроса = ТекущиеДанныеСпискаОбращенийВПараметрыURL();
							var ПараметрыЗапроса = {requestRef: ГлобальныйКонтекст.Формы.Обращение.ОбъектСсылка.Ссылка};
							ПараметрыЗапроса.commentrowindex = parse[1];
							if(ГлобальныйКонтекст.ИспользуетсяВИнтрасети){
								ПараметрыЗапроса.exec = КодироватьКомпонентыURI('ЛичныйКабинетИнициатораСайт.ДобавитьФайлКОбращению(ПараметрыЗапроса)');
								for(ИмяПараметра in ОбязательныеПараметрыЗапросаК1С()){
									ПараметрыЗапроса[ИмяПараметра] = Параметры[ИмяПараметра];
								}									
							}
							ГлобальныйКонтекст.Формы.addCommentFTF.ОтправитьВсе(ПараметрыЗапроса);
						}else{
							// Сообщение отправлено, присоединенных файлов нет
							addDataCommentReset();
						}
					}catch(err){
						// В ответе пришел не json, скорее всего, это ошибка. Отобразим ее.
						// MyCom: В тело ответа приходит не json! Приходит верстка сообщения!
						addDataCommentReset();
						ЭлементHTMLДокумента('addDataCommentProceedButton').disabled = Ложь;
						if(ЭлементHTMLДокумента('СкрытьОтИнициатора')){
							ЭлементHTMLДокумента('СкрытьОтИнициатора').disabled = Ложь;
						}
					}
				}
		    } 
			http.send(ДанныеФормы);
		}else{  
			{ document.location = link; }
		} 
	//}else{
	//	alert("Заполните текст комментария");
	//}
}

// Отменить добавление комментария к обращению
function addDataCommentCancel(){
	if(!addDataCommentResetConfirm()){
		return;
	}	
}

function ОткрытьФормуВыбораТипаАктива(){
	// Открытие формы выбора типа актива: актив или конфигурационная единица
	ЭлементHTMLДокумента('ФормаВыбораТипаАктива').style.display = 'block';
}

function ЗакрытьФормуВыбораТипаАктива(){
	ЭлементHTMLДокумента('ФормаВыбораТипаАктива').style.display = 'none';
}

/*
function charItemSelectFormOpen(){
	var charItemSelectForm = new ФормаСписка({
		Идентификатор: 'charItemSelectForm',
		КорневойЭлемент: 'ListFormTemplate',
		ЦелевойЭлемент: 'НовоеОбращениеХарактеристика',
		РежимВыбора: Истина,
		СоздаватьИзШаблона: Истина
	});
	charItemSelectForm.Инициализировать();
	charItemSelectForm.Загрузить();
}
*/

function ОткрытьФормуВыбораАктива(){
	// Открытие формы выбора актива
	if(ГлобальныйКонтекст.Формы.ВыборАктива === Неопределено){
		var ВыборАктива = new ПроизвольнаяФорма({
			Идентификатор: 'ВыборАктива',
			КорневойЭлемент: 'ФормаВыбораАктива',
			СоздаватьИзШаблона: Ложь,
			РежимОткрытияОкна: РежимОткрытияОкнаФормы.Независимый
		});
		ВыборАктива.ПриИзмененииРеквизита = function(ЭлементРеквизита){
			ЭтаФорма = this;
			ФормаВыбораАктиваУстановитьОтбор();
		}	
		ВыборАктива.Инициализировать();
	}			
	ЗакрытьФормуВыбораТипаАктива();
	ЭлементHTMLДокумента('ФормаВыбораАктива').style.display = 'block';

	var ФормаВыбораАктиваСписок = new ФормаСписка({
		Идентификатор: 'ФормаВыбораАктиваСписок',
		КорневойЭлемент: 'activeSelectItemList',
		ЦелевойЭлемент: 'activeSelectItem',
		РежимВыбора: Ложь,
		СоздаватьИзШаблона: Ложь
	});
	ФормаВыбораАктиваСписок.ПриВыборе = function(){
		var НовоеОбращениеАктивElem = document.getElementById("НовоеОбращениеАктив");
		НовоеОбращениеАктивElem.value = АтрибутЭлементаHTML(this.ТекущаяСтрока, "presentation");
		НовоеОбращениеАктивElem.setAttribute("ref", АтрибутЭлементаHTML(this.ТекущаяСтрока, "ref"));
		НовоеОбращениеАктив_УстановитьТипАктив();
		ЭлементHTMLДокумента('ФормаВыбораАктива').style.display = "none";
		ФормаВыбораАктиваСписок.ЗакрытьФорму();
		activeStructureSelectForm.ЗакрытьФорму();
		activePropertySelectForm.ЗакрытьФорму();
	}
	ФормаВыбораАктиваСписок.Инициализировать();
	ФормаВыбораАктиваУстановитьОтбор();
	ФормаВыбораАктиваСписок.ПриАктивизацииСтроки = function(){
		activeStructureSelectItemListSetFilter();
	}
	ФормаВыбораАктиваСписок.ПослеЗагрузки = function(){
		var ЭтаФорма = this;
		ЭтаФорма.ЗагруженыВсеСтраницы = Истина;
	}

	var activeStructureSelectForm = new ФормаСписка({
		Идентификатор: 'activeStructureSelectForm',
		КорневойЭлемент: 'activeStructureSelectItemList',
		ЦелевойЭлемент: 'activeStructureSelectItem',
		РежимВыбора: Ложь,
		СоздаватьИзШаблона: Ложь
	});
	activeStructureSelectForm.Инициализировать();
	activeStructureSelectForm.ПриВыборе = function(){
		var НовоеОбращениеАктивElem = document.getElementById("НовоеОбращениеАктив");
		НовоеОбращениеАктивElem.value = АтрибутЭлементаHTML(this.ТекущаяСтрока, "presentation");
		НовоеОбращениеАктивElem.setAttribute("ref", АтрибутЭлементаHTML(this.ТекущаяСтрока, "ref"));
		НовоеОбращениеАктив_УстановитьТипАктив();
		ЭлементHTMLДокумента('ФормаВыбораАктива').style.display = "none";
		ФормаВыбораАктиваСписок.ЗакрытьФорму();
		activeStructureSelectForm.ЗакрытьФорму();
		activePropertySelectForm.ЗакрытьФорму();
	}

	var activePropertySelectForm = new ФормаСписка({
		Идентификатор: 'activePropertySelectForm',
		КорневойЭлемент: 'activePropertySelectItemList',
		ЦелевойЭлемент: 'activePropertySelectItem',
		РежимВыбора: Ложь,
		СоздаватьИзШаблона: Ложь
	});
	activePropertySelectForm.Инициализировать();

	activeStructureSelectItemListSetFilter();
}

function ФормаВыбораАктиваЗакрыть(){
	ГлобальныйКонтекст.Формы['ФормаВыбораАктиваСписок'].ЗакрытьФорму();
	ЭлементHTMLДокумента('ФормаВыбораАктива').style.display='none';
}

function ОчиститьАктив(){
	ОчиститьПолеВвода('НовоеОбращениеАктив');
}

function НовоеОбращениеАктив_УстановитьТипАктив(ОчиститьПолеАктив){
	ЭлементHTMLДокумента('НовоеОбращениеАктив').setAttribute('maintable', 'Справочник.itilprofАктивы');
	//ДобавитьКлассHTMLЭлементу(ЭлементHTMLДокумента('НовоеОбращениеАктив_УстановитьТипАктив_Кнопка'), 'active');
	//УдалитьКлассHTMLЭлемента(ЭлементHTMLДокумента('НовоеОбращениеАктив_УстановитьТипКЕ_Кнопка'), 'active');
	if(ОчиститьПолеАктив){
		ОчиститьАктив();
	}
}

function НовоеОбращениеАктив_УстановитьТипКЕ(ОчиститьПолеАктив){
	ЭлементHTMLДокумента('НовоеОбращениеАктив').setAttribute('maintable', 'Справочник.itilprofКонфигурационныеЕдиницы');
	//ДобавитьКлассHTMLЭлементу(ЭлементHTMLДокумента('НовоеОбращениеАктив_УстановитьТипКЕ_Кнопка'), 'active');
	//УдалитьКлассHTMLЭлемента(ЭлементHTMLДокумента('НовоеОбращениеАктив_УстановитьТипАктив_Кнопка'), 'active');
	if(ОчиститьПолеАктив){
		ОчиститьАктив();
	}
}

function АктивОтборРабочееМестоОткрытьФорму(){
	var АктивОтборРабочееМесто = ОткрытьФормуСписка('АктивОтборРабочееМесто', {Идентификатор:'АктивОтборРабочееМесто'});
	ГлобальныйКонтекст.Формы['АктивОтборРабочееМесто'].ПриВыборе = function(){
		ФормаВыбораАктиваУстановитьОтбор();
	}
}

function АктивОтборРабочееМестоОчистить(){
	ОчиститьПолеВвода('АктивОтборРабочееМесто');
	ФормаВыбораАктиваУстановитьОтбор();
}

function АктивОтборРабочееМестоПриИзменении(){
}

function АктивОтборОрганизацияОткрытьФорму(){
	var АктивОтборОрганизация = ОткрытьФормуСписка('АктивОтборОрганизация', {Идентификатор:'АктивОтборОрганизация'});
	ГлобальныйКонтекст.Формы['АктивОтборОрганизация'].ПриВыборе = function(){
		ФормаВыбораАктиваУстановитьОтбор();
	}
}

function АктивОтборОрганизацияОчистить(){
	ОчиститьПолеВвода('АктивОтборОрганизация');
	ФормаВыбораАктиваУстановитьОтбор();
}

function АктивОтборОрганизацияПриИзменении(){
}

/*
function ОткрытьФормуВыбораИнициатора(){
	var НовоеОбращениеИнициатор = ОткрытьФормуСписка('НовоеОбращениеИнициатор', {Идентификатор:'НовоеОбращениеИнициатор', ТекстЗапроса:'ЛичныйКабинетИнициатораСайт.СписокПользователейТекстЗапроса(ПараметрыЗапроса)'});
}
*/

function ФормаВыбораАктиваУстановитьОтбор(){
	var Актив1 = КодироватьКомпонентыURI(АтрибутЭлементаHTML(ЭлементHTMLДокумента("АктивОтборРабочееМесто"), "ref"));
	var Актив2 = КодироватьКомпонентыURI(АтрибутЭлементаHTML(ЭлементHTMLДокумента("АктивОтборОрганизация"), "ref"));
	var Параметры = {active1: Актив1, active2: Актив2};
	var ФормаВыбораАктиваСписок = ГлобальныйКонтекст.Формы['ФормаВыбораАктиваСписок'];
	ФормаВыбораАктиваСписок.ЗагруженыВсеСтраницы = Ложь;
	ФормаВыбораАктиваСписок.Загружается = Ложь;
	ФормаВыбораАктиваСписок.Загрузить(Параметры);
}

function activeStructureSelectItemListSetFilter(){
	var Active = КодироватьКомпонентыURI(АтрибутЭлементаHTML(ГлобальныйКонтекст.Формы['ФормаВыбораАктиваСписок'].ТекущаяСтрока, "ref"));
	var Параметры = {active: Active};
	ГлобальныйКонтекст.Формы['activeStructureSelectForm'].Загрузить(Параметры);
	ГлобальныйКонтекст.Формы['activePropertySelectForm'].Загрузить(Параметры);
}

function ОткрытьФормуВыбораКонфигурационнойЕдиницы(){
	// Открытие формы выбора конфигурационной единицы
	ЗакрытьФормуВыбораТипаАктива();
	ЭлементHTMLДокумента('configurationItemSelectForm').style.display = 'block';
	var configurationItemTypeListForm = new ФормаСписка({
		Идентификатор: 'configurationItemTypeListForm',
		КорневойЭлемент: 'configurationItemTypeList',
		ЦелевойЭлемент: 'configurationItemType',
		РежимВыбора: Истина,
		ЗакрыватьПриВыборе: Ложь,
		СоздаватьИзШаблона: Ложь
	});
	configurationItemTypeListForm.Инициализировать();
	configurationItemTypeListForm.Загрузить();
	configurationItemTypeListForm.ПриАктивизацииСтроки = function(){
		if(АтрибутЭлементаHTML(this.ТекущаяСтрока, "isgroup") != "true"){
			// Активирована строка элемента
			this.ОбработкаВыбора();
			configurationItemListForm.ЦелевойЭлемент.value="";
			configurationItemListForm.ЦелевойЭлемент.setAttribute("ref", ""); 
			configurationItemListForm.УстановитьТекущуюСтроку(null);
			if(АтрибутЭлементаHTML(ЭлементHTMLДокумента("configurationItemType"), "ref")){
				configurationItemListForm.Загрузить();
			}
		}
	}

	var configurationItemListForm = new ФормаСписка({
		Идентификатор: 'configurationItemListForm',
		КорневойЭлемент: 'configurationItemList',
		ЦелевойЭлемент: 'configurationItem',
		РежимВыбора: Истина,
		СоздаватьИзШаблона: Ложь
	});
	configurationItemListForm.Инициализировать();
	//if (ЭлементHTMLДокумента("configurationItem").value != ""){
		// Это повторное открытие формы, восстановим выделенную ранее строку
		if(АтрибутЭлементаHTML(ЭлементHTMLДокумента("configurationItemType"), "ref")){
			configurationItemListForm.Загрузить();
		}
	//}
	configurationItemListForm.ПриВыборе = function(){
		if(АтрибутЭлементаHTML(this.ТекущаяСтрока, "isgroup") != "true"){
			// Поместим выбранную конфигурационную единицу в атрибуты поля выбора
			var НовоеОбращениеАктивElem = document.getElementById("НовоеОбращениеАктив");
			НовоеОбращениеАктивElem.value = АтрибутЭлементаHTML(this.ТекущаяСтрока, "presentation");
			НовоеОбращениеАктивElem.setAttribute("ref", АтрибутЭлементаHTML(this.ТекущаяСтрока, "ref"));
			НовоеОбращениеАктив_УстановитьТипКЕ();
			ЭлементHTMLДокумента('configurationItemSelectForm').style.display = "none";
			configurationItemTypeListForm.ЗакрытьФорму();
			configurationItemListForm.ЗакрытьФорму();
			ГлобальныйКонтекст.ДополнительныеПараметрыЗапросов.assetref = АтрибутЭлементаHTML('НовоеОбращениеАктив', 'ref');
			ОчиститьПолеВвода("НовоеОбращениеХарактеристика");	
		}
	}
}

function configurationItemSelectFormClose(){
	ГлобальныйКонтекст.Формы['configurationItemTypeListForm'].ЗакрытьФорму();
	ГлобальныйКонтекст.Формы['configurationItemListForm'].ЗакрытьФорму();
	ЭлементHTMLДокумента('configurationItemSelectForm').style.display='none';
}

function ОткрытьФормуБазыЗнаний(){
	// Открытие формы базы знаний
	ЭлементHTMLДокумента('knowledgeBaseResult').innerHTML = '';
	ЭлементHTMLДокумента('knowledgeBaseSelectForm').style.display = "block";
	ЗапросК1С('ЛичныйКабинетИнициатораСайтPython.НейросетьЗапрос(ПараметрыЗапроса)', {'basefilter': ЭлементHTMLДокумента('ПолеПоискаУслуги').value}, 'knowledgeBaseResult', true, {});
	/*
	var knowledgeBaseListForm = new ListForm({
		id: 'knowledgeBaseListForm',
		rootElem: 'knowledgeBaseList',
		ЦелевойЭлемент: 'knowledgeBaseItem',
		closeOnSelect: false,
		createFromTemplate: false
	});
	knowledgeBaseListForm.init();
	var Параметры = '&basefilter=' + getElement('ПолеПоискаУслуги').value;
	knowledgeBaseListForm.load(Параметры);
	*/
	/*
	knowledgeBaseListForm.onActivateRow = function(){
		if(getElemAttr(this.ТекущаяСтрока, "isgroup") != "true"){
			// Активирована строка элемента
			this.ОбработкаВыбора();
			configurationItemListForm.ЦелевойЭлемент.value="";
			configurationItemListForm.ЦелевойЭлемент.setAttribute("ref", ""); 
			configurationItemListForm.УстановитьТекущуюСтроку(null);
			configurationItemListForm.Загрузить();
		}
	}
	*/
}

function knowledgeBaseSelectFormClose(){
	//glFormsArray['knowledgeBaseListForm'].closeForm();
	ЭлементHTMLДокумента('knowledgeBaseSelectForm').style.display = 'none';
}

/*
function ОткрытьФормуБазыЗнаний(){
	// Открытие формы выбора конфигурационной единицы
	ЭлементHTMLДокумента('knowledgeBaseSelectForm').style.display = "block";
	var knowledgeBaseListForm = new ФормаСписка({
		Идентификатор: 'knowledgeBaseListForm',
		КорневойЭлемент: 'knowledgeBaseList',
		ЦелевойЭлемент: 'knowledgeBaseItem',
		РежимВыбора: Ложь,
		СоздаватьИзШаблона: Ложь
	});
	knowledgeBaseListForm.Инициализировать();
	var Параметры = {'basefilter': КодироватьКомпонентыURI(ЭлементHTMLДокумента('ПолеПоискаУслуги').value)};
	knowledgeBaseListForm.Загрузить(Параметры);
	/*
	knowledgeBaseListForm.ПриАктивизацииСтроки = function(){
		if(АтрибутЭлементаHTML(this.ТекущаяСтрока, "isgroup") != "true"){
			// Активирована строка элемента
			this.ОбработкаВыбора();
			configurationItemListForm.ЦелевойЭлемент.value="";
			configurationItemListForm.ЦелевойЭлемент.setAttribute("ref", ""); 
			configurationItemListForm.УстановитьТекущуюСтроку(null);
			configurationItemListForm.Загрузить();
		}
	}
	*/
/*
}

function knowledgeBaseSelectFormClose(){
	ГлобальныйКонтекст.Формы['knowledgeBaseListForm'].ЗакрытьФорму();
	ЭлементHTMLДокумента('knowledgeBaseSelectForm').style.display='none';
}
*/

// Регистрация, принятие к исполнению, переход на следующий этап, закрытие обращения
function ПереходНаСледующийЭтап(Кнопка){
	var ИдентификаторКнопки = Кнопка.id;
	var ТекстВопроса = '';
	if(ИдентификаторКнопки === 'Кнопка_Зарегистрировать'){
		var ТекстВопроса = 'Зарегистрировать и запустить процесс?';
	}
	if(ИдентификаторКнопки === 'Кнопка_ПринятьКИсполнению'){
		var ТекстВопроса = 'Принять к исполнению?';
	}
	if(ТекстВопроса){
		if(confirm(ТекстВопроса)){
			Кнопка.disabled = Истина;
			var Параметры = {};
			Параметры.ОбращениеСсылка = ГлобальныйКонтекст.Формы.Обращение.Объект.Ссылка.Ссылка;
			var РезультатВыполнения = ВыполнитьФункцию1С('ЛичныйКабинетИнициатораСайт.' + ИдентификаторКнопки + '(ПараметрыЗапроса)', Параметры, Ложь);
			if(РезультатВыполнения === 'OK'){
				// Действие выполнено успешно. Перезагрузка формы обращения, обновление списка обращений.
				ГлобальныйКонтекст.Формы.Обращение.Загрузить();
				ГлобальныйКонтекст.Формы.ФормаСпискаОбращений.Загрузить();
			}else{
				// Отображение сообщения об ошибке
				ПоказатьОкноСообщения(РезультатВыполнения);
				Кнопка.disabled = Ложь;
			}		
		}
	}else{
		if(ИдентификаторКнопки === 'Кнопка_ПерейтиНаСледующийЭтап'){
			if(typeof ПФ_ПередПереходомНаСледующийЭтап === 'function'){
				// Вызов переопределяемой функции
				var ПараметрыФункции = {};
				ПараметрыФункции.Отказ = Ложь;
				ПФ_ПередПереходомНаСледующийЭтап(ПараметрыФункции);
				if(ПараметрыФункции.Отказ){
					// В переопределяемой функции установлен флаг отказа
					return;
				}
			}
			// Открываем список выбора этапа, на который необходимо перейти
			var ФормаВыбораЭтапа = ОткрытьФормуВыпадающегоСписка(Кнопка, {Идентификатор: 'ФормаВыбораЭтапа', Владелец: ГлобальныйКонтекст.Формы.Обращение});
			ФормаВыбораЭтапа.ПриВыборе = function(ЧтоТо){
				if(typeof ПФ_ПриПереходеНаСледующийЭтап === 'function'){
					// Вызов переопределяемой функции
					var ПараметрыФункции = {};
					ПараметрыФункции.Отказ = Ложь;
					ПФ_ПриПереходеНаСледующийЭтап(ПараметрыФункции);
					if(ПараметрыФункции.Отказ){
						// В переопределяемой функции установлен флаг отказа
						return;
					}
				}
				var ЭтапСсылка = ГлобальныйКонтекст.Формы.ФормаВыбораЭтапа.СсылкаВТекущейСтроке();
				if(!СсылкаПустая(ЭтапСсылка)){
					var Параметры = {};
					Параметры.ОбращениеСсылка = ГлобальныйКонтекст.Формы.Обращение.Объект.Ссылка.Ссылка;
					Параметры.ЭтапСсылка = ЭтапСсылка;
					var РезультатВыполнения = ВыполнитьФункцию1С('ЛичныйКабинетИнициатораСайт.' + ИдентификаторКнопки + '(ПараметрыЗапроса)', Параметры, Ложь);
					if(РезультатВыполнения === 'OK'){
						// Действие выполнено успешно. Перезагрузка формы обращения, обновление списка обращений.
						ГлобальныйКонтекст.Формы.Обращение.Загрузить();
						ГлобальныйКонтекст.Формы.ФормаСпискаОбращений.Загрузить();
					}else{
						// Отображение сообщения об ошибке
						ПоказатьОкноСообщения(РезультатВыполнения);
						Кнопка.disabled = Ложь;
					}		
				}
				if(typeof ПФ_ПослеПереходаНаСледующийЭтап === 'function'){
					// Вызов переопределяемой функции
					var ПараметрыФункции = {};
					ПФ_ПослеПереходаНаСледующийЭтап(ПараметрыФункции);
				}		
			}
		}
		if(ИдентификаторКнопки === 'Кнопка_ЗавершитьПроцесс'){
			// Открываем список выбора кодов завершения процесса
			var ФормаВыбораКодаЗавершения = ОткрытьФормуВыпадающегоСписка(Кнопка, {Идентификатор: 'ФормаВыбораКодаЗавершения', Владелец: ГлобальныйКонтекст.Формы.Обращение});
			ФормаВыбораКодаЗавершения.ПриВыборе = function(ЧтоТо){
				var КодЗавершенияСсылка = ГлобальныйКонтекст.Формы.ФормаВыбораКодаЗавершения.СсылкаВТекущейСтроке();
				if(!СсылкаПустая(КодЗавершенияСсылка)){
					var Параметры = {};
					Параметры.ОбращениеСсылка = ГлобальныйКонтекст.Формы.Обращение.Объект.Ссылка.Ссылка;
					Параметры.КодЗавершенияСсылка = КодЗавершенияСсылка;
					var РезультатВыполнения = ВыполнитьФункцию1С('ЛичныйКабинетИнициатораСайт.' + ИдентификаторКнопки + '(ПараметрыЗапроса)', Параметры, Ложь);
					if(РезультатВыполнения === 'OK'){
						// Действие выполнено успешно. Перезагрузка формы обращения, обновление списка обращений.
						ГлобальныйКонтекст.Формы.Обращение.Загрузить();
						ГлобальныйКонтекст.Формы.ФормаСпискаОбращений.Загрузить();
					}else{
						// Отображение сообщения об ошибке
						ПоказатьОкноСообщения(РезультатВыполнения);
						Кнопка.disabled = Ложь;
					}		
				}
			}
		}
	}
}


function Эскалация(Кнопка){
	// Открываем список выбора этапа, на который необходимо перейти
	var ФормаВыбора = ОткрытьФормуВыпадающегоСписка(Кнопка, {Идентификатор: 'ФормаВыбораЭскалации', Владелец: ГлобальныйКонтекст.Формы.Обращение});
	ФормаВыбора.ПриВыборе = function(ЧтоТо){
		var ВыбраннаяСсылка = ГлобальныйКонтекст.Формы.ФормаВыбораЭскалации.СсылкаВТекущейСтроке();
		if(!СсылкаПустая(ВыбраннаяСсылка)){
			var Параметры = {};
			Параметры.ОбращениеСсылка = ГлобальныйКонтекст.Формы.Обращение.Объект.Ссылка.Ссылка;
			Параметры.ПользовательСсылка = ВыбраннаяСсылка;
			var РезультатВыполнения = ВыполнитьФункцию1С('ЛичныйКабинетИнициатораСайт.Эскалация(ПараметрыЗапроса)', Параметры, Ложь);
			if(РезультатВыполнения === 'OK'){
				// Действие выполнено успешно. Перезагрузка формы обращения, обновление списка обращений.
				ГлобальныйКонтекст.Формы.Обращение.Загрузить();
				ГлобальныйКонтекст.Формы.ФормаСпискаОбращений.Загрузить();
			}else{
				// Отображение сообщения об ошибке
				Состояние(РезультатВыполнения, СтатусСообщения.Внимание);
				Кнопка.disabled = Ложь;
			}		
		}
	}	
}

// Нажатие на кнопку оценки выполнения задачи
function rateTaskButtonSelect(elem){

	var Кнопка = ЭлементHTMLДокумента('ЗакрытьОбращение_Кнопка');
	
	if (Кнопка) {
		var taskID = АтрибутЭлементаHTML(elem, 'objectref'),
			objectrate = АтрибутЭлементаHTML(elem, 'objectrate');

		elemArr = document.getElementsByClassName('selected');
		for (var i = 0; i < elemArr.length; i++) {
			УдалитьКлассHTMLЭлемента(elemArr[i], 'selected');
		}	
		if(elem){
			ДобавитьКлассHTMLЭлементу(elem, 'selected');			
		}

		УстановитьАтрибутЭлементаHTML(Кнопка, 'objectref', taskID);
		УстановитьАтрибутЭлементаHTML(Кнопка, 'objectrate', objectrate);
	}
}

function ЗакрытьОбращение(elem) {
	if(confirm('Оценить обращение?')){
		var Параметры = {};
		var taskID = АтрибутЭлементаHTML(elem, 'objectref');
		var objectrate = АтрибутЭлементаHTML(elem, 'objectrate');
		var КомментарийКОценкеЭлемент = ЭлементHTMLДокумента('КомментарийКОценке');
		if(КомментарийКОценкеЭлемент){
			var КомментарийКОценке = ЭлементHTMLДокумента('КомментарийКОценке').value.trim();
			if(КомментарийКОценке){
				Параметры.userComment = КодироватьКомпонентыURI(КомментарийКОценке);
			}
		}
		if (!taskID || !objectrate) {
			alert("Пожалуйста оцените работу");
			return;
		}
		var link = ''; 
		var ДанныеФормы = new FormData();
		Параметры.objectref = КодироватьКомпонентыURI(taskID);
		Параметры.objectrate = КодироватьКомпонентыURI(objectrate);
		if(ГлобальныйКонтекст.ИспользуетсяВИнтрасети){
			Параметры.exec = КодироватьКомпонентыURI('ЛичныйКабинетИнициатораСайт.ОценитьОбращение(ПараметрыЗапроса)');
			link = ГлобальныйКонтекст.Коннектор1С.ПутьКБазе1С + '/v-can.site/execute';
		}else{
			link = 'ajax/userscripts/ratetask.php';
		}
		ПараметрыURLВДанныеHTMLФормы(ДанныеФормы, Параметры);
		var http = НовыйЗапросHttp(); 
		if(http){
			http.open('post', link); 
			http.withCredentials = Истина;
			http.onreadystatechange = function (){
				if(http.readyState == 4){
					var ТелоОтвета = http.responseText.trim();
					if(ГлобальныйКонтекст.ИспользуетсяВИнтрасети){
						// !!!!! Добавить проверки на корректный ответ, сделать в виде отдельной функции, так как вызываться  будет из нескольких мест
						ТелоОтвета = ТелоОтвета.replace('<!--v-can.Status: OK-->', '');
						ТелоОтвета = ТелоОтвета.trim();					
					}					
					if(ТелоОтвета == 'OK'){
						// Обращение оценено. Закрываем окно обращения, обновляем список обращений.
						if(ГлобальныйКонтекст.Формы['Обращение']){
							ГлобальныйКонтекст.Формы['Обращение'].ЗакрытьФорму();
							ЗагрузитьСписокОбращений();
						}else{
							Состояние('Оценка установлена', СтатусСообщения.Обычное, 3);
						}
					}else{
						// Ошибка
						if(!ТелоОтвета){
							ТелоОтвета = 'Ошибка выполнения запроса';
						}
						alert(ТелоОтвета);
					}
				}
			} 
			http.send(ДанныеФормы);
		}else{  
			{ document.location = link; }
		} 	
	}
}

function cancelTask(){
	var userComment = prompt("Обращение будет отменено. Укажите причину и нажмите ОК.", "");
	if (userComment) {
		var taskID = АтрибутЭлементаHTML('cancelTaskButton', 'objectref');
		var link = ''; 
		var ДанныеФормы = new FormData();
		var Параметры = {};
		Параметры.objectref = КодироватьКомпонентыURI(taskID);
		Параметры.userComment = КодироватьКомпонентыURI(userComment);
		if(ГлобальныйКонтекст.ИспользуетсяВИнтрасети){
			Параметры.exec = КодироватьКомпонентыURI('ЛичныйКабинетИнициатораСайт.ОтменитьОбращение(ПараметрыЗапроса)');
			link = ГлобальныйКонтекст.Коннектор1С.ПутьКБазе1С + '/v-can.site/execute';
		}else{
			link = "ajax/userscripts/canceltask.php";
		}
		ПараметрыURLВДанныеHTMLФормы(ДанныеФормы, Параметры);
		var http = НовыйЗапросHttp(); 
		if(http){
			http.open('post', link); 
			http.withCredentials = Истина;
			http.onreadystatechange = function (){
				if(http.readyState == 4){
					var ТелоОтвета = http.responseText.trim();
					if(ГлобальныйКонтекст.ИспользуетсяВИнтрасети){
						// !!!!! Добавить проверки на корректный ответ, сделать в виде отдельной функции, так как вызываться  будет из нескольких мест
						ТелоОтвета = ТелоОтвета.replace('<!--v-can.Status: OK-->', '');
						ТелоОтвета = ТелоОтвета.trim();					
					}					
					if(ТелоОтвета == "OK"){
						// Обращение отменено. Закрываем окно обращения, обновляем список обращений.
						ГлобальныйКонтекст.Формы['Обращение'].ЗакрытьФорму();
						ЗагрузитьСписокОбращений();
					}else{
						// Ошибка
						if(!ТелоОтвета){
							ТелоОтвета = 'Ошибка выполнения запроса';
						}
						alert(ТелоОтвета);
					}
				}
			} 
			http.send(ДанныеФормы);
		}else{  
			{ document.location = link; }
		} 	
	} 	
}

function revisionTask(){
	var userComment = prompt("Обращение будет отправлено на доработку. Укажите причину и нажмите ОК.", "");
	if (userComment) {
		var taskID = АтрибутЭлементаHTML('revisionTaskButton', 'objectref');
		var link = ''; 
		var ДанныеФормы = new FormData();
		var Параметры = {};
		Параметры.objectref = КодироватьКомпонентыURI(taskID);
		Параметры.userComment = КодироватьКомпонентыURI(userComment);
		if(ГлобальныйКонтекст.ИспользуетсяВИнтрасети){
			Параметры.exec = КодироватьКомпонентыURI('ЛичныйКабинетИнициатораСайт.ВернутьНаДоработкуОбращение(ПараметрыЗапроса)');
			link = ГлобальныйКонтекст.Коннектор1С.ПутьКБазе1С + '/v-can.site/execute';
		}else{
			link = "ajax/userscripts/revisiontask.php";
		}
		ПараметрыURLВДанныеHTMLФормы(ДанныеФормы, Параметры);
		var http = НовыйЗапросHttp(); 
		if(http){
			http.open('post', link); 
			http.withCredentials = Истина;
			http.onreadystatechange = function (){
				if(http.readyState == 4){
					var ТелоОтвета = http.responseText.trim();
					if(ГлобальныйКонтекст.ИспользуетсяВИнтрасети){
						// !!!!! Добавить проверки на корректный ответ, сделать в виде отдельной функции, так как вызываться  будет из нескольких мест
						ТелоОтвета = ТелоОтвета.replace('<!--v-can.Status: OK-->', '');
						ТелоОтвета = ТелоОтвета.trim();					
					}					
					if(ТелоОтвета == "OK"){
						// Действие выполнено. Закрываем окно обращения, обновляем список обращений.
						ГлобальныйКонтекст.Формы['Обращение'].ЗакрытьФорму();
						ЗагрузитьСписокОбращений();
					}else{
						// Ошибка
						if(!ТелоОтвета){
							ТелоОтвета = 'Ошибка выполнения запроса';
						}
						alert(ТелоОтвета);
					}
				}
			} 
			http.send(ДанныеФормы);
		}else{  
			{ document.location = link; }
		} 	
	} 	
}

function TaskAgreementTrue(){
	var userComment = prompt("Обращение будет согласовано. Укажите комментарий и нажмите ОК.", "");
	if (userComment) {
		var taskID = АтрибутЭлементаHTML('TaskAgreementTrueButton', 'objectref');
		var link = ''; 
		var ДанныеФормы = new FormData();
		var Параметры = {};
		Параметры.objectref = КодироватьКомпонентыURI(taskID);
		Параметры.userComment = КодироватьКомпонентыURI(userComment);
		if(ГлобальныйКонтекст.ИспользуетсяВИнтрасети){
			Параметры.exec = КодироватьКомпонентыURI('ЛичныйКабинетИнициатораСайт.СогласоватьОбращение(ПараметрыЗапроса)');
			link = ГлобальныйКонтекст.Коннектор1С.ПутьКБазе1С + '/v-can.site/execute';
		}else{
			link = "ajax/userscripts/taskagreementtrue.php";
		}
		ПараметрыURLВДанныеHTMLФормы(ДанныеФормы, Параметры);
		var http = НовыйЗапросHttp(); 
		if(http){
			http.open('post', link); 
			http.withCredentials = Истина;
			http.onreadystatechange = function (){
				if(http.readyState == 4){
					var ТелоОтвета = http.responseText.trim();
					if(ГлобальныйКонтекст.ИспользуетсяВИнтрасети){
						// !!!!! Добавить проверки на корректный ответ, сделать в виде отдельной функции, так как вызываться  будет из нескольких мест
						ТелоОтвета = ТелоОтвета.replace('<!--v-can.Status: OK-->', '');
						ТелоОтвета = ТелоОтвета.trim();					
					}					
					if(ТелоОтвета == "OK"){
						// Действие выполнено. Закрываем окно обращения, обновляем список обращений.
						ГлобальныйКонтекст.Формы['Обращение'].ЗакрытьФорму();
						ЗагрузитьСписокОбращений();
					}else{
						// Ошибка
						if(!ТелоОтвета){
							ТелоОтвета = 'Ошибка выполнения запроса';
						}
						alert(ТелоОтвета);
					}
				}
			} 
			http.send(ДанныеФормы);
		}else{  
			{ document.location = link; }
		} 	
	} 	
}

function TaskAgreementFalse(){
	var userComment = prompt("Обращение будет отклонено. Укажите причину и нажмите ОК.", "");
	if (userComment) {
		var taskID = АтрибутЭлементаHTML('TaskAgreementFalseButton', 'objectref');
		var link = ''; 
		var ДанныеФормы = new FormData();
		var Параметры = {};
		Параметры.objectref = КодироватьКомпонентыURI(taskID);
		Параметры.userComment = КодироватьКомпонентыURI(userComment);
		if(ГлобальныйКонтекст.ИспользуетсяВИнтрасети){
			Параметры.exec = КодироватьКомпонентыURI('ЛичныйКабинетИнициатораСайт.ОтклонитьОбращение(ПараметрыЗапроса)');
			link = ГлобальныйКонтекст.Коннектор1С.ПутьКБазе1С + '/v-can.site/execute';
		}else{
			link = "ajax/userscripts/taskagreementfalse.php";
		}
		ПараметрыURLВДанныеHTMLФормы(ДанныеФормы, Параметры);
		var http = НовыйЗапросHttp(); 
		if(http){
			http.open('post', link); 
			http.withCredentials = Истина;
			http.onreadystatechange = function (){
				if(http.readyState == 4){
					var ТелоОтвета = http.responseText.trim();
					if(ГлобальныйКонтекст.ИспользуетсяВИнтрасети){
						// !!!!! Добавить проверки на корректный ответ, сделать в виде отдельной функции, так как вызываться  будет из нескольких мест
						ТелоОтвета = ТелоОтвета.replace('<!--v-can.Status: OK-->', '');
						ТелоОтвета = ТелоОтвета.trim();					
					}					
					if(ТелоОтвета == "OK"){
						// Действие выполнено. Закрываем окно обращения, обновляем список обращений.
						ГлобальныйКонтекст.Формы['Обращение'].ЗакрытьФорму();
						ЗагрузитьСписокОбращений();
					}else{
						// Ошибка
						if(!ТелоОтвета){
							ТелоОтвета = 'Ошибка выполнения запроса';
						}
						alert(ТелоОтвета);
					}
				}
			} 
			http.send(ДанныеФормы);
		}else{  
			{ document.location = link; }
		} 	
	} 	
}

function ПоказатьОкноСообщения(messageText, closeTimeout){
	/*
	try {
		ЭлементHTMLДокумента('messageBoxText').innerHTML = messageText;
		ЭлементHTMLДокумента('messageBox').style.display = 'block';
		if(closeTimeout && closeTimeout > 0){
			setTimeout(СкрытьОкноСообщения, closeTimeout);
		}
	} catch (e) {
		console.warn(e);
	}*/
	var template = document.getElementById("messagebox").innerHTML;
	var html = Mustache.render(template, {message: messageText});
	$.arcticmodal({
		content: html
	});
	if (closeTimeout&&closeTimeout>0) 
		setTimeout(СкрытьОкноСообщения, closeTimeout);
}

function СкрытьОкноСообщения(){
	// ЭлементHTMLДокумента('messageBox').style.display = 'none';
	$.arcticmodal('close');
}

function ПоказатьСообщениеЗагрузки(){
	ЭлементHTMLДокумента('processing').style.top = (window.pageYOffset + Math.floor(screen.height / 2) - 200) + 'px'
	ЭлементHTMLДокумента('processing').style.display = 'block';
}

function СкрытьСообщениеЗагрузки(){
	ЭлементHTMLДокумента('processing').style.display = 'none';	
}

function ЗапускФормыОтправкиФайлов(){
	/*
	var xhr = new XMLHttpRequest();
	var uploadURL = ГлобальныйКонтекст.Коннектор1С.ПутьКБазе1С + '/v-can.site/execute' + ОбязательныеПараметрыЗапросаК1С() + '&exec=' + КодироватьКомпонентыURI('ЛичныйКабинетИнициатораСайт.ДобавитьФайлКОбращению(ПараметрыЗапроса)');
	// В uploadURL оставляем только адрес сервера, остальное переносим в параметры
	var arrURL = uploadURL.split("?");
	uploadURL = arrURL[0];
	var paramsArr = arrURL[1].split("&").map(function (kv) {
               return kv.split("=", 2);
           });	
	xhr.open('post', uploadURL, Истина);	
	xhr.withCredentials = Истина;
	var ДанныеФормы = new FormData();
	paramsArr.forEach(function(item, i, arr) {
		ДанныеФормы.append(item[0], item[1]);
	});
	ДанныеФормы.append('vcanupfile', 'ping');
	xhr.send(ДанныеФормы);	
	*/
}


////////////////////////////////////
// Отбор формы списка

// Выбор исполнителя
function ФормаВыбораИсполнителяИнициатора(ЭлементКнопка){
	var selectForm = ОткрытьФормуСписка(ЭлементКнопка);
	selectForm.ПриВыборе = function(){
		УстановитьОтборСпискаОбращений();
	}
}

// Выбор этапа
function ФормаВыбораЭтапа(ЭлементКнопка){
	var selectForm = ОткрытьФормуСписка(ЭлементКнопка);
	selectForm.ПриВыборе = function(){
		УстановитьОтборСпискаОбращений();
	}
}

function УстановитьОтборСпискаОбращений(){
	var Отбор = ГлобальныйКонтекст.Формы.ФормаСпискаОбращений.Отбор;
	var ОтборДоИзменения = JSON.stringify(Отбор);
	if(ЭлементHTMLДокумента('filterDateFrom').value === ''){
			delete Отбор.dateFrom;
	}
	if(ЭлементHTMLДокумента('filterDateTo').value === ''){
			delete Отбор.dateTo;
	}
	if(ЭлементHTMLДокумента('filterTopic').value === ''){
			delete Отбор.topic;
	}
	if(АтрибутЭлементаHTML('filterStep', 'ref') === ''){
			delete Отбор.step;
	}
	if(АтрибутЭлементаHTML('filterPerformer', 'ref') === ''){
			delete Отбор.performer;
	}
	if(АтрибутЭлементаHTML('filterInitiator', 'ref') === ''){
			delete Отбор.initiator;
	}
	if(ЭлементHTMLДокумента('filterSubstaff') && !ЭлементHTMLДокумента('filterSubstaff').checked){
			delete Отбор.substaff;
	}
	ПеременнуюВКлючСтруктуры(Отбор, "dateFrom",  ЭлементHTMLДокумента('filterDateFrom').value);
	ПеременнуюВКлючСтруктуры(Отбор, "dateTo",    ЭлементHTMLДокумента('filterDateTo').value);
	ПеременнуюВКлючСтруктуры(Отбор, "topic",     ЭлементHTMLДокумента('filterTopic').value);
	ПеременнуюВКлючСтруктуры(Отбор, "step",      АтрибутЭлементаHTML('filterStep', 'ref'));
	ПеременнуюВКлючСтруктуры(Отбор, "performer", АтрибутЭлементаHTML('filterPerformer', 'ref'));
	ПеременнуюВКлючСтруктуры(Отбор, "initiator", АтрибутЭлементаHTML('filterInitiator', 'ref'));
	if(ЭлементHTMLДокумента('filterSubstaff')){
		ПеременнуюВКлючСтруктуры(Отбор, "substaff",  ЭлементHTMLДокумента('filterSubstaff').checked);
	}
	if(ОтборДоИзменения != JSON.stringify(Отбор)){
		ЗагрузитьСписокОбращений();
	}
}

function ЗагрузитьСписокОбращений(){
	ГлобальныйКонтекст.Формы.ФормаСпискаОбращений.Загрузить();
}

function ТекущаяСтраницаСписка(НомерСтраницы, ЗагрузитьСписок){
	ГлобальныйКонтекст.ДополнительныеПараметрыЗапросов.ТекущаяСтраницаСписка = НомерСтраницы;
	if(ЗагрузитьСписок){
		ЗагрузитьСписокОбращений();
	}
}

function ОчиститьФильтрСпискаДатаС(){
	ОчиститьПолеВвода('filterDateFrom');
	УстановитьОтборСпискаОбращений();
}

function ОчиститьФильтрСпискаДатаПо(){
	ОчиститьПолеВвода('filterDateTo');
	УстановитьОтборСпискаОбращений();
}

function ОчиститьФильтрСпискаТема(){
	ОчиститьПолеВвода('filterTopic');
	УстановитьОтборСпискаОбращений();
}

function ОчиститьФильтрСпискаИсполнитель(el){
	ОчиститьПолеВвода('filterPerformer');
	УстановитьОтборСпискаОбращений();
	УдалитьУстановленныйФильтр(el);
}

function ОчиститьФильтрСпискаИнициатор(el){
	ОчиститьПолеВвода('filterInitiator');
	УстановитьОтборСпискаОбращений();
	УдалитьУстановленныйФильтр(el);
}

function ОчиститьФильтрСпискаЭтап(el){
	ОчиститьПолеВвода('filterStep');
	УстановитьОтборСпискаОбращений();
	УдалитьУстановленныйФильтр(el);
}

function ОчиститьФильтр() {
	ОчиститьПолеВвода('filterDateFrom');
	ОчиститьПолеВвода('filterDateTo');
	ОчиститьПолеВвода('filterPerformer');
	ОчиститьПолеВвода('filterInitiator');
	ОчиститьПолеВвода('filterStep');
	ОчиститьПолеВвода('filterTopic');
	УстановитьОтборСпискаОбращений();

	var ЭлементУстановленныхФильтров = ЭлементHTMLДокумента('СписокУстановленныхФильтров');
	var СписокУстановленныхФильтров = ЭлементУстановленныхФильтров.querySelectorAll('.filter-selected-item:not(.filter-selected-cancel)');
	if (СписокУстановленныхФильтров.length) {
		for (var i = 0; i < СписокУстановленныхФильтров.length; i++) {
			СписокУстановленныхФильтров[i].remove();
		}
		ЭлементУстановленныхФильтров.style.display = 'none';
	}
}

/* function ДобавитьУстановленныйФильтр(Ид, Название, Значение, ПриКлике) {
	var tpl = document.createElement('div'); 
	tpl.innerHTML = '<a id="'+Ид+'" href="javascript:void(0)" onclick="'+ПриКлике+'" class="filter-selected-item"><span>'+Название+': '+Значение+'</span><svg><use xlink:href="#close"></use></svg></a>';
	var ЭлементУстановленныхФильтров = ЭлементHTMLДокумента('СписокУстановленныхФильтров');
	ЭлементУстановленныхФильтров.style.display="";
	ЭлементУстановленныхФильтров.append(tpl.firstChild);
} */

function УдалитьУстановленныйФильтр(el) {
	el.remove();
	var ЭлементУстановленныхФильтров = ЭлементHTMLДокумента('СписокУстановленныхФильтров');
	var СписокУстановленныхФильтров = ЭлементУстановленныхФильтров.querySelectorAll('.filter-selected-item:not(.filter-selected-cancel)');
	if (!СписокУстановленныхФильтров.length) ЭлементУстановленныхФильтров.style.display='none';
}

function СсылкаНаДокумент(УИД){
	if(!window.location.origin){
		window.location.origin = window.location.protocol + "//" 
		+ window.location.hostname 
		+ (window.location.port ? ':' + window.location.port : '');
	}
	var Ссылка = location.origin + location.pathname;
	var АдресСтрока = Ссылка.split('?')[0];
	var ПараметрыURLСтрока = Ссылка.split('?')[1];
	var ПараметрыURL = {};
	АдресВПараметрыURL(ПараметрыURL, ПараметрыURLСтрока);
	ПараметрыURL.docref = УИД;
	Ссылка = ДобавитьПараметрыURLВАдрес(АдресСтрока, ПараметрыURL);
	ПоместитьТекстВБуферОбмена(Ссылка);
	Состояние('Ссылка скопирована в буфер обмена', СтатусСообщения.Обычное, 2);
}

function СсылкаНаТекущуюУслугу(){
	if(глВыбраннаяУслуга){
		if (!window.location.origin){
			window.location.origin = window.location.protocol + "//" 
			+ window.location.hostname 
			+ (window.location.port ? ':' + window.location.port : '');
		}
		var Ссылка =  location.origin + location.pathname;
		var ПараметрыURL = {};
		АдресВПараметрыURL(ПараметрыURL);
		ПараметрыURL.serviceref = АтрибутЭлементаHTML(глВыбраннаяУслуга, 'ref');
		Ссылка = ДобавитьПараметрыURLВАдрес(Ссылка, ПараметрыURL);
		ПоместитьТекстВБуферОбмена(Ссылка);
		Состояние('Ссылка скопирована в буфер обмена', СтатусСообщения.Обычное, 2);
	}else{
		Состояние('Выберите услугу, ссылку на которую необходимо получить!', СтатусСообщения.Внимание, 5);
	}
}

function ЗагрузкаИконокУслуг(){
	var Параметры = {};
	var МассивКодовУслуг = [];
	var МассивИконок = ЭлементHTMLДокумента('ДоступныеУслуги_Иконки').querySelectorAll('img[iconid]'); // Массив иконок у которых еще не заменены пустышки
	for(var Счетчик = 0, Количество = МассивИконок.length; Счетчик < Количество; Счетчик++) {
		var Иконка = МассивИконок[Счетчик];
		var КодУслуги = АтрибутЭлементаHTML(Иконка, 'iconid');
		КодУслуги = КодУслуги.replace('code', '')
		МассивКодовУслуг.push(КодУслуги);
		if(Счетчик >= 50){
			// Загружаем максимум по 50 иконок за один запрос
			break;
		}
	}
	if(МассивКодовУслуг.length === 0){
		// Больше услуг с незагруженными иконками нет, соответственно нет смысла делать запрос к 1С
		return;
	}
	Параметры.МассивКодовУслуг = JSON.stringify(МассивКодовУслуг);
	// Запрос к 1С
	var ДанныеФормы = new FormData();
	if(ГлобальныйКонтекст.ИспользуетсяВИнтрасети){
		Параметры.exec = КодироватьКомпонентыURI('ЛичныйКабинетИнициатораСайт.ИконкиДоступныхУслуг(ПараметрыЗапроса)');
		link = ГлобальныйКонтекст.Коннектор1С.ПутьКБазе1С + '/v-can.site/execute';
	}else{
		link = "ajax/userscripts/serviceicons.php";
	}
	ПараметрыURLВДанныеHTMLФормы(ДанныеФормы, Параметры);
	var http = НовыйЗапросHttp(); 
	if(http){
		http.open('post', link); 
		http.withCredentials = Истина;
		http.onreadystatechange = function (){
			if(http.readyState == 4){
				var ТелоОтвета = http.responseText.trim();
				if(ГлобальныйКонтекст.ИспользуетсяВИнтрасети){
					ТелоОтвета = ТелоОтвета.replace('<!--v-can.Status: OK-->', '');
					ТелоОтвета = ТелоОтвета.trim();					
				}					
				if(ТелоОтвета){
					ГлобальныйКонтекст.ДанныеИконок = JSON.parse(ТелоОтвета);
					ЗаменаИконокУслуг();
				}
			}
		} 
		http.send(ДанныеФормы);
	} 	
}

// Для иконок меняет загруженные ранее изображения-пустышки на реальные изображения, полученные из 1С и хранящиеся в глобальном контексте.
function ЗаменаИконокУслуг(){
	var МассивИконок = ЭлементHTMLДокумента('ДоступныеУслуги_Иконки').querySelectorAll('img[iconid]'); // Массив иконок у которых еще не заменены пустышки
	for(var Счетчик = 0, Количество = МассивИконок.length; Счетчик < Количество; Счетчик++){
		var Иконка = МассивИконок[Счетчик];
		var Идентификатор = АтрибутЭлементаHTML(Иконка, 'iconid');
		if(Идентификатор && ГлобальныйКонтекст.ДанныеИконок[Идентификатор]){
			Иконка.src = ГлобальныйКонтекст.ДанныеИконок[Идентификатор]; // Замена изображения
			// Удаляем атрибут с идентификатором иконки, чтобы не менять изображение повторно.
			Иконка.removeAttribute('iconid');
		}
	}
	КоличествоЗапросовЗагрузкиИконокУслуг = КоличествоЗапросовЗагрузкиИконокУслуг + 1;	
	if(КоличествоЗапросовЗагрузкиИконокУслуг <= 20){
		// Всего допускаем 20 итераций загрузки иконок, это 1000 услуг - вряд ли где-то будет больше
		ЗагрузкаИконокУслуг();
	}
}

function ПрикрепитьФайлКОбращению(){
	if(глВыполняетсяОтправкаНовогоОбращения){
		return;
	}
	ГлобальныйКонтекст.Формы.newRequestFTF.ЭлементHTMLВыборФайла.click();
}

function ДоступностьБыстройОтправки(){
	try {
		var Элемент = ЭлементHTMLДокумента('МастерНовогоОбращенияБыстраяОтправка');
		if(ДанныеДляСозданияОбращенияЗаполнены()){
			if(Элемент.style.height === '0px'){
				// Плавно увеличиваем высоту элемента. Здесь указана фиксированная высота, чтобы работал transition.
				var ВысотаЭлемента = '';
				if(ГлобальныйКонтекст.БыстраяОтправкаВысотаЭлемента){
					ВысотаЭлемента = ВысотаЭлемента + ГлобальныйКонтекст.БыстраяОтправкаВысотаЭлемента;
				}else{
					ВысотаЭлемента = '20';
				}
				ВысотаЭлемента = ВысотаЭлемента + 'px';
				Элемент.style.height = ВысотаЭлемента;
				setTimeout(ДоступностьБыстройОтправкиПоказать, 300);
			}
			return true;
		}else{
			if(Элемент.style.height != '0px'){
				// Плавно уменьшаем высоту элемента
				Элемент.style.overflowY = 'hidden';
				Элемент.style.height = '0px';
			}
			return false;
		}
	} catch(e) {
		console.warn(e);
		return false;
	}
}

function ДоступностьБыстройОтправкиПоказать(){
	// Вычисляем реальную высоту элемента
	var Элемент = ЭлементHTMLДокумента('МастерНовогоОбращенияБыстраяОтправка');
	Элемент.style.overflowY = 'unset';
	Элемент.style.height = '100%';
	setTimeout(ДоступностьБыстройОтправкиПоказатьПолностью, 50);
}

function ДоступностьБыстройОтправкиПоказатьПолностью(){
	// Устанавливаем реальную высоту элементу
	var Элемент = ЭлементHTMLДокумента('МастерНовогоОбращенияБыстраяОтправка');
	ГлобальныйКонтекст.БыстраяОтправкаВысотаЭлемента = Элемент.getBoundingClientRect().bottom - Элемент.getBoundingClientRect().top;
	Элемент.style.height = '' + ГлобальныйКонтекст.БыстраяОтправкаВысотаЭлемента + 'px';
}


function ПриИзмененииОписанияУслуги(){
	var Элемент = ЭлементHTMLДокумента('ОписаниеУслуги');
	if(Элемент.innerHTML != ''){
		if(Элемент.style.height === '0px' || Элемент.style.height === '100%'){
			// Плавно увеличиваем высоту элемента. Здесь указана фиксированная высота, чтобы работал transition.
			var ВысотаЭлемента = '';
			if(ГлобальныйКонтекст.ОписаниеУслугиВысотаЭлемента){
				ВысотаЭлемента = ВысотаЭлемента + ГлобальныйКонтекст.ОписаниеУслугиВысотаЭлемента;
			}else{
				ВысотаЭлемента = '20';
			}
			ВысотаЭлемента = ВысотаЭлемента + 'px';
			Элемент.style.height = ВысотаЭлемента;
			setTimeout(ОписаниеУслугиПоказать, 300);
		}else{
			Элемент.style.height = '100%';
		}
		return true;
	}else{
		if(Элемент.style.height != '0px'){
			// Плавно уменьшаем высоту элемента
			Элемент.style.overflowY = 'hidden';
			Элемент.style.height = '0px';
		}
		return false;
	}
}

function ОписаниеУслугиПоказать(){
	// Вычисляем реальную высоту элемента
	var Элемент = ЭлементHTMLДокумента('ОписаниеУслуги');
	Элемент.style.overflowY = 'unset';
	Элемент.style.height = '100%';
	setTimeout(ОписаниеУслугиПоказатьПолностью, 50);
}

function ОписаниеУслугиПоказатьПолностью(){
	// Устанавливаем реальную высоту элементу
	var Элемент = ЭлементHTMLДокумента('ОписаниеУслуги');
	ГлобальныйКонтекст.ОписаниеУслугиВысотаЭлемента = Элемент.getBoundingClientRect().bottom - Элемент.getBoundingClientRect().top;
	Элемент.style.height = '' + ГлобальныйКонтекст.ОписаниеУслугиВысотаЭлемента + 'px';
}

// Обновление количества задач у пункта меню "Задачи мне". Выполняется асинхронно.
function КоличествоЗадачМне(){
	var ЗапросHttp = НовыйЗапросHttp();
	ЗапросHttp.onreadystatechange = function (){
		if(ЗапросHttp.readyState === 4){
			var ТелоОтветаHttp = ЗапросHttp.responseText.trim();
			if(ГлобальныйКонтекст.ИспользуетсяВИнтрасети){
				ТелоОтветаHttp = ТелоОтветаHttp.replace('<!--v-can.Status: OK-->', '').trim();
			}
		}
	} 
	ВыполнитьФункцию1С('ЛичныйКабинетИнициатораСайт.КоличествоЗадачМнеСайт(ПараметрыЗапроса)', {}, Истина, ЗапросHttp);
}

function ИзменитьРазмерТаблицыСписка(){
	var СписокОбращенийТелоТаблицы = ЭлементHTMLДокумента('СписокОбращенийТелоТаблицы');
	if(СписокОбращенийТелоТаблицы){
		var Высота = (document.body.clientHeight - 200);
		СписокОбращенийТелоТаблицы.style.maxHeight = Высота + 'px';
		if(СписокОбращенийТелоТаблицы.clientHeight === СписокОбращенийТелоТаблицы.scrollHeight){
			var ПоправкаНаПлосуПрокрутки = 0;
		}else{
			var ПоправкаНаПлосуПрокрутки = 17;
		}
		СписокОбращенийТелоТаблицы.style.width = ШиринаЭлементаHTML('СписокОбращенийТаблица') + ПоправкаНаПлосуПрокрутки + 'px';
		ЭлементHTMLДокумента('СписокОбращенийТаблица').style.maxHeight = Высота + 'px';
		СписокОбращенийТелоТаблицыГраницы = ЭлементHTMLДокумента('СписокОбращенийТелоТаблицы').getBoundingClientRect();
		ЭлементHTMLДокумента('Пагинация').style.top = (СписокОбращенийТелоТаблицыГраницы.bottom - СписокОбращенийТелоТаблицыГраницы.top  - 32) + 'px';
	}
}

function ПриоритетТекущееЗначение(){
	var Результат = '';
	if(ЭлементHTMLДокумента('ПриоритетВыпадающийСписок')){
		Результат = ЭлементHTMLДокумента('ПриоритетВыпадающийСписок').value
	}
	if(ЭлементHTMLДокумента('ГруппаПриоритетСрочность')){
		var РадиоПриоритет = document.querySelector('input[name="radio1"]:checked');
		if(РадиоПриоритет){
			Результат =  РадиоПриоритет.value;
		}
	}	
	return Результат;
}

/* Не выставляется
function ПриоритетУстановитьЗначениеПоУмолчанию(){
	if(ЭлементHTMLДокумента('ПриоритетПоУмолчанию')){
		var ПриоритетПоУмолчанию = ЭлементHTMLДокумента('ПриоритетПоУмолчанию').value;
		if(ЭлементHTMLДокумента('ПриоритетВыпадающийСписок')){
			ЭлементHTMLДокумента('ПриоритетВыпадающийСписок').value = ПриоритетПоУмолчанию;
		}
		if(ЭлементHTMLДокумента('ГруппаПриоритетСрочность')){
			var МассивРадиокнопок = document.querySelectorAll('input[name="radio1"]');
			for(var Счетчик = 0, КоличествоЭлементов = МассивРадиокнопок.length; Счетчик < КоличествоЭлементов; Счетчик++){
				if(МассивРадиокнопок[Счетчик].value === ПриоритетПоУмолчанию){
					МассивРадиокнопок[Счетчик].checked = Истина;
				}else{
					МассивРадиокнопок[Счетчик].checked = Ложь;
				}
			}
		}
	}
}
*/

function НовоеОбращениеТемаПолучить(){
	var ЗначениеЭлемента = '';
	var НовоеОбращениеТемаЭлемент = ЭлементHTMLДокумента('НовоеОбращениеТема');
	var ИмяТега = НовоеОбращениеТемаЭлемент.tagName.toLowerCase();
	if(ИмяТега === 'input'){
		ЗначениеЭлемента = НовоеОбращениеТемаЭлемент.value;
	}
	if(ИмяТега === 'div'){
		ЗначениеЭлемента = НовоеОбращениеТемаЭлемент.innerText;
	}
	ЗначениеЭлемента = ЗначениеЭлемента.trim();
	return ЗначениеЭлемента;
}

function НовоеОбращениеТемаУстановить(Значение){
	var НовоеОбращениеТемаЭлемент = ЭлементHTMLДокумента('НовоеОбращениеТема');
	var ИмяТега = НовоеОбращениеТемаЭлемент.tagName.toLowerCase();
	if(ИмяТега === 'input'){
		НовоеОбращениеТемаЭлемент.value = Значение;
	}
	if(ИмяТега === 'div'){
		НовоеОбращениеТемаЭлемент.innerHTML = Значение;
	}
}

window.onresize = function() {
	ИзменитьРазмерТаблицыСписка();
}

// Отчеты
// Удаляем элементы чтобы не плодить названия отчетов
function removeElementsByClass(className){
    const elements = document.getElementsByClassName(className);
    while(elements.length > 0){
        elements[0].parentNode.removeChild(elements[0]);
    }
}
// Выводим наименование открытого отчета на страницу
function printNameOfReport(){
	if (document.getElementsByClassName('reportname')) {
		removeElementsByClass('reportname');
	}
	
	var ТекущаяСтрока = ГлобальныйКонтекст.Формы.СписокОтчетов.ТекущаяСтрока;
	var НаименованиеОтчета = ТекущаяСтрока.querySelector('td').innerHTML;
	var nameOfReport = document.createElement('span');
	nameOfReport.classList.add('reportname');
	nameOfReport.prepend(НаименованиеОтчета);
	ЭлементHTMLДокумента('СтраницаОтчет').prepend(nameOfReport);
}

function ОтобразитьФормуОтчета(){
        ЭлементHTMLДокумента("РезультатОтчета").innerHTML = "";
	var ТекущаяСтрока = ГлобальныйКонтекст.Формы.СписокОтчетов.ТекущаяСтрока;
	if(ТекущаяСтрока){
		var ЕстьВидимыеПоляОтбора = Ложь;
		var ДоступныеПоляОтбора = АтрибутЭлементаHTML(ТекущаяСтрока, 'filterfields');
		if(ДоступныеПоляОтбора){
			ДоступныеПоляОтбора = JSON.parse(ДоступныеПоляОтбора);
		}
			var ЭлементыОтбора = ЭлементHTMLДокумента('Отчеты_ЭлементыОтбора').querySelectorAll('[class=filterelement]');
			for (var Счетчик = 0, Количество = ЭлементыОтбора.length; Счетчик < Количество; Счетчик++) {
				if(ДоступныеПоляОтбора.indexOf(ЭлементыОтбора[Счетчик].id.replace('Отчеты_ПолеОтбора_', '')) >= 0){
					ЭлементыОтбора[Счетчик].style.display = 'inline-block';
					ЕстьВидимыеПоляОтбора = Истина;
				}else{
					ЭлементыОтбора[Счетчик].style.display = 'none';
				}
			}
		
		ЭлементHTMLДокумента('СписокОтчетов').style.display = 'none';
		ЭлементHTMLДокумента('СтраницаОтчет').style.display = 'block';
		printNameOfReport();
		ЭлементHTMLДокумента('РезультатОтчета').style.opacity = 0.5;
		ГлобальныйКонтекст.АктивнаяФорма = Неопределено;
		if(!ЕстьВидимыеПоляОтбора){
			// Доступных полей отбора нет, можно сформировать отчет сразу
			СфомироватьОтчет();
		}
	}
}

function ОтобразитьСписокОтчетов(){
	ЭлементHTMLДокумента('СписокОтчетов').style.display = 'block';
	ЭлементHTMLДокумента('СтраницаОтчет').style.display = 'none';
	ГлобальныйКонтекст.АктивнаяФорма = ГлобальныйКонтекст.Формы.СписокОтчетов;
}

function Отчеты_ДатаНачалаПриИзменении(){
	Отчеты_УстановитьОтбор();
	Отчеты_ЭлементОтбораПриИзменении();
}

function Отчеты_ДатаНачалаОчистить(){
	ЭлементHTMLДокумента('Отчеты_Отбор_ДатаНачала').value = '';
	Отчеты_ДатаНачалаПриИзменении();
}

function Отчеты_ДатаОкончанияПриИзменении(){
	Отчеты_УстановитьОтбор();
	Отчеты_ЭлементОтбораПриИзменении();
}

function Отчеты_ДатаОкончанияОчистить(){
	ЭлементHTMLДокумента('Отчеты_Отбор_ДатаОкончания').value = '';
	Отчеты_ДатаОкончанияПриИзменении();
}

function Отчеты_ЭлементОтбораПриИзменении(){
	ЭлементHTMLДокумента('РезультатОтчета').style.opacity = 0.5;
}

function Отчеты_ТекущийИсполнительОчистить(){
	ГлобальныйКонтекст.Формы.Отчеты.ОчиститьПолеВвода('Отчеты_Отбор_ТекущийИсполнитель')
	Отчеты_УстановитьОтбор();
}

function Отчеты_УслугаОчистить(){
	ГлобальныйКонтекст.Формы.Отчеты.ОчиститьПолеВвода('Отчеты_Отбор_Услуга')
	Отчеты_УстановитьОтбор();
}

function Отчеты_УстановитьОтбор(){
	if(ЭлементHTMLДокумента('Отчеты_Отбор_ДатаНачала').value === ''){
			delete ОтборОтчета.ДатаНачала;
	}
	if(ЭлементHTMLДокумента('Отчеты_Отбор_ДатаОкончания').value === ''){
			delete ОтборОтчета.ДатаОкончания;
	}
	if(АтрибутЭлементаHTML('Отчеты_Отбор_ТекущийИсполнитель', 'ref') === ''){
			delete ОтборОтчета.ТекущийИсполнитель;
	}
	if(АтрибутЭлементаHTML('Отчеты_Отбор_Услуга', 'ref') === ''){
			delete ОтборОтчета.Услуга;
	}
	ПеременнуюВКлючСтруктуры(ОтборОтчета, 'ДатаНачала',			ЭлементHTMLДокумента('Отчеты_Отбор_ДатаНачала').value);
	ПеременнуюВКлючСтруктуры(ОтборОтчета, 'ДатаОкончания',		ЭлементHTMLДокумента('Отчеты_Отбор_ДатаОкончания').value);
	ПеременнуюВКлючСтруктуры(ОтборОтчета, 'ТекущийИсполнитель',	АтрибутЭлементаHTML('Отчеты_Отбор_ТекущийИсполнитель', 'ref'));
	ПеременнуюВКлючСтруктуры(ОтборОтчета, 'Услуга',				АтрибутЭлементаHTML('Отчеты_Отбор_Услуга', 'ref'));
}

function СфомироватьОтчет(){
	var ОтчетСсылка = ГлобальныйКонтекст.Формы.СписокОтчетов.СсылкаВТекущейСтроке();
	if(ОтчетСсылка){
		var Параметры = {};
		Параметры.ОтчетСсылка = ОтчетСсылка;
		Параметры.ОтборОтчета = JSON.stringify(ОтборОтчета);
		ЗапросК1С('ЛичныйКабинетИнициатораСайт.СформироватьОтчет(ПараметрыЗапроса)', Параметры, 'РезультатОтчета', Истина, {Прозрачность: 0.3})
	}
}

function ПередЗагрузкойИнтерфейса(){
	var Отказ = Ложь;
	var ПараметрыАдреса = {};
	АдресВПараметрыURL(ПараметрыАдреса);
	if(ПараметрыАдреса.ratetask){
		// Необходимо отобразить страницу оценки обращения
		Отказ = Истина;
		ЗапросК1С('ЛичныйКабинетИнициатораСайт.ФормаОценкиОбращения(ПараметрыЗапроса)', {}, 'mainpage', Истина, {});
	}
	return Отказ;
	
}

/*
function SelectFilterEscalate(el){
	var $el = $(el);

    var $parent = document.getElementById('DocumetButtons');


    var ref = $el.attr('ref');

    var pres = $el.attr('presentation');

   var data = {

            siteID: 'v-can.site_itil',
			ref: ref,
			pres: pres,
			Objectref: ГлобальныйКонтекст.Формы.Обращение.ОбъектСсылка.Ссылка  
        }; 

 $.ajax({
            url: ГлобальныйКонтекст.Коннектор1С.ПутьКБазе1С + '/v-can.site/escalation',
            data: data,
            method: 'GET',
            contentType: 'multipart/form-data',
            success: function (htmlstr) {
            	ГлобальныйКонтекст.Формы.Обращение.Загрузить();
				ГлобальныйКонтекст.Формы.ФормаСпискаОбращений.Загрузить();
            }
         })

    $parent.classList.remove('show');
}
function Escalation(el) {
	 var $el = $(el);
    var $container = $el.parent();
    if ($container.hasClass('show')) {
        $container.removeClass('show');
    } else {
        var fbody = $el.closest('.filter-bodyEscalate')
        fbody.find('.filter-item-bodyEscalate').remove();
        fbody.find('.filter-itemEscalate').removeClass('show');
        
        var formdataname = $el.attr('formdataname'),
        maintable = $el.attr('maintable'),
        listformcols = $el.attr('listformcols');

        var data = {
        	targetelem_formdataname: formdataname,
            targetelem_maintable: maintable,
            targetelem_listformcols: listformcols,
            siteID: 'v-can.site_itil',
			requestRef: ГлобальныйКонтекст.Формы.Обращение.ОбъектСсылка.Ссылка,
            ТекущаяСтраницаСписка: ГлобальныйКонтекст.ДополнительныеПараметрыЗапросов.ТекущаяСтраницаСписка || 1
        };

        $.ajax({
            url: ГлобальныйКонтекст.Коннектор1С.ПутьКБазе1С + '/v-can.site/escalation',
            data: data,
            method: 'POST',
            contentType: 'multipart/form-data',
            success: function (htmlstr) {
                var div = document.createElement('div');
                div.innerHTML = htmlstr;

                var items = [];
                $(div).find('tr.RefItem').each(function (i, trItem) {
                    items.push({
                        ref: $(trItem).attr('ref'),
                        presentation: $(trItem).attr('presentation'),
                        groupname: $(trItem).find('td').eq(1).text()
                    });
                });

                var template = document.getElementById('filterItemBodyEscalate').innerHTML;

                $container.find('.filter-item-bodyEscalate').remove();

                var html = Mustache.render(template, {items: items});
                $container.append(html);
                $container.addClass('show');
            }
        });
    }	}
*/
